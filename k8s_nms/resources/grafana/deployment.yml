apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-env
data:
  # needed for re-writing grafana URLs through nginx
  GF_AUTH_ANONYMOUS_ENABLED: "true"
  GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
  # allow iframe for NMS
  GF_SECURITY_ALLOW_EMBEDDING: "true"
  # environment variables used by Grafana
  GRAFANA_DB: "grafana"
  GRAFANA_ADMIN_PASS: "test"
  GRAFANA_MYSQL_READER: "grafanaReader"
  GRAFANA_MYSQL_READER_PASS: "uMDC36aagIUR"
  GRAFANA_MYSQL_WRITER: "grafanaWriter"
  GRAFANA_MYSQL_WRITER_PASS: "guHXwEDduo78"
---
{% set grafana_provisioning_files = [
  ('template', 'provisioning/datasources/mysql.yml'),
  ('read', 'provisioning/datasources/prometheus.yml'),
  ('read', 'provisioning/dashboards/config.yml'),
  ('read', 'dashboards/udp_pinger_dashboard.json'),
  ('read', 'dashboards/link_dashboard_prometheus.json'),
  ('read', 'dashboards/docker_monitoring.json'),
  ('read', 'dashboards/network_health.json'),
] %}
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
    - port: 3000
  selector:
    app: grafana
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: grafana
    spec:
      volumes:
{% for _, f in grafana_provisioning_files %}
        - name: grafana-provisioning-{{ dns_name(f) }}
          configMap:
            name: grafana-provisioning-{{ dns_name(f) }}
{% endfor %}
      containers:
      - image: grafana/grafana:latest
        name: grafana
        envFrom:
          - configMapRef:
              name: grafana-env
        volumeMounts:
{% for _, f in grafana_provisioning_files %}
          - name: grafana-provisioning-{{ dns_name(f) }}
            mountPath: /etc/grafana/{{ f }}
            subPath: {{ basename(f) }}
{% endfor %}
        ports:
        - containerPort: 30000
          name: grafana
