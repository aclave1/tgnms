# Set to the main user that should operate the cluster
kubernetes_user: root

# Set to `true` if nms will be running on a single host.
single_node: true

# +--------------------------------------------------------+
# |           NMS Configuration Options                    |
# +--------------------------------------------------------+

# n/a yet

# +--------------------------------------------------------+
# |        Bootstrapping the Kubernetes Cluster            |
# +--------------------------------------------------------+
# If you are on Centos7, you may need to change this to python2
ansible_python_interpreter: python3
# If you are on Centos7, you may need to change this to python2-pip
pip_package: python3-pip

# Ansible uses these args to connect via SSH, edit as necessary
ansible_ssh_extra_args: -o StrictHostKeyChecking=no

# Kubernetes configuration
# This cannot overlap with any existing IP addresses on your machine,
# so you must change it here if that is the case
master_ip: 2620:10d:c0bf:1800:250:56ff:fe93:2b54
service_cidr: fd00:cdef::/120
pod_network_cidr: fd00:cdee::/120
metallb_address_space: 2620:10d:c0bf:1800:250:56ff:fe93:2b54-2620:10d:c0bf:1800:250:56ff:fe93:2b54


http_proxy: http://[2620:10d:c0bf:1800:20c:29ff:fe0f:8758]:2831
https_proxy: http://[2620:10d:c0bf:1800:20c:29ff:fe0f:8758]:2831

# Set the Kubernetes version
kube_version: v1.19.0

# +--------------------------------------------------------+
# |                 Core NMS  Options                      |
# +--------------------------------------------------------+

msa_services:
  - name: topology_service
    uses_database: true
    db_password: 6789
    command: "alembic upgrade head && topology_service"
  - name: network_test
    uses_database: true
    db_password: 6789
    command: "alembic upgrade head && network_test"
  - name: default_routes_service
    uses_database: true
    db_password: 6789
    command: "alembic upgrade head && default_routes_service"
  - name: analytics
    uses_database: false
    command: "analytics"
  - name: weather_service
    uses_database: false
    command: "weather_service"


# apply args
resolver: 10.96.0.10
upstream_nms: nms.default.svc.cluster.local
upstream_grafana: grafana.default.svc.cluster.local
upstream_jupyter: jupyter.default.svc.cluster.local
upstream_prometheus: prometheus.default.svc.cluster.local
upstream_kibana: kibana.default.svc.cluster.local
upstream_keycloak: keycloak.default.svc.cluster.local
upstream_chihaya: chihaya.default.svc.cluster.local
upstream_elasticsearch: elasticsearch.default.svc.cluster.local
upstream_exporter: es_exporter.default.svc.cluster.local
upstream_fluentd: fluentd.default.svc.cluster.local


ssl_cert_path: /home/davidriazati/cert.pem
ssl_key_path: /home/davidriazati/key.pem


nms_username: admin
nms_password: null
nms_software_portal_api_id: null
nms_software_portal_api_key: null
ansible_user: root
docker_user: root
ext_nms_hostname: ubuntu18-04
certbot_user_email: ''
certbot_args: --staging
terragraph_docker_path: /opt/terragraph
controllers_list:
- name: dev_example_first
  ctrlr_port: '7007'
  agg_port: '8002'
  app_port: '17077'
  bt_seeder_port: '6881'
e2e_image: secure.cxl-terragraph.com:443/e2e-controller:latest
weather_service:
  enabled: true
  provider: climacell
  api_key: 96FCwiIEwcRVDqDKVa8CRbKS4eYZhC3m
dev_mode: false

nms_start_retry: 10
nms_start_delay: 30
nginx_worker_processes: auto
nginx_worker_connections: 1024
docker_internal_network: fd00:420:69::/48
keycloak_enabled: false
keycloak_root_user: root
keycloak_root_password: 7I*xUF9PGpI5W*ig
keycloak_db_user: keycloak
keycloak_db_password: 8^ib0L5lvSF9gC5a
db_host: db
db_root_user: root
db_root_password: 12345
gluster_bricks: bricks
gluster_mount: gfs
glusterfs_ppa_version: 4.1
glusterfs_gpg_key_version: 4.1
kafka_log_retention_bytes: 1073741824
E2E_CONFIG_FILE: cfg/controller_config.json
E2E_TOPOLOGY_FILE: e2e_topology.conf
API_ARGS: null
NMS_CONFIG_FILE: cfg/aggregator_config.json
sysdump_gfs_path: /opt/terragraph/sysdump
