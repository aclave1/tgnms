{"version":3,"sources":["../src/datasource.js"],"names":["dateMath","_","TYPEAHEADTYPE","RESTRICTORTYPE","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","timeFilter","rangeRaw","from","getBeringeiTime","until","to","fromIsAbsolute","toString","endsWith","minAgo","Math","round","Date","now","parseInt","split","startTsSec","endTsSec","date","roundUp","isString","parts","exec","amount","unit","parse","valueOf","targets","filter","target","rawQuery","getTimeFilter","map","retObject","Object","refId","targetnew","JSON","replace","scopedVars","e","console","log","restrictor","keyname","beringeisource","topologyName","variables","forEach","variable","current","text","keyNames","Array","restrictors","restrictorArray","values","push","rstrcr","trim","restrictorType","dsIntervalSec","query","buildQueryParameters","t","hide","when","data","getAdhocFilters","adhocFilters","i","doRequest","method","then","mapToGrafanaFormat","result","hasOwnProperty","columns","points","datapoints","j","tmp","response","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","searchTerm","typeaheadType","includes","restrictorObj","interpolated","mapToTextValue","ret","isArray","data1d","concat","d","keyName","value","isObject","datasourceRequest","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import * as dateMath from 'app/core/utils/datemath';\nimport _ from \"lodash\";\n\n// from Stats.thrift\nconst TYPEAHEADTYPE = {\"KEYNAME\" : 1, \"NODENAME\" : 3, \"TOPOLOGYNAME\" : 4};\nconst RESTRICTORTYPE = {\"NODE\" : 1, \"LINK\" : 1};\n\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' &&\n      instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  getTimeFilter(options) {\n    let timeFilter = {};\n    if (options && options.rangeRaw) {\n      const from = this.getBeringeiTime(options.rangeRaw.from, false);\n      const until = this.getBeringeiTime(options.rangeRaw.to, true);\n      const fromIsAbsolute = from.toString().endsWith('ms');\n\n\n      if (until === 'now()' && !fromIsAbsolute) {\n        timeFilter.minAgo = from;\n      }\n      else if (until === 'now()') {\n        timeFilter.minAgo = Math.round((Date.now() -\n        parseInt(from.split('ms')[0]))/(1000.0 * 60));\n      }\n      else {\n        timeFilter.startTsSec = Math.round(parseInt(from.split('ms')[0])/1000.0);\n        timeFilter.endTsSec = Math.round(parseInt(until.split('ms')[0])/1000.0);\n      }\n    }\n    return timeFilter;\n  }\n\n  getBeringeiTime(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        let minAgo = 0;\n        switch (unit) {\n          case 'd':\n            minAgo = amount * 24 * 60;\n            break;\n          case 'h':\n            minAgo = amount * 60;\n            break;\n          case 's':\n            minAgo = Math.round(amount / 60.0);\n            break;\n          case 'm':\n            minAgo = amount;\n            break;\n        }\n        return minAgo;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return ((target.target !== 'enter raw query') && target.rawQuery)\n              || !target.rawQuery;\n    });\n\n    let timeFilter = this.getTimeFilter(options);\n\n    let targets = _.map(options.targets, target => {\n      let retObject = new Object();\n      retObject.target = {};\n      retObject.refId = target.refId;\n      retObject.type = target.type || 'rawquery';\n      if (target.rawQuery) {\n        // a raw query is directly in the form in Stats.thrift::QueryRequest\n        let targetnew = {};\n        try {\n          targetnew = JSON.parse(this.templateSrv.replace(target.target,\n            options.scopedVars, 'regex'));\n        }\n        catch(e) {\n          console.log('invalid json object');\n          return retObject;\n        }\n        retObject.target = targetnew;\n        return retObject;\n      } else {\n        // put query in the form in Stats.thrift::QueryRequest\n        const restrictor = this.templateSrv.replace(target.restrictor,\n          options.scopedVars, 'regex');\n        const keyname = this.templateSrv.replace(target.keyname,\n          options.scopedVars, 'regex');\n        let beringeisource = this.templateSrv.replace(target.beringeisource,\n          options.scopedVars, 'regex');\n\n        // build the query\n        let targetnew = {};\n        // topologyName comes from a variable called \"topology\"\n        let topologyName = \"\";\n        this.templateSrv.variables.forEach(variable => {\n          if (variable.name === \"topology\") {\n            topologyName = variable.current.text;\n          }\n        });\n\n        targetnew.topologyName = topologyName;\n        if (keyname && keyname !== 'select keyname' && keyname.length > 0) {\n          targetnew.keyNames = new Array (keyname);\n        } else {\n          return retObject;\n        }\n\n        if (restrictor && restrictor !== 'select restrictor' &&\n            restrictor.length > 0) {\n          // restrictor can be a comma-separated list\n          targetnew.restrictors = new Array();\n          let restrictorArray = restrictor.split(',');\n          let restrictors = new Object();\n          restrictors.values = new Array();\n          restrictorArray.forEach (rstrcr => {\n            restrictors.values.push(rstrcr.trim());\n          });\n          restrictors.restrictorType = RESTRICTORTYPE[\"NODE\"];\n          targetnew.restrictors.push(restrictors);\n        }\n\n        beringeisource = beringeisource || \"30\";\n        targetnew.dsIntervalSec = parseInt(beringeisource);\n        if (timeFilter.minAgo) {\n          targetnew.minAgo = timeFilter.minAgo;\n        }\n        else {\n          targetnew.startTsSec = timeFilter.startTsSec;\n          targetnew.endTsSec = timeFilter.endTsSec;\n        }\n\n        retObject.target = targetnew;\n        return retObject;\n      }\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) { // TODO\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    // build single query from multiple queries\n    for (let i = 1; i < query.targets.length; i++) {\n      if (query.targets[0].target.keyNames &&\n        query.targets[i].target.keyNames) {\n        query.targets[0].target.keyNames.push(query.targets[i].target.keyNames[0]);\n      }\n    }\n\n    return this.doRequest({\n      url: this.url + '/stats_query',\n      data: query.targets[0].target,\n      method: 'POST'\n    }).then(this.mapToGrafanaFormat);\n  }\n\n  mapToGrafanaFormat(result) {\n    if (!result.data.hasOwnProperty('columns') ||\n        !result.data.hasOwnProperty('points')) {\n      console.log('no columns or points field');\n      return result;\n    }\n    if (result.data.columns.length <= 1) {\n      console.log('columns field has only one entry');\n      return result;\n    }\n\n    if (result.data.points[0].length !== result.data.columns.length) {\n      console.log('columns and every element of points same length error');\n    }\n\n    let data = new Array();\n    // start with i = 1, i = 0 is \"time\"\n    for (let i = 1; i < result.data.columns.length; i++) {\n      data.push(new Object());\n      data[i - 1].target = result.data.columns[i];\n      data[i - 1].datapoints = new Array();\n      for (let j = 0; j < result.data.points.length; j++) {\n        let tmp = new Array();\n        tmp.push(result.data.points[j][i]); // value\n        tmp.push(result.data.points[j][0]); // unixTime\n        data[i - 1].datapoints.push(tmp);\n      }\n    }\n    delete result.data;\n    result.data = data;\n    return result;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\",\n                 message: \"Data source is working\",\n                 title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n\n  metricFindQuery(query) {\n    // topologyName comes from a variable called \"topology\"\n    let topologyName = \"\";\n    if (this.templateSrv.variables) {\n      this.templateSrv.variables.forEach(variable => {\n        if (variable.name === \"topology\") {\n          topologyName = variable.current.text;\n        }\n      });\n    }\n    if (topologyName.length === 0) {\n      console.log(\"must set a variable called 'topology'\");\n      return [];\n    }\n\n    let searchTerm = this.templateSrv.replace(query, null, 'regex');\n    let typeaheadType = TYPEAHEADTYPE[\"KEYNAME\"];\n\n    // this is the search from the topology variable\n    if (searchTerm === \"__bqs_topology_query\") {\n      typeaheadType = TYPEAHEADTYPE[\"TOPOLOGYNAME\"];\n    }\n    // a node query is __bqs_[[topology]] where topology is a variable\n    else if (searchTerm.includes(\"__bqs_\")) {\n      typeaheadType = TYPEAHEADTYPE[\"NODENAME\"];\n      topologyName = searchTerm.split('__bqs_')[1]; // just topology name\n    }\n    let restrictors = [];\n    if (this.target && this.target.restrictor &&\n      this.target.restrictor.length > 0) {\n      restrictorObj = {};\n      restrictorObj.restrictorType = RESTRICTORTYPE[\"NODE\"];\n      restrictorObj.values = [];\n      restrictorObj.values.push(this.target.restrictor);\n      restrictors.push(restrictorObj);\n    }\n\n    var interpolated = {\n        restrictors: restrictors,\n        searchTerm: searchTerm,\n        topologyName: topologyName,\n        typeaheadType: typeaheadType,\n    };\n\n    return this.doRequest({\n      url: this.url + '/stats_typeahead',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  metricFindNodeNames(query) {\n    // topologyName comes from a variable called \"topology\"\n    let topologyName = \"\";\n    if (this.templateSrv.variables) {\n      this.templateSrv.variables.forEach(variable => {\n        if (variable.name === \"topology\") {\n          topologyName = variable.current.text;\n        }\n      });\n    }\n    if (topologyName.length === 0) {\n      console.log(\"must set a variable called 'topology'\");\n      return [];\n    }\n\n    var interpolated = {\n      topologyName: topologyName,\n      typeaheadType: TYPEAHEADTYPE[\"NODENAME\"],\n    };\n\n    let ret = this.doRequest({\n      url: this.url + '/stats_typeahead',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n    return ret;\n  }\n\n\n  mapToTextValue(result) {\n    if (result && result.data && _.isArray(result.data)) {\n      const data1d = [].concat(...result.data); // flatten\n      return _.map(data1d, (d, i) => {\n        if (d && d.keyName) {\n          // \"keyName\" is returned by BQS\n          return { text: d.keyName, value: d.keyName };\n        } else if (_.isObject(d)) {\n          return { text: d, value: d};\n        }\n        return { text: d, value: d};\n      });\n    }\n    else {\n      return [];\n    }\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}