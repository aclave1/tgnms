{"version":3,"sources":["../src/datasource.js"],"names":["dateMath","_","TYPEAHEADTYPE","RESTRICTORTYPE","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","scale","basicAuth","length","options","timeFilter","rangeRaw","from","getBeringeiTime","until","to","fromIsAbsolute","toString","endsWith","minAgo","Math","round","Date","now","parseInt","split","startTsSec","endTsSec","date","roundUp","isString","parts","exec","amount","unit","parse","valueOf","targets","filter","target","rawQuery","isNaN","Number","getTimeFilter","map","retObject","Object","refId","targetnew","JSON","replace","scopedVars","e","console","log","restrictor","keyname","beringeisource","topologyName","variables","forEach","variable","current","text","keyNames","Array","restrictors","restrictorArray","values","push","rstrcr","trim","restrictorType","dsIntervalSec","query","buildQueryParameters","t","hide","when","data","getAdhocFilters","adhocFilters","i","doRequest","method","then","mapToGrafanaFormat","bind","result","hasOwnProperty","columns","points","datapoints","j","tmp","response","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","searchTerm","typeaheadType","includes","restrictorObj","interpolated","mapToTextValue","ret","isArray","data1d","concat","d","keyName","value","isObject","datasourceRequest","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import * as dateMath from 'app/core/utils/datemath';\nimport _ from \"lodash\";\n\n// from Stats.thrift\nconst TYPEAHEADTYPE = {\"KEYNAME\" : 1, \"NODENAME\" : 3, \"TOPOLOGYNAME\" : 4};\nconst RESTRICTORTYPE = {\"NODE\" : 1, \"LINK\" : 1};\n\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    this.scale = 1;\n    if (typeof instanceSettings.basicAuth === 'string' &&\n      instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  getTimeFilter(options) {\n    let timeFilter = {};\n    if (options && options.rangeRaw) {\n      const from = this.getBeringeiTime(options.rangeRaw.from, false);\n      const until = this.getBeringeiTime(options.rangeRaw.to, true);\n      const fromIsAbsolute = from.toString().endsWith('ms');\n\n\n      if (until === 'now()' && !fromIsAbsolute) {\n        timeFilter.minAgo = from;\n      }\n      else if (until === 'now()') {\n        timeFilter.minAgo = Math.round((Date.now() -\n        parseInt(from.split('ms')[0]))/(1000.0 * 60));\n      }\n      else {\n        timeFilter.startTsSec = Math.round(parseInt(from.split('ms')[0])/1000.0);\n        timeFilter.endTsSec = Math.round(parseInt(until.split('ms')[0])/1000.0);\n      }\n    }\n    return timeFilter;\n  }\n\n  getBeringeiTime(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        let minAgo = 0;\n        switch (unit) {\n          case 'd':\n            minAgo = amount * 24 * 60;\n            break;\n          case 'h':\n            minAgo = amount * 60;\n            break;\n          case 's':\n            minAgo = Math.round(amount / 60.0);\n            break;\n          case 'm':\n            minAgo = amount;\n            break;\n        }\n        return minAgo;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return ((target.target !== 'enter raw query') && target.rawQuery)\n              || !target.rawQuery;\n    });\n\n    if (!isNaN(Number(options.targets[0].scale))) {\n      this.scale = options.targets[0].scale;\n    }\n    else {\n      this.scale = 1;\n    }\n\n    let timeFilter = this.getTimeFilter(options);\n\n    let targets = _.map(options.targets, target => {\n      let retObject = new Object();\n      retObject.target = {};\n      retObject.refId = target.refId;\n      retObject.type = target.type || 'rawquery';\n      if (target.rawQuery) {\n        // a raw query is directly in the form in Stats.thrift::QueryRequest\n        let targetnew = {};\n        try {\n          targetnew = JSON.parse(this.templateSrv.replace(target.target,\n            options.scopedVars, 'regex'));\n        }\n        catch(e) {\n          console.log('invalid json object');\n          return retObject;\n        }\n        retObject.target = targetnew;\n        return retObject;\n      } else {\n        // put query in the form in Stats.thrift::QueryRequest\n        const restrictor = this.templateSrv.replace(target.restrictor,\n          options.scopedVars, 'regex');\n        const keyname = this.templateSrv.replace(target.keyname,\n          options.scopedVars, 'regex');\n        let beringeisource = this.templateSrv.replace(target.beringeisource,\n          options.scopedVars, 'regex');\n\n        // build the query\n        let targetnew = {};\n        // topologyName comes from a variable called \"topology\"\n        let topologyName = \"\";\n        this.templateSrv.variables.forEach(variable => {\n          if (variable.name === \"topology\") {\n            topologyName = variable.current.text;\n          }\n        });\n\n        targetnew.topologyName = topologyName;\n        if (keyname && keyname !== 'select keyname' && keyname.length > 0) {\n          targetnew.keyNames = new Array (keyname);\n        } else {\n          return retObject;\n        }\n\n        if (restrictor && restrictor !== 'select restrictor' &&\n            restrictor.length > 0) {\n          // restrictor can be a comma-separated list\n          targetnew.restrictors = new Array();\n          let restrictorArray = restrictor.split(',');\n          let restrictors = new Object();\n          restrictors.values = new Array();\n          restrictorArray.forEach (rstrcr => {\n            restrictors.values.push(rstrcr.trim());\n          });\n          restrictors.restrictorType = RESTRICTORTYPE[\"NODE\"];\n          targetnew.restrictors.push(restrictors);\n        }\n\n        beringeisource = beringeisource || \"30\";\n        targetnew.dsIntervalSec = parseInt(beringeisource);\n        if (timeFilter.minAgo) {\n          targetnew.minAgo = timeFilter.minAgo;\n        }\n        else {\n          targetnew.startTsSec = timeFilter.startTsSec;\n          targetnew.endTsSec = timeFilter.endTsSec;\n        }\n\n        retObject.target = targetnew;\n        return retObject;\n      }\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) { // TODO\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    // build single query from multiple queries\n    for (let i = 1; i < query.targets.length; i++) {\n      if (query.targets[0].target.keyNames &&\n        query.targets[i].target.keyNames) {\n        query.targets[0].target.keyNames.push(query.targets[i].target.keyNames[0]);\n      }\n    }\n\n    return this.doRequest({\n      url: this.url + '/stats_query',\n      data: query.targets[0].target,\n      method: 'POST'\n    }).then(this.mapToGrafanaFormat.bind(this));\n  }\n\n  mapToGrafanaFormat(result) {\n    if (!result.data.hasOwnProperty('columns') ||\n        !result.data.hasOwnProperty('points')) {\n      console.log('no columns or points field');\n      return result;\n    }\n    if (result.data.columns.length <= 1) {\n      console.log('columns field has only one entry');\n      return result;\n    }\n\n    if (result.data.points[0].length !== result.data.columns.length) {\n      console.log('columns and every element of points same length error');\n    }\n\n    let data = new Array();\n    // start with i = 1, i = 0 is \"time\"\n    for (let i = 1; i < result.data.columns.length; i++) {\n      data.push(new Object());\n      data[i - 1].target = result.data.columns[i];\n      data[i - 1].datapoints = new Array();\n      for (let j = 0; j < result.data.points.length; j++) {\n        let tmp = new Array();\n        tmp.push(result.data.points[j][i] * this.scale); // value\n        tmp.push(result.data.points[j][0]); // unixTime\n        data[i - 1].datapoints.push(tmp);\n      }\n    }\n    delete result.data;\n    result.data = data;\n    return result;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\",\n                 message: \"Data source is working\",\n                 title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n\n  metricFindQuery(query) {\n    // topologyName comes from a variable called \"topology\"\n    let topologyName = \"\";\n    if (this.templateSrv.variables) {\n      this.templateSrv.variables.forEach(variable => {\n        if (variable.name === \"topology\") {\n          topologyName = variable.current.text;\n        }\n      });\n    }\n    if (topologyName.length === 0) {\n      console.log(\"must set a variable called 'topology'\");\n      return [];\n    }\n\n    let searchTerm = this.templateSrv.replace(query, null, 'regex');\n    let typeaheadType = TYPEAHEADTYPE[\"KEYNAME\"];\n\n    // this is the search from the topology variable\n    if (searchTerm === \"__bqs_topology_query\") {\n      typeaheadType = TYPEAHEADTYPE[\"TOPOLOGYNAME\"];\n    }\n    // a node query is __bqs_[[topology]] where topology is a variable\n    else if (searchTerm.includes(\"__bqs_\")) {\n      typeaheadType = TYPEAHEADTYPE[\"NODENAME\"];\n      topologyName = searchTerm.split('__bqs_')[1]; // just topology name\n    }\n    let restrictors = [];\n    if (this.target && this.target.restrictor &&\n      this.target.restrictor.length > 0) {\n      restrictorObj = {};\n      restrictorObj.restrictorType = RESTRICTORTYPE[\"NODE\"];\n      restrictorObj.values = [];\n      restrictorObj.values.push(this.target.restrictor);\n      restrictors.push(restrictorObj);\n    }\n\n    var interpolated = {\n        restrictors: restrictors,\n        searchTerm: searchTerm,\n        topologyName: topologyName,\n        typeaheadType: typeaheadType,\n    };\n\n    return this.doRequest({\n      url: this.url + '/stats_typeahead',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  metricFindNodeNames(query) {\n    // topologyName comes from a variable called \"topology\"\n    let topologyName = \"\";\n    if (this.templateSrv.variables) {\n      this.templateSrv.variables.forEach(variable => {\n        if (variable.name === \"topology\") {\n          topologyName = variable.current.text;\n        }\n      });\n    }\n    if (topologyName.length === 0) {\n      console.log(\"must set a variable called 'topology'\");\n      return [];\n    }\n\n    var interpolated = {\n      topologyName: topologyName,\n      typeaheadType: TYPEAHEADTYPE[\"NODENAME\"],\n    };\n\n    let ret = this.doRequest({\n      url: this.url + '/stats_typeahead',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n    return ret;\n  }\n\n\n  mapToTextValue(result) {\n    if (result && result.data && _.isArray(result.data)) {\n      const data1d = [].concat(...result.data); // flatten\n      return _.map(data1d, (d, i) => {\n        if (d && d.keyName) {\n          // \"keyName\" is returned by BQS\n          return { text: d.keyName, value: d.keyName };\n        } else if (_.isObject(d)) {\n          return { text: d, value: d};\n        }\n        return { text: d, value: d};\n      });\n    }\n    else {\n      return [];\n    }\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}