{"version":3,"sources":["../../src/datasource.js"],"names":["dateMath","TYPEAHEADTYPE","RESTRICTORTYPE","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","keyname_options_map","Map","editor_options_fallback_map","set","basicAuth","length","options","timeFilter","rangeRaw","from","getBeringeiTime","until","to","fromIsAbsolute","toString","endsWith","minAgo","Math","round","Date","now","parseInt","split","startTsSec","endTsSec","date","roundUp","_","isString","parts","exec","amount","unit","parse","valueOf","targets","filter","target","rawQuery","scale","diff","i","new_scale","Number","isNaN","keyname","getTimeFilter","map","retObject","Object","refId","targetnew","JSON","replace","scopedVars","e","console","log","restrictor","beringeisource","topologyName","variables","forEach","variable","current","text","keyNames","Array","restrictors","restrictorArray","values","push","rstrcr","trim","restrictorType","dsIntervalSec","query","buildQueryParameters","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","mapToGrafanaFormat","bind","result","hasOwnProperty","columns","points","get_keyname_from_target","editor_options","get","datapoints","j","tmp","diff_value","keys","key","includes","response","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","searchTerm","typeaheadType","topologyIndex","lastIndexOf","nodeAIndex","nodeAstr","slice","restrictorObj","interpolated","mapToTextValue","ret","isArray","data1d","concat","d","keyName","value","isObject","datasourceRequest","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import * as dateMath from 'app/core/utils/datemath';\nimport _ from \"lodash\";\n\n// from Stats.thrift\nconst TYPEAHEADTYPE = {\"KEYNAME\" : 1, \"NODENAME\" : 3, \"TOPOLOGYNAME\" : 4};\nconst RESTRICTORTYPE = {\"NODE\" : 1, \"LINK\" : 1};\n\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    this.keyname_options_map = new Map();\n    this.editor_options_fallback_map = new Map().set('scale', 1).set('diff', false);\n    if (typeof instanceSettings.basicAuth === 'string' &&\n      instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  getTimeFilter(options) {\n    let timeFilter = {};\n    if (options && options.rangeRaw) {\n      const from = this.getBeringeiTime(options.rangeRaw.from, false);\n      const until = this.getBeringeiTime(options.rangeRaw.to, true);\n      const fromIsAbsolute = from.toString().endsWith('ms');\n\n\n      if (until === 'now()' && !fromIsAbsolute) {\n        timeFilter.minAgo = from;\n      }\n      else if (until === 'now()') {\n        timeFilter.minAgo = Math.round((Date.now() -\n        parseInt(from.split('ms')[0]))/(1000.0 * 60));\n      }\n      else {\n        timeFilter.startTsSec = Math.round(parseInt(from.split('ms')[0])/1000.0);\n        timeFilter.endTsSec = Math.round(parseInt(until.split('ms')[0])/1000.0);\n      }\n    }\n    return timeFilter;\n  }\n\n  getBeringeiTime(date, roundUp) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        let minAgo = 0;\n        switch (unit) {\n          case 'd':\n            minAgo = amount * 24 * 60;\n            break;\n          case 'h':\n            minAgo = amount * 60;\n            break;\n          case 's':\n            minAgo = Math.round(amount / 60.0);\n            break;\n          case 'm':\n            minAgo = amount;\n            break;\n        }\n        return minAgo;\n      }\n      date = dateMath.parse(date, roundUp);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return ((target.target !== 'enter raw query') && target.rawQuery)\n              || !target.rawQuery;\n    });\n\n    // set defaults\n    this.editor_options_fallback_map.set('scale', options.targets[0].scale)\n      .set('diff', options.targets[0].diff);\n\n    this.keyname_options_map = new Map(); // clear in case of query deletion\n    for (let i = 0; i < options.targets.length; i++) {\n      let new_scale = Number(options.targets[i].scale);\n      if (isNaN(new_scale)) {\n        new_scale = 1;\n      }\n      this.keyname_options_map.set(\n        options.targets[i].keyname,\n        {\"scale\": new_scale, \"diff\": options.targets[i].diff}\n      );\n    }\n\n\n\n    let timeFilter = this.getTimeFilter(options);\n\n    let targets = _.map(options.targets, target => {\n      let retObject = new Object();\n      retObject.target = {};\n      retObject.refId = target.refId;\n      retObject.type = target.type || 'rawquery';\n      if (target.rawQuery) {\n        // a raw query is directly in the form in Stats.thrift::QueryRequest\n        let targetnew = {};\n        try {\n          targetnew = JSON.parse(this.templateSrv.replace(target.target,\n            options.scopedVars, 'regex'));\n        }\n        catch(e) {\n          console.log('invalid json object');\n          return retObject;\n        }\n        retObject.target = targetnew;\n        return retObject;\n      } else {\n        // put query in the form in Stats.thrift::QueryRequest\n        const restrictor = this.templateSrv.replace(target.restrictor,\n          options.scopedVars, 'regex');\n        const keyname = this.templateSrv.replace(target.keyname,\n          options.scopedVars, 'regex');\n        let beringeisource = this.templateSrv.replace(target.beringeisource,\n          options.scopedVars, 'regex');\n\n        // build the query\n        let targetnew = {};\n        // topologyName comes from a variable called \"topology\"\n        let topologyName = \"\";\n        this.templateSrv.variables.forEach(variable => {\n          if (variable.name === \"topology\") {\n            topologyName = variable.current.text;\n          }\n        });\n\n        targetnew.topologyName = topologyName;\n        if (keyname && keyname !== 'select keyname' && keyname.length > 0) {\n          targetnew.keyNames = new Array (keyname);\n        } else {\n          return retObject;\n        }\n\n        if (restrictor && restrictor !== 'select restrictor' &&\n            restrictor.length > 0) {\n          // restrictor can be a comma-separated list\n          targetnew.restrictors = new Array();\n          let restrictorArray = restrictor.split(',');\n          let restrictors = new Object();\n          restrictors.values = new Array();\n          restrictorArray.forEach (rstrcr => {\n            restrictors.values.push(rstrcr.trim());\n          });\n          restrictors.restrictorType = RESTRICTORTYPE[\"NODE\"];\n          targetnew.restrictors.push(restrictors);\n        }\n\n        beringeisource = beringeisource || \"30\";\n        targetnew.dsIntervalSec = parseInt(beringeisource);\n        if (timeFilter.minAgo) {\n          targetnew.minAgo = timeFilter.minAgo;\n        }\n        else {\n          targetnew.startTsSec = timeFilter.startTsSec;\n          targetnew.endTsSec = timeFilter.endTsSec;\n        }\n\n        retObject.target = targetnew;\n        return retObject;\n      }\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) { // TODO\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    // build single query from multiple queries\n    for (let i = 1; i < query.targets.length; i++) {\n      if (query.targets[0].target.keyNames &&\n        query.targets[i].target.keyNames) {\n        query.targets[0].target.keyNames.push(query.targets[i].target.keyNames[0]);\n      }\n    }\n\n    return this.doRequest({\n      url: this.url + '/stats_query',\n      data: query.targets[0].target,\n      method: 'POST'\n    }).then(this.mapToGrafanaFormat.bind(this));\n  }\n\n  mapToGrafanaFormat(result) {\n    if (!result.data.hasOwnProperty('columns') ||\n        !result.data.hasOwnProperty('points')) {\n      console.log('no columns or points field');\n      return result;\n    }\n    if (result.data.columns.length <= 1) {\n      console.log('columns field has only one entry');\n      return result;\n    }\n\n    if (result.data.points[0].length !== result.data.columns.length) {\n      console.log('columns and every element of points same length error');\n    }\n\n    let data = new Array();\n    // start with i = 1, i = 0 is \"time\"\n    for (let i = 1; i < result.data.columns.length; i++) {\n      data.push(new Object());\n      const keyname = this.get_keyname_from_target(result.data.columns[i]);\n      const editor_options = this.keyname_options_map.get(keyname);\n      const scale = editor_options ? editor_options.scale :\n                                     this.editor_options_fallback_map.get(\"scale\");\n      const diff = editor_options ? editor_options.diff :\n                                    this.editor_options_fallback_map.get(\"diff\");\n      data[i - 1].target = result.data.columns[i];\n      data[i - 1].datapoints = new Array();\n      if (diff) {\n        for (let j = 1; j < result.data.points.length; j++) {\n          let tmp = new Array();\n          let diff_value;\n          if (result.data.points[j][i] === null ||\n              result.data.points[j-1][i] === null) {\n            diff_value = null;\n          }\n          else {\n            diff_value = result.data.points[j][i] - result.data.points[j-1][i];\n          }\n          tmp.push(diff_value * scale); // diff_value\n          tmp.push(result.data.points[j][0]); // unixTime\n          data[i - 1].datapoints.push(tmp);\n        }\n      }\n      else {\n        for (let j = 0; j < result.data.points.length; j++) {\n          let tmp = new Array();\n          tmp.push(result.data.points[j][i] * scale); // value\n          tmp.push(result.data.points[j][0]); // unixTime\n          data[i - 1].datapoints.push(tmp);\n        }\n      }\n    }\n    delete result.data;\n    result.data = data;\n    return result;\n  }\n\n\n  get_keyname_from_target(target) {\n    const keys = this.keyname_options_map.keys();\n    for (var key of keys) {\n      if (target.includes(key)) {\n        return key;\n      }\n    }\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\",\n                 message: \"Data source is working\",\n                 title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n\n  metricFindQuery(query)   {\n    // topologyName comes from a variable called \"topology\"\n    let topologyName = \"\";\n    if (this.templateSrv.variables) {\n      this.templateSrv.variables.forEach(variable => {\n        if (variable.name === \"topology\") {\n          topologyName = variable.current.text;\n        }\n      });\n    }\n    if (topologyName.length === 0) {\n      console.log(\"must set a variable called 'topology'\");\n      return [];\n    }\n\n    let searchTerm = this.templateSrv.replace(query, null, 'regex');\n    let typeaheadType = TYPEAHEADTYPE[\"KEYNAME\"];\n    let restrictors = [];\n\n    // this is the search from the topology variable\n    if (searchTerm === \"__bqs_topology_query\") {\n      typeaheadType = TYPEAHEADTYPE[\"TOPOLOGYNAME\"];\n    }\n    // A restricted node query is __bqs_noderestrict_[[nodeA]]_[[topology]]\n    // to find only the nodes which are linked to [[nodeA]]\n    else if (searchTerm.includes(\"__bqs_noderestrict_\")) {\n      typeaheadType = TYPEAHEADTYPE[\"NODENAME\"];\n      const topologyIndex = searchTerm.lastIndexOf(\"_\");\n      const nodeAIndex = 19;\n      const nodeAstr = searchTerm.slice(nodeAIndex, topologyIndex);\n      topologyName = searchTerm.slice(topologyIndex + 1);\n        let restrictorObj = {};\n        restrictorObj.values = [];\n        restrictorObj.values.push(nodeAstr);\n        restrictors.push(restrictorObj);\n    }\n    // a node query is __bqs_[[topology]] where topology is a variable\n    else if (searchTerm.includes(\"__bqs_\")) {\n      typeaheadType = TYPEAHEADTYPE[\"NODENAME\"];\n      topologyName = searchTerm.split('__bqs_')[1]; // just topology name\n    }\n    if (restrictors == [] && this.target && this.target.restrictor &&\n          this.target.restrictor.length > 0) {\n        let restrictorObj = {};\n        restrictorObj.restrictorType = RESTRICTORTYPE[\"NODE\"];\n        restrictorObj.values = [];\n        restrictorObj.values.push(this.target.restrictor);\n        restrictors.push(restrictorObj);\n    }\n\n    var interpolated = {\n        restrictors: restrictors,\n        searchTerm: searchTerm,\n        topologyName: topologyName,\n        typeaheadType: typeaheadType,\n    };\n\n    return this.doRequest({\n      url: this.url + '/stats_typeahead',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  metricFindNodeNames(query) {\n    // topologyName comes from a variable called \"topology\"\n    let topologyName = \"\";\n    if (this.templateSrv.variables) {\n      this.templateSrv.variables.forEach(variable => {\n        if (variable.name === \"topology\") {\n          topologyName = variable.current.text;\n        }\n      });\n    }\n    if (topologyName.length === 0) {\n      console.log(\"must set a variable called 'topology'\");\n      return [];\n    }\n\n    var interpolated = {\n      topologyName: topologyName,\n      typeaheadType: TYPEAHEADTYPE[\"NODENAME\"],\n    };\n\n    let ret = this.doRequest({\n      url: this.url + '/stats_typeahead',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n    return ret;\n  }\n\n\n  mapToTextValue(result) {\n    if (result && result.data && _.isArray(result.data)) {\n      const data1d = [].concat(...result.data); // flatten\n      return _.map(data1d, (d, i) => {\n        if (d && d.keyName) {\n          // \"keyName\" is returned by BQS\n          return { text: d.keyName, value: d.keyName };\n        } else if (_.isObject(d)) {\n          return { text: d, value: d};\n        }\n        return { text: d, value: d};\n      });\n    }\n    else {\n      return [];\n    }\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}