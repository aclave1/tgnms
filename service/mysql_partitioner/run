#!/bin/bash
# Check on Stats partitions
MAX_STATS_PARTITIONS=24 # approximate # of hours to keep in stats
INCR=$(mysql cxl -e"SHOW CREATE TABLE ts_time\G"|grep AUTO_INCREMENT=|cut -d= -f3|awk '{print $1}')
ROW_COUNT=$(mysql cxl -e"SELECT MAX(id)-MIN(id) FROM ts_time WHERE time > DATE_SUB(NOW(), INTERVAL 1 HOUR)" -BsN)
# Create partitions for future writes
for i in {1..2}
do
  PNAME=$(mysql cxl -e"SELECT DATE_FORMAT(NOW() + INTERVAL ${i} HOUR, 'hourly_%Y_%m_%d_%k')" -BsN)
  # ensure partition doesn't yet exist
  mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'ts_value'"|grep -q $PNAME
  if [ "$?" -eq "1" ]; then
    LESS_THAN=$(($ROW_COUNT * i + $INCR))
    echo "Creating partition ${PNAME} in ts_value with time values less than ${LESS_THAN}"
    mysql cxl -e"ALTER TABLE ts_value ADD PARTITION (partition ${PNAME} VALUES LESS THAN (${LESS_THAN}))" -BsN
  fi
done
# Clean-up old partitions
PART_COUNT=$(mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'ts_value'" -BsN|wc -l)
if [ "$PART_COUNT" -gt "$MAX_STATS_PARTITIONS" ]
then
  CLEANUP_COUNT=$((PART_COUNT - $MAX_STATS_PARTITIONS))
  echo "Partition clean-up needed for ts_value, dropping oldest ${CLEANUP_COUNT} partitions"
  PART_NAMES=$(mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'ts_value'" -BsN|head -n ${CLEANUP_COUNT})
  for partition in $PART_NAMES
  do
    echo "Dropping ts_value partition ${partition}"
    mysql cxl -e"ALTER TABLE ts_value DROP PARTITION ${partition}"
  done
fi
# TODO - ts_time

# Check on Events partitions
MAX_EVENTS_PARTITIONS=15 # Number of days to keep for events
# Create partitions for today and tomorrow writes (if they dont exist)
for i in {0..1}
do
  PNAME=$(mysql cxl -e"SELECT DATE_FORMAT(NOW() + INTERVAL ${i} DAY, 'd_%Y_%m_%d')" -BsN)
  # ensure partition doesn't yet exist
  mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'events'"|grep -q $PNAME
  if [ "$?" -eq "1" ]; then
    LESS_THAN=$(mysql cxl -e"SELECT DATE_FORMAT(NOW() + INTERVAL ${i}+1 DAY, 'UNIX_TIMESTAMP(\'%Y-%m-%d 00:00:00\')')" -BsN)
    echo "Creating partition ${PNAME} in events with timestamp values less than ${LESS_THAN}"
    mysql cxl -e"ALTER TABLE events ADD PARTITION (partition ${PNAME} VALUES LESS THAN (${LESS_THAN}))" -BsN
  fi
done
# Clean-up old partitions
PART_COUNT=$(mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'events'" -BsN|wc -l)
if [ "$PART_COUNT" -gt "$MAX_EVENTS_PARTITIONS" ]
then
  CLEANUP_COUNT=$((PART_COUNT - $MAX_EVENTS_PARTITIONS))
  echo "Partition clean-up needed for events, dropping oldest ${CLEANUP_COUNT} partitions"
  PART_NAMES=$(mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'events'" -BsN|head -n ${CLEANUP_COUNT})
  for partition in $PART_NAMES
  do
    echo "Dropping events partition ${partition}"
    mysql cxl -e"ALTER TABLE events DROP PARTITION ${partition}"
  done
fi

# Check on Alerts partitions
MAX_ALERTS_PARTITIONS=15 # Number of days to keep for alerts
# Create partitions for today and tomorrow writes (if they dont exist)
for i in {0..1}
do
  PNAME=$(mysql cxl -e"SELECT DATE_FORMAT(NOW() + INTERVAL ${i} DAY, 'd_%Y_%m_%d')" -BsN)
  # ensure partition doesn't yet exist
  mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'alerts'"|grep -q $PNAME
  if [ "$?" -eq "1" ]; then
    LESS_THAN=$(mysql cxl -e"SELECT DATE_FORMAT(NOW() + INTERVAL ${i}+1 DAY, 'UNIX_TIMESTAMP(\'%Y-%m-%d 00:00:00\')')" -BsN)
    echo "Creating partition ${PNAME} in alerts with timestamp values less than ${LESS_THAN}"
    mysql cxl -e"ALTER TABLE alerts ADD PARTITION (partition ${PNAME} VALUES LESS THAN (${LESS_THAN}))" -BsN
  fi
done
# Clean-up old partitions
PART_COUNT=$(mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'alerts'" -BsN|wc -l)
if [ "$PART_COUNT" -gt "$MAX_ALERTS_PARTITIONS" ]
then
  CLEANUP_COUNT=$((PART_COUNT - $MAX_ALERTS_PARTITIONS))
  echo "Partition clean-up needed for alerts, dropping oldest ${CLEANUP_COUNT} partitions"
  PART_NAMES=$(mysql cxl -e"SELECT PARTITION_NAME FROM information_schema.PARTITIONS WHERE TABLE_SCHEMA = 'cxl' AND TABLE_NAME = 'alerts'" -BsN|head -n ${CLEANUP_COUNT})
  for partition in $PART_NAMES
  do
    echo "Dropping alerts partition ${partition}"
    mysql cxl -e"ALTER TABLE alerts DROP PARTITION ${partition}"
  done
fi
