#!/usr/bin/env python3

""" Test example for the read, write, and get key_id between Analytics and BQS.
"""

import os
import sys
import time


sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from module.beringei_db_access import BeringeiDbAccess

# Include the data structures generated by thrift
sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(__file__), "..") + "/interface/gen-py")
)
from facebook.gorilla.beringei_query.ttypes import (
    NodeStates,
    StatsWriteRequest,
    Stat,
    TypeAheadRequest,
    RawReadQuery,
    RawReadQueryRequest,
    RawQueryKey,
)
from facebook.gorilla.Topology.ttypes import Topology

# BeringeiDbAccess can read, write, and get key_id from Beringei DB
beringei_db_access = BeringeiDbAccess()
if not beringei_db_access:
    sys.exit("Cannot create BeringeiDbAccess object")

print("This is an example to get the query key_id from Beringei database")
# Change the topology_name and metric_key to see other metrics
topology_name = "tower G"
metric_key = "tgf.38:3a:21:b0:08:75.phystatus.ssnrest"

type_ahead_request = TypeAheadRequest(topologyName=topology_name, input=metric_key)

source_mac = "00:50:43:8e:bc:b7"
return_key_id = None
try:
    return_key_id = beringei_db_access.get_beringei_key_id(
        source_mac, type_ahead_request
    )
except ValueError as err:
    print(err.args)

if return_key_id is None:
    print("Cannot find metrics")
else:
    print(
        "For '{}' on '{}' ".format(metric_key, topology_name)
        + "the keyId in the Beringei DB is {}".format(return_key_id)
    )

print("-" * 100)
print("This is an example to write to Beringei DB via BQS")
# Construct the request to send to server
topology = Topology(name="tower G")
stat1 = Stat(key="testkey1", ts=int(time.time()), value=7899999)
stat2 = Stat(key="testkey2", ts=int(time.time()), value=7699999)
stat3 = Stat(key="unknown_key3", ts=int(time.time()), value=0.77777)
node_state1 = NodeStates(
    mac="38:3a:21:b0:03:e1", site="11L22", name="terra421.f7.tg.a404-if", stats=[stat1]
)
node_state2 = NodeStates(
    mac="38:3a:21:b0:07:2d",
    site="TECH-NE",
    name="terra211.f3.tg.a404-if",
    stats=[stat2],
)
node_state3 = NodeStates(
    mac="38:3a:21:b0:09:1b", site="CC-SE", name="terra112.f5.tg.a404-if", stats=[stat3]
)
stats_to_write = StatsWriteRequest(
    topology=topology, agents=[node_state1, node_state2, node_state3], interval=30
)

try:
    beringei_db_access.write_beringei_db(stats_to_write)
except ValueError as err:
    print(err.args)

print("-" * 100)
print("This is an example to read from Beringei DB via Beringei query server")

current_time_in_s = time.time()
# Query 1 is by the Beringei key_id
query_key_1 = RawQueryKey(keyId=683696, topologyName="tower G")

# Query 2, 3 is by the combination of source_mac, peer_mac, metric_name and
# topology_name
query_key_2 = RawQueryKey(
    sourceMac="00:50:43:8e:bc:b7",
    peerMac="38:3a:21:b0:08:75",
    metricName="phystatus.ssnrest",
    topologyName="tower G",
)

query_key_with_unknown_mac = RawQueryKey(
    sourceMac="some_non_exisitng_mac",
    peerMac="another_non_exisitng_mac",
    metricName="tphystatus.ssnrest",
    topologyName="tower G",
)


query_key_with_unknown_metric = RawQueryKey(
    sourceMac="00:50:43:8e:bc:b7",
    peerMac="38:3a:21:b0:08:75",
    metricName="crazy_stats",
    topologyName="tower G",
)

query_key_3 = RawQueryKey(keyId=234126, topologyName="tower G")

empty_query_key = RawQueryKey()

query_to_send = RawReadQuery(
    queryKeyList=[
        query_key_1,
        query_key_with_unknown_metric,
        query_key_2,
        query_key_with_unknown_mac,
        query_key_3,
        empty_query_key,
    ],
    startTimestamp=int(current_time_in_s - 60 * 60),
    endTimestamp=int(current_time_in_s),
    interval=30,
)

empty_query_to_send = RawReadQuery(
    queryKeyList=[],
    startTimestamp=int(current_time_in_s - 60 * 60),
    endTimestamp=int(current_time_in_s),
    interval=30,
)
query_request_to_send = RawReadQueryRequest(
    [empty_query_to_send, query_to_send, empty_query_to_send]
)

query_returns = None
try:
    query_returns = beringei_db_access.read_beringei_db(query_request_to_send)
except ValueError as err:
    print("Failed to read Beringei database", err.args)

if query_returns is not None:
    query_returns = query_returns.queryReturnList

    print("There are {} query returned".format(len(query_returns)))
    print("Query 0 and Query 2 are empty queries and should not return anything")
    print(
        "In Query 1, RawQueryKey 1, 3, 5 are invalid keys and should"
        + "not return anything"
    )
    print(
        "Only Query 1, RawQueryKey 2 are found by macs and ids and should "
        + "return fullMetricKeyName"
    )
    for query_idx, query_return in enumerate(query_returns):
        query_return = query_return.timeSeriesAndKeyList
        num_of_query_print = min(10, len(query_return))
        print(
            "\nFor query {}, there are {} timeseries returned, ".format(
                query_idx, len(query_return)
            )
            + "and the first {} return are:".format(num_of_query_print)
        )
        for i in range(num_of_query_print):
            num_of_data_print = min(5, len(query_return[i].timeSeries))
            print(
                "In Return # {} is with fullMetricKeyName {}.".format(
                    i, query_return[i].fullMetricKeyName
                )
                + "\n The first {} data points are {},".format(
                    num_of_data_print, query_return[i].timeSeries[:num_of_data_print]
                )
            )
