{
  "//": "Network name where Network Analyzer is running for",
  "network_analyzer_fp": "/var/www/network_analyzer/",
  "//": "Network analyzer url",
  "network_analyzer_url": "http://[2001:4c48:18:2::3]",
  "//": "Network name where Network Analyzer is running for",
  "network_name": "",
  "//": "Whether we need to patch threading to suppress multithreading errors",
  "gevent_monkey_patch_thread": false,
  "//": "Location of Network Analyzer running at (vm/devserver)",
  "run_location": "vm",
  "//": "If run on devserver, do we need to use proxy to access any nodes",
  "devserver_hack": false,
  "//": "Controller login information",
  "// for controller": {
    "ip": "",
    "username": "",
    "password": "",
    "authkey_fp": null,
    "//": "Set topology file path; if not set, will try to automatically fetch it",
    "topology_local_fp": null,
    "topology_remote_fp": null
  },
  "//": "API server config parameters",
  "api_server_params": {
    "//": "Network name",
    "name": "",
    "//": "Host ip",
    "host": "::",
    "//": "Running port of api server",
    "port": 5000,
    "//": "Query limit",
    "query_limit": 50,
    "//": "Time gap (seconds) between every state-machine check",
    "time_gap": 3600,
    "//": "NANO folder path (wrt to api_server file)",
    "folder_path": "../",
    "//": "Temp folder path where logs will be stored",
    "tmp_folder": "/tmp",
    "//": "api server log file name",
    "api_server_log_file": "/nano_api_sm.log",
    "//": "Time gap (seconds) between every topology update",
    "topo_update_interval": null,
    "//": "Time gap (seconds) between every API visit to fetch default route for all nodes",
    "get_default_routes": null,
    "//": "Time gap (seconds) between every API visit to fetch weather station info",
    "weather_info_fetch_interval": null,
    "//": "Debug mode",
    "debug": false
  },
  "//": "Prometheus related config",
  "targets": {
    "folder_name": "prometheus/",
    "json_file_name": "targets.json"
  },
  "controller": {
    "ip": "",
    "api_ip": "",
    "api_port": null,
    "username": "root",
    "password": null,
    "authkey_fp": "",
    "//": "true for E2E API service; false for TG CLI commands (using ssh)",
    "use_e2e_api": true,
    "//": "Set topology file path; if not set, will try to automatically fetch it",
    "topology_local_fp": null,
    "topology_remote_fp": null,
    "ssl_verify": true,
    "http_secure": "http",
    "docker_swarm_api_url_prefix": "",
    "tg_cli": "tg"
  },
  "//": "Default information to log onto each node",
  "node": {
    "username": "root",
    "password": "facebook",
    "authkey_fp": null
  },
  "//": "Server login information",
  "server": {
    "ip": "",
    "username": "",
    "password": "",
    "authkey_fp": null
  },
  "//": "Enable Variable traffic loading based on DOF in P2MP configuration",
  "variable_traffic_loading": true,
  "//": "Run tests in parallel rather than sequentially",
  "parallel": true,
  "//": "If in parallel, set a limit to number of threads max; null means no limit",
  "parallel_threads_limit": null,
  "//": "Specify global email list, set to null to disable emailing results",
  "global_email_lists": ["fsun@fb.com"],
  "//": "Set to true to enable specific emailing list per test",
  "//": "This will ignore the global email list",
  "enable_per_test_emailing": true,
  "//": "Specific weather station API information",
  "weather": {
    "domain": {
      "ipv6": "",
      "ipv4": ""
    },
    "endpoint": "",
    "station": {"primary": "", "secondary": ""},
    "//": "weather-driven test precip rate threshold (mm)",
    "precip_rate_threshold": 0.5
  },
  "//": "Specify tests to perform",
  "tests": {
    "//": "PHY layer tests",
    "alignment": {
      "//": "Box alignment check (also for other topology-based tests) - always uses parallel method",
      "do_it": false,
      "//": "File path for analysis (only required when analyzing independently)",
      "fp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    },
    "im_scan": {
      "//": "Do interference measurement scan",
      "do_it": false,
      "//": "Specify a list of tx to test; set to null to test all",
      "tx": null,
      "//": "Scan mode: COARSE=1, FINE=2, SELECTIVE=3, RELATIVE=4",
      "scan_mode": 2,
      "//": "Folder path for analysis (only required when analyzing independently)",
      "fp": "",
      "//": "Specify tx power index to use; set to null to use current power",
      "tx_power_index": 21,
      "//": "Whether write raw scan data to database",
      "write_raw_data_to_mongo_db": false,
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    },
    "monitoring_r2d2": {
      "//": "Monitoring/fetching r2d2 stats",
      "do_it": false,
      "//": "Specify monitoring duration",
      "duration": 300,
      "//": "Specify a list of tx to test; set to null to test all",
      "tx": null,
      "//": "File path for analysis (only required when analyzing indepdently)",
      "fp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    },
    "fetching_fw_config": {
      "//": "Fetching fw configs from nodes",
      "do_it": false,
      "//": "Specify a list of tx to fetch; set to null to fetch all",
      "tx": null,
      "//": "File path for analysis (only required when analyzing indepdently)",
      "fp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    },
    "//": "Network layer tests",
    "ping_p2p": {
      "//": "Ping tests",
      "do_it": false,
      "//": "Specify ping layer (link or network)",
      "layer": "link",
      "//": "Specify ping duration",
      "duration": 100,
      "//": "Specify a list of tx to test; set to null to test all",
      "tx": null,
      "//": "File path for analysis (only required when analyzing independently)",
      "fp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    },
    "ping_sa": {
      "//": "Ping sector availability test (run ping from node to pop ip)",
      "do_it": false,
      "//": "Specify ping duration",
      "duration": 100,
      "//": "Specify a list of sectors to test; set to null to test all",
      "sector": null,
      "//": "File path for analysis (only required when analyzing independently)",
      "fp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    },
    "iperf_p2p": {
      "//": "Bi-directional iPerf tests",
      "do_it": false,
      "//": "Specify tests types (in a list, supporting tcp/udp)",
      "type": ["udp"],
      "//": "Specify iPerf layer (link or network)",
      "layer": "link",
      "//": "Specify iperf data rate",
      "rate": "100M",
      "//": "Specify iperf duration",
      "duration": 300,
      "//": "Limit iperf sessions that run in parallel",
      "sessions": "all",
      "//": "Specify a list of tx to test; set to null to test all",
      "tx": null,
      "//": "Fix power during the test; set to null to disable",
      "fixpower": null,
      "//": "File path for analysis (only required when analyzing independently)",
      "fp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    },
    "iperf_p2mp": {
      "//": "Bi-directional iPerf tests",
      "do_it": false,
      "//": "Specify tests types (in a list, supporting tcp/udp)",
      "type": ["udp"],
      "//": "Specify iPerf layer (link or network)",
      "layer": "link",
      "//": "Specify iperf data rate",
      "rate": "100M",
      "//": "Config traffic direction for p2mp: BIDIRECTIONAL=1, DN_TO_PEER = 2, PEER_TO_DN = 3",
      "direction": 1,
      "//": "Specify iperf duration",
      "duration": 300,
      "//": "Limit iperf sessions that run in parallel",
      "sessions": "all",
      "//": "Specify a list of tx to test; set to null to test all",
      "tx": null,
      "//": "Fix power during the test; set to null to disable",
      "fixpower": null,
      "//": "File path for analysis (only required when analyzing independently)",
      "fp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com", "spurav@fb.com"]
    },
    "iperf_multihop": {
      "//": "Multihop iPerf tests",
      "do_it": false,
      "//": "Server location: pop or vm",
      "server_location": "vm",
      "//": "Specify tests types (in a list, supporting tcp/udp)",
      "type": ["tcp"],
      "//": "Specify iperf data rate",
      "rate": "500M",
      "//": "Specify TCP congestion control algorithm, default: reno, options: westwood, cubic, htcp, vegas",
      "congest_ctrl_algo": "reno",
      "//": "Config traffic direction for multihop: southbound, northbound or bidirection",
      "direction": "southbound",
      "//": "test/analysis option: dn_site/cn_only",
      "option": "cn_only",
      "//": "Specify iperf duration",
      "duration": 500,
      "//": "Specify a list of sectors to test for triplet based multihop tests",
      "sector": null,
      "//": "Limit iperf multihop sessions that run sequentially",
      "sessions": 20,
      "//": "File path for analysis (only required when analyzing independently)",
      "fp": "",
      "cpefp": "",
      "//": "Specify email list, set to null to disable emailing results",
      "emails": ["fsun@fb.com"]
    }
  },
  "//": "Whether write tests results to database",
  "write_tests_to_mongodb": false,
  "write_tests_to_scuba": false,
  "//": "Whether do analysis after self test",
  "perform_analysis": true,
  "//": "If doing analysis, whether do it immediately after each test",
  "perform_analysis_immediate": true,
  "//": "Analysis configs (feed in configs in tests as data source)",
  "analysis": {
    "//": "Whether run analysis on data from database or from local filepath",
    "//": "currently not implemented yet",
    "data_from_database": false,
    "//": "Run box alignment analysis",
    "box_alignment": true,
    "//": "Run reciprocal analysis based on IM scans",
    "reciprocal_im": true,
    "//": "Run interference analysis base on IM scans",
    "interference": true,
    "//": "Run interference analysis w. and w.o. polarity assignment",
    "interference_polarity": false,
    "//": "Run monitoring analysis",
    "monitoring": true,
    "//": "Run iperf p2p analysis",
    "iperf_p2p": true,
    "//": "Run iperf p2mp analysis",
    "iperf_p2mp": true,
    "//": "Run ping p2p analysis",
    "ping_p2p": true,
    "//": "Run multihop analysis",
    "multihop": true,
    "//": "Run sector availability analysis",
    "sector_availability": true,
    "//": "Run connectivity graph analysis based on IM scans",
    "connectivity": true,
    "//": "If run connectivity graph analysis, what is the target snr",
    "connectivity_target_snr": 12
  },
  "//": "Whether output GeoJSON for visualization",
  "gen_geojson": true,
  "//": "Whether write analysis results to database",
  "write_analysis_to_mongo_db": true,
  "//": "Whether zip the output folder as a tar",
  "tar": false,
  "//": "Whether remove the folder after we zipped it",
  "tar_remove_folder": false,
  "//": "Optimization configs",
  "optimization": {
    "//": "Fetch necessary data from which location, for now only `database`",
    "data_source": "database",
    "polarity": {
      "//": "Optimization for polarity",
      "do_it": false,
      "//": "Optimization objective, currently only `sinr`",
      "objective": "sinr",
      "//": "What is our target sinr for links (default)",
      "default_target_sinr": 18,
      "//": "What is the target sinr for particular links",
      "//": "filepath, file format as json dict: {linkname: target sinr}",
      "detailed_target_sinr_fp": null,
      "//": "Method to use for optimization, either `montecarlo`, or `greedy`",
      "method": "greedy",
      "//": "Number of iterations to try",
      "//": "if method is `montecarlo`, then set to a large number",
      "iterations": 10,
      "//": "Weight of PoP nodes",
      "pop_node_weight": 2,
      "//": "Scale of critical nodes (* rx importance)",
      "//": "(based on link importance results from multihop)",
      "critical_node_scale": 1
    },
    "pathreplace": {
      "//": "Substitute highly interfered paths to others if possible",
      "do_it": false,
      "//": "Optimization objective, currently only `sinr`",
      "objective": "sinr",
      "//": "What is our target sinr for links (default)",
      "default_target_sinr": 18,
      "//": "What is the target sinr for particular links",
      "//": "filepath, file format as json dict: {linkname: target sinr}",
      "detailed_target_sinr_fp": null,
      "//": "Method to use for polarity assignment, recommend `greedy`",
      "method": "greedy",
      "//": "Number of iterations to try",
      "//": "if method is `montecarlo`, then set to a large number",
      "iterations": 10,
      "//": "Weight of PoP nodes",
      "pop_node_weight": 2,
      "//": "Scale of critical nodes (* rx importance)",
      "//": "(based on link importance results from multihop)",
      "critical_node_scale": 1,
      "//": "Max number of links to optimize - too many can run for long time",
      "max_num_links": 5
    },
    "golay": {
      "//": "Optimization for golay code",
      "do_it": false,
      "//": "Number of Golay codes to use",
      "num_of_golay": 2,
      "//": "What is our target sinr for links (default)",
      "default_target_sinr": 18,
      "//": "What is the target sinr for particular links",
      "//": "filepath, file format as json dict: {linkname: target sinr}",
      "detailed_target_sinr_fp": null,
      "//": "Weight of PoP nodes",
      "pop_node_weight": 2,
      "//": "Scale of critical nodes (* rx importance)",
      "//": "(based on link importance results from multihop)",
      "critical_node_scale": 1
    }
  },
  "//": "Whether this is to create results for IEEE",
  "for_ieee": false,
  "//": "Whether in the debug mode",
  "debug": false
}
