---
- name: create db paths
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ docker_user }}"
    group: docker
    mode: 0755
  with_items:
    - "{{ db_gfs_path }}/env"
    - "{{ db_gfs_path }}/volumes/mysql_init_scripts"
    - "{{ db_data_path }}/mysql"

- name: copy env files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: "{{ docker_user }}"
    group: docker
    force: no
  with_items:
    - { src: "time.env", dest: "{{ db_gfs_path }}/env", mode: "0644" }
    - { src: "mysql.env", dest: "{{ db_gfs_path }}/env", mode: "0644" }
    - { src: "00-cxl.sql", dest: "{{ db_gfs_path }}/volumes/mysql_init_scripts", mode: "0755" }

- name: copy db config
  template:
    src: "docker-compose.yml"
    dest: "{{ db_gfs_path }}"
    mode: 0644
    owner: "{{ docker_user }}"
    group: docker
    force: yes

- name: add database label to docker node
  shell: "docker node update --label-add \"database=true\" {{ ansible_nodename }}"

- name: run compose
  shell: "docker stack deploy -c {{ db_gfs_path }}/docker-compose.yml --with-registry-auth database"

- name: clean compose
  file:
    path: "{{ db_gfs_path }}/docker-compose.yml"
    state: absent
  when: not dev_mode
