//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.MonitorCommand = {
  'SET_COUNTER_VALUES' : 1,
  'GET_COUNTER_VALUES' : 2,
  'DUMP_ALL_COUNTER_NAMES' : 3,
  'DUMP_ALL_COUNTER_DATA' : 4,
  'BUMP_COUNTER' : 5,
  'GET_EVENT_LOGS' : 6,
  'LOG_EVENT' : 11
};
ttypes.CounterValueType = {
  'GAUGE' : 1,
  'COUNTER' : 2
};
ttypes.PubType = {
  'COUNTER_PUB' : 1,
  'EVENT_LOG_PUB' : 2
};
var Counter = module.exports.Counter = function(args) {
  this.value = null;
  this.valueType = null;
  this.timestamp = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.valueType !== undefined && args.valueType !== null) {
      this.valueType = args.valueType;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
Counter.prototype = {};
Counter.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.valueType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Counter.prototype.write = function(output) {
  output.writeStructBegin('Counter');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.valueType !== null && this.valueType !== undefined) {
    output.writeFieldBegin('valueType', Thrift.Type.I32, 11);
    output.writeI32(this.valueType);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 12);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CounterSetParams = module.exports.CounterSetParams = function(args) {
  this.counters = null;
  if (args) {
    if (args.counters !== undefined && args.counters !== null) {
      this.counters = Thrift.copyMap(args.counters, [null]);
    }
  }
};
CounterSetParams.prototype = {};
CounterSetParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.counters = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readString();
          val4 = new ttypes.Counter();
          val4.read(input);
          this.counters[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterSetParams.prototype.write = function(output) {
  output.writeStructBegin('CounterSetParams');
  if (this.counters !== null && this.counters !== undefined) {
    output.writeFieldBegin('counters', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.counters));
    for (var kiter5 in this.counters) {
      if (this.counters.hasOwnProperty(kiter5)) {
        var viter6 = this.counters[kiter5];
        output.writeString(kiter5);
        viter6.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CounterGetParams = module.exports.CounterGetParams = function(args) {
  this.counterNames = null;
  if (args) {
    if (args.counterNames !== undefined && args.counterNames !== null) {
      this.counterNames = Thrift.copyList(args.counterNames, [null]);
    }
  }
};
CounterGetParams.prototype = {};
CounterGetParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.counterNames = [];
        var _rtmp38 = input.readListBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var elem10 = null;
          elem10 = input.readString();
          this.counterNames.push(elem10);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterGetParams.prototype.write = function(output) {
  output.writeStructBegin('CounterGetParams');
  if (this.counterNames !== null && this.counterNames !== undefined) {
    output.writeFieldBegin('counterNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.counterNames.length);
    for (var iter11 in this.counterNames) {
      if (this.counterNames.hasOwnProperty(iter11)) {
        iter11 = this.counterNames[iter11];
        output.writeString(iter11);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CounterBumpParams = module.exports.CounterBumpParams = function(args) {
  this.counterNames = null;
  if (args) {
    if (args.counterNames !== undefined && args.counterNames !== null) {
      this.counterNames = Thrift.copyList(args.counterNames, [null]);
    }
  }
};
CounterBumpParams.prototype = {};
CounterBumpParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.counterNames = [];
        var _rtmp313 = input.readListBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = input.readString();
          this.counterNames.push(elem15);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterBumpParams.prototype.write = function(output) {
  output.writeStructBegin('CounterBumpParams');
  if (this.counterNames !== null && this.counterNames !== undefined) {
    output.writeFieldBegin('counterNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.counterNames.length);
    for (var iter16 in this.counterNames) {
      if (this.counterNames.hasOwnProperty(iter16)) {
        iter16 = this.counterNames[iter16];
        output.writeString(iter16);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventLog = module.exports.EventLog = function(args) {
  this.category = null;
  this.samples = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.samples !== undefined && args.samples !== null) {
      this.samples = Thrift.copyList(args.samples, [null]);
    }
  }
};
EventLog.prototype = {};
EventLog.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.samples = [];
        var _rtmp318 = input.readListBegin();
        var _size17 = _rtmp318.size || 0;
        for (var _i19 = 0; _i19 < _size17; ++_i19) {
          var elem20 = null;
          elem20 = input.readString();
          this.samples.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventLog.prototype.write = function(output) {
  output.writeStructBegin('EventLog');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  if (this.samples !== null && this.samples !== undefined) {
    output.writeFieldBegin('samples', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.samples.length);
    for (var iter21 in this.samples) {
      if (this.samples.hasOwnProperty(iter21)) {
        iter21 = this.samples[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorRequest = module.exports.MonitorRequest = function(args) {
  this.cmd = null;
  this.counterSetParams = null;
  this.counterGetParams = null;
  this.counterBumpParams = null;
  this.eventLog = null;
  if (args) {
    if (args.cmd !== undefined && args.cmd !== null) {
      this.cmd = args.cmd;
    }
    if (args.counterSetParams !== undefined && args.counterSetParams !== null) {
      this.counterSetParams = new ttypes.CounterSetParams(args.counterSetParams);
    }
    if (args.counterGetParams !== undefined && args.counterGetParams !== null) {
      this.counterGetParams = new ttypes.CounterGetParams(args.counterGetParams);
    }
    if (args.counterBumpParams !== undefined && args.counterBumpParams !== null) {
      this.counterBumpParams = new ttypes.CounterBumpParams(args.counterBumpParams);
    }
    if (args.eventLog !== undefined && args.eventLog !== null) {
      this.eventLog = new ttypes.EventLog(args.eventLog);
    }
  }
};
MonitorRequest.prototype = {};
MonitorRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cmd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.counterSetParams = new ttypes.CounterSetParams();
        this.counterSetParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.counterGetParams = new ttypes.CounterGetParams();
        this.counterGetParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.counterBumpParams = new ttypes.CounterBumpParams();
        this.counterBumpParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.eventLog = new ttypes.EventLog();
        this.eventLog.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorRequest.prototype.write = function(output) {
  output.writeStructBegin('MonitorRequest');
  if (this.cmd !== null && this.cmd !== undefined) {
    output.writeFieldBegin('cmd', Thrift.Type.I32, 1);
    output.writeI32(this.cmd);
    output.writeFieldEnd();
  }
  if (this.counterSetParams !== null && this.counterSetParams !== undefined) {
    output.writeFieldBegin('counterSetParams', Thrift.Type.STRUCT, 2);
    this.counterSetParams.write(output);
    output.writeFieldEnd();
  }
  if (this.counterGetParams !== null && this.counterGetParams !== undefined) {
    output.writeFieldBegin('counterGetParams', Thrift.Type.STRUCT, 3);
    this.counterGetParams.write(output);
    output.writeFieldEnd();
  }
  if (this.counterBumpParams !== null && this.counterBumpParams !== undefined) {
    output.writeFieldBegin('counterBumpParams', Thrift.Type.STRUCT, 4);
    this.counterBumpParams.write(output);
    output.writeFieldEnd();
  }
  if (this.eventLog !== null && this.eventLog !== undefined) {
    output.writeFieldBegin('eventLog', Thrift.Type.STRUCT, 5);
    this.eventLog.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CounterValuesResponse = module.exports.CounterValuesResponse = function(args) {
  this.counters = null;
  if (args) {
    if (args.counters !== undefined && args.counters !== null) {
      this.counters = Thrift.copyMap(args.counters, [null]);
    }
  }
};
CounterValuesResponse.prototype = {};
CounterValuesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.counters = {};
        var _rtmp323 = input.readMapBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          var key25 = null;
          var val26 = null;
          key25 = input.readString();
          val26 = new ttypes.Counter();
          val26.read(input);
          this.counters[key25] = val26;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterValuesResponse.prototype.write = function(output) {
  output.writeStructBegin('CounterValuesResponse');
  if (this.counters !== null && this.counters !== undefined) {
    output.writeFieldBegin('counters', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.counters));
    for (var kiter27 in this.counters) {
      if (this.counters.hasOwnProperty(kiter27)) {
        var viter28 = this.counters[kiter27];
        output.writeString(kiter27);
        viter28.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EventLogsResponse = module.exports.EventLogsResponse = function(args) {
  this.eventLogs = null;
  if (args) {
    if (args.eventLogs !== undefined && args.eventLogs !== null) {
      this.eventLogs = Thrift.copyList(args.eventLogs, [ttypes.EventLog]);
    }
  }
};
EventLogsResponse.prototype = {};
EventLogsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.eventLogs = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = new ttypes.EventLog();
          elem32.read(input);
          this.eventLogs.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EventLogsResponse.prototype.write = function(output) {
  output.writeStructBegin('EventLogsResponse');
  if (this.eventLogs !== null && this.eventLogs !== undefined) {
    output.writeFieldBegin('eventLogs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.eventLogs.length);
    for (var iter33 in this.eventLogs) {
      if (this.eventLogs.hasOwnProperty(iter33)) {
        iter33 = this.eventLogs[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CounterNamesResponse = module.exports.CounterNamesResponse = function(args) {
  this.counterNames = null;
  if (args) {
    if (args.counterNames !== undefined && args.counterNames !== null) {
      this.counterNames = Thrift.copyList(args.counterNames, [null]);
    }
  }
};
CounterNamesResponse.prototype = {};
CounterNamesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.counterNames = [];
        var _rtmp335 = input.readListBegin();
        var _size34 = _rtmp335.size || 0;
        for (var _i36 = 0; _i36 < _size34; ++_i36) {
          var elem37 = null;
          elem37 = input.readString();
          this.counterNames.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CounterNamesResponse.prototype.write = function(output) {
  output.writeStructBegin('CounterNamesResponse');
  if (this.counterNames !== null && this.counterNames !== undefined) {
    output.writeFieldBegin('counterNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.counterNames.length);
    for (var iter38 in this.counterNames) {
      if (this.counterNames.hasOwnProperty(iter38)) {
        iter38 = this.counterNames[iter38];
        output.writeString(iter38);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorPub = module.exports.MonitorPub = function(args) {
  this.pubType = null;
  this.counterPub = null;
  this.eventLogPub = null;
  if (args) {
    if (args.pubType !== undefined && args.pubType !== null) {
      this.pubType = args.pubType;
    }
    if (args.counterPub !== undefined && args.counterPub !== null) {
      this.counterPub = new ttypes.CounterValuesResponse(args.counterPub);
    }
    if (args.eventLogPub !== undefined && args.eventLogPub !== null) {
      this.eventLogPub = new ttypes.EventLog(args.eventLogPub);
    }
  }
};
MonitorPub.prototype = {};
MonitorPub.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.pubType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.counterPub = new ttypes.CounterValuesResponse();
        this.counterPub.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.eventLogPub = new ttypes.EventLog();
        this.eventLogPub.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorPub.prototype.write = function(output) {
  output.writeStructBegin('MonitorPub');
  if (this.pubType !== null && this.pubType !== undefined) {
    output.writeFieldBegin('pubType', Thrift.Type.I32, 1);
    output.writeI32(this.pubType);
    output.writeFieldEnd();
  }
  if (this.counterPub !== null && this.counterPub !== undefined) {
    output.writeFieldBegin('counterPub', Thrift.Type.STRUCT, 2);
    this.counterPub.write(output);
    output.writeFieldEnd();
  }
  if (this.eventLogPub !== null && this.eventLogPub !== undefined) {
    output.writeFieldBegin('eventLogPub', Thrift.Type.STRUCT, 3);
    this.eventLogPub.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

