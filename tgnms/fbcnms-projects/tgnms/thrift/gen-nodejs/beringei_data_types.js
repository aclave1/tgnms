//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Q = thrift.Q;


const ttypes = module.exports = {};
ttypes.Compression = {
  'NONE' : 0,
  'ZLIB' : 1,
};
ttypes.StatusCode = {
  'OK' : 0,
  'DONT_OWN_SHARD' : 1,
  'KEY_MISSING' : 2,
  'RPC_FAIL' : 3,
  'SHARD_IN_PROGRESS' : 4,
  'BUCKET_NOT_FINALIZED' : 5,
  'ZIPPY_STORAGE_FAIL' : 6,
  'MISSING_TOO_MUCH_DATA' : 7,
};
Key = module.exports.Key = function(args) {
  this.key = null;
  this.shardId = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.shardId !== undefined && args.shardId !== null) {
      this.shardId = args.shardId;
    }
  }
};
Key.prototype = {};
Key.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.shardId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Key.prototype.write = function(output) {
  output.writeStructBegin('Key');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.I64, 2);
    output.writeI64(this.shardId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeSeriesBlock = module.exports.TimeSeriesBlock = function(args) {
  this.compression = null;
  this.count = null;
  this.data = null;
  if (args) {
    if (args.compression !== undefined && args.compression !== null) {
      this.compression = args.compression;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
TimeSeriesBlock.prototype = {};
TimeSeriesBlock.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.compression = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeSeriesBlock.prototype.write = function(output) {
  output.writeStructBegin('TimeSeriesBlock');
  if (this.compression !== null && this.compression !== undefined) {
    output.writeFieldBegin('compression', Thrift.Type.I32, 1);
    output.writeI32(this.compression);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 2);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 3);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeSeriesData = module.exports.TimeSeriesData = function(args) {
  this.data = null;
  this.status = 0;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [ttypes.TimeSeriesBlock]);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
TimeSeriesData.prototype = {};
TimeSeriesData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        let _size0 = 0;
        var _rtmp34;
        this.data = [];
        let _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (let _i5 = 0; _i5 < _size0; ++_i5) {
          let elem6 = null;
          elem6 = new ttypes.TimeSeriesBlock();
          elem6.read(input);
          this.data.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeSeriesData.prototype.write = function(output) {
  output.writeStructBegin('TimeSeriesData');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (let iter7 in this.data) {
      if (this.data.hasOwnProperty(iter7)) {
        iter7 = this.data[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetDataRequest = module.exports.GetDataRequest = function(args) {
  this.keys = null;
  this.begin1 = null;
  this.end1 = null;
  if (args) {
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [ttypes.Key]);
    }
    if (args.begin1 !== undefined && args.begin1 !== null) {
      this.begin1 = args.begin1;
    }
    if (args.end1 !== undefined && args.end1 !== null) {
      this.end1 = args.end1;
    }
  }
};
GetDataRequest.prototype = {};
GetDataRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        let _size8 = 0;
        var _rtmp312;
        this.keys = [];
        let _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (let _i13 = 0; _i13 < _size8; ++_i13) {
          let elem14 = null;
          elem14 = new ttypes.Key();
          elem14.read(input);
          this.keys.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.begin1 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.end1 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDataRequest.prototype.write = function(output) {
  output.writeStructBegin('GetDataRequest');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.keys.length);
    for (let iter15 in this.keys) {
      if (this.keys.hasOwnProperty(iter15)) {
        iter15 = this.keys[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.begin1 !== null && this.begin1 !== undefined) {
    output.writeFieldBegin('begin1', Thrift.Type.I64, 2);
    output.writeI64(this.begin1);
    output.writeFieldEnd();
  }
  if (this.end1 !== null && this.end1 !== undefined) {
    output.writeFieldBegin('end1', Thrift.Type.I64, 3);
    output.writeI64(this.end1);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetDataResult = module.exports.GetDataResult = function(args) {
  this.results = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [ttypes.TimeSeriesData]);
    }
  }
};
GetDataResult.prototype = {};
GetDataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        let _size16 = 0;
        var _rtmp320;
        this.results = [];
        let _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (let _i21 = 0; _i21 < _size16; ++_i21) {
          let elem22 = null;
          elem22 = new ttypes.TimeSeriesData();
          elem22.read(input);
          this.results.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetDataResult.prototype.write = function(output) {
  output.writeStructBegin('GetDataResult');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (let iter23 in this.results) {
      if (this.results.hasOwnProperty(iter23)) {
        iter23 = this.results[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeValuePair = module.exports.TimeValuePair = function(args) {
  this.unixTime = null;
  this.value = null;
  if (args) {
    if (args.unixTime !== undefined && args.unixTime !== null) {
      this.unixTime = args.unixTime;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TimeValuePair.prototype = {};
TimeValuePair.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.unixTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeValuePair.prototype.write = function(output) {
  output.writeStructBegin('TimeValuePair');
  if (this.unixTime !== null && this.unixTime !== undefined) {
    output.writeFieldBegin('unixTime', Thrift.Type.I64, 1);
    output.writeI64(this.unixTime);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataPoint = module.exports.DataPoint = function(args) {
  this.key = null;
  this.value = null;
  this.categoryId = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.Key(args.key);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.TimeValuePair(args.value);
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
  }
};
DataPoint.prototype = {};
DataPoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.Key();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.TimeValuePair();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataPoint.prototype.write = function(output) {
  output.writeStructBegin('DataPoint');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 3);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutDataRequest = module.exports.PutDataRequest = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [ttypes.DataPoint]);
    }
  }
};
PutDataRequest.prototype = {};
PutDataRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        let _size24 = 0;
        var _rtmp328;
        this.data = [];
        let _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (let _i29 = 0; _i29 < _size24; ++_i29) {
          let elem30 = null;
          elem30 = new ttypes.DataPoint();
          elem30.read(input);
          this.data.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutDataRequest.prototype.write = function(output) {
  output.writeStructBegin('PutDataRequest');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (let iter31 in this.data) {
      if (this.data.hasOwnProperty(iter31)) {
        iter31 = this.data[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PutDataResult = module.exports.PutDataResult = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [ttypes.DataPoint]);
    }
  }
};
PutDataResult.prototype = {};
PutDataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        let _size32 = 0;
        var _rtmp336;
        this.data = [];
        let _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (let _i37 = 0; _i37 < _size32; ++_i37) {
          let elem38 = null;
          elem38 = new ttypes.DataPoint();
          elem38.read(input);
          this.data.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PutDataResult.prototype.write = function(output) {
  output.writeStructBegin('PutDataResult');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (let iter39 in this.data) {
      if (this.data.hasOwnProperty(iter39)) {
        iter39 = this.data[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetShardDataBucketResult = module.exports.GetShardDataBucketResult = function(args) {
  this.status = null;
  this.keys = null;
  this.data = null;
  this.recentRead = null;
  this.moreEntries = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [null]);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [Thrift.copyList, ttypes.TimeSeriesBlock]);
    }
    if (args.recentRead !== undefined && args.recentRead !== null) {
      this.recentRead = Thrift.copyList(args.recentRead, [null]);
    }
    if (args.moreEntries !== undefined && args.moreEntries !== null) {
      this.moreEntries = args.moreEntries;
    }
  }
};
GetShardDataBucketResult.prototype = {};
GetShardDataBucketResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        let _size40 = 0;
        var _rtmp344;
        this.keys = [];
        let _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (let _i45 = 0; _i45 < _size40; ++_i45) {
          let elem46 = null;
          elem46 = input.readString();
          this.keys.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        let _size47 = 0;
        var _rtmp351;
        this.data = [];
        let _etype50 = 0;
        _rtmp351 = input.readListBegin();
        _etype50 = _rtmp351.etype;
        _size47 = _rtmp351.size;
        for (let _i52 = 0; _i52 < _size47; ++_i52) {
          let elem53 = null;
          let _size54 = 0;
          var _rtmp358;
          elem53 = [];
          let _etype57 = 0;
          _rtmp358 = input.readListBegin();
          _etype57 = _rtmp358.etype;
          _size54 = _rtmp358.size;
          for (let _i59 = 0; _i59 < _size54; ++_i59) {
            let elem60 = null;
            elem60 = new ttypes.TimeSeriesBlock();
            elem60.read(input);
            elem53.push(elem60);
          }
          input.readListEnd();
          this.data.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        let _size61 = 0;
        var _rtmp365;
        this.recentRead = [];
        let _etype64 = 0;
        _rtmp365 = input.readListBegin();
        _etype64 = _rtmp365.etype;
        _size61 = _rtmp365.size;
        for (let _i66 = 0; _i66 < _size61; ++_i66) {
          let elem67 = null;
          elem67 = input.readBool();
          this.recentRead.push(elem67);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.moreEntries = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetShardDataBucketResult.prototype.write = function(output) {
  output.writeStructBegin('GetShardDataBucketResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (let iter68 in this.keys) {
      if (this.keys.hasOwnProperty(iter68)) {
        iter68 = this.keys[iter68];
        output.writeString(iter68);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.data.length);
    for (let iter69 in this.data) {
      if (this.data.hasOwnProperty(iter69)) {
        iter69 = this.data[iter69];
        output.writeListBegin(Thrift.Type.STRUCT, iter69.length);
        for (let iter70 in iter69) {
          if (iter69.hasOwnProperty(iter70)) {
            iter70 = iter69[iter70];
            iter70.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recentRead !== null && this.recentRead !== undefined) {
    output.writeFieldBegin('recentRead', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.BOOL, this.recentRead.length);
    for (let iter71 in this.recentRead) {
      if (this.recentRead.hasOwnProperty(iter71)) {
        iter71 = this.recentRead[iter71];
        output.writeBool(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.moreEntries !== null && this.moreEntries !== undefined) {
    output.writeFieldBegin('moreEntries', Thrift.Type.BOOL, 5);
    output.writeBool(this.moreEntries);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ShardInfo = module.exports.ShardInfo = function(args) {
  this.shardId = null;
  this.hostAddress = null;
  this.port = null;
  if (args) {
    if (args.shardId !== undefined && args.shardId !== null) {
      this.shardId = args.shardId;
    }
    if (args.hostAddress !== undefined && args.hostAddress !== null) {
      this.hostAddress = args.hostAddress;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
  }
};
ShardInfo.prototype = {};
ShardInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.shardId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hostAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShardInfo.prototype.write = function(output) {
  output.writeStructBegin('ShardInfo');
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.I32, 1);
    output.writeI32(this.shardId);
    output.writeFieldEnd();
  }
  if (this.hostAddress !== null && this.hostAddress !== undefined) {
    output.writeFieldBegin('hostAddress', Thrift.Type.STRING, 2);
    output.writeString(this.hostAddress);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 3);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceMap = module.exports.ServiceMap = function(args) {
  this.serviceName = null;
  this.location = null;
  this.isLoggingNewKeysEnabled = null;
  this.shardMap = null;
  if (args) {
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.isLoggingNewKeysEnabled !== undefined && args.isLoggingNewKeysEnabled !== null) {
      this.isLoggingNewKeysEnabled = args.isLoggingNewKeysEnabled;
    }
    if (args.shardMap !== undefined && args.shardMap !== null) {
      this.shardMap = Thrift.copyList(args.shardMap, [ttypes.ShardInfo]);
    }
  }
};
ServiceMap.prototype = {};
ServiceMap.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isLoggingNewKeysEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        let _size72 = 0;
        var _rtmp376;
        this.shardMap = [];
        let _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (let _i77 = 0; _i77 < _size72; ++_i77) {
          let elem78 = null;
          elem78 = new ttypes.ShardInfo();
          elem78.read(input);
          this.shardMap.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceMap.prototype.write = function(output) {
  output.writeStructBegin('ServiceMap');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.isLoggingNewKeysEnabled !== null && this.isLoggingNewKeysEnabled !== undefined) {
    output.writeFieldBegin('isLoggingNewKeysEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.isLoggingNewKeysEnabled);
    output.writeFieldEnd();
  }
  if (this.shardMap !== null && this.shardMap !== undefined) {
    output.writeFieldBegin('shardMap', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.shardMap.length);
    for (let iter79 in this.shardMap) {
      if (this.shardMap.hasOwnProperty(iter79)) {
        iter79 = this.shardMap[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfigurationInfo = module.exports.ConfigurationInfo = function(args) {
  this.shardCount = null;
  this.serviceMap = null;
  if (args) {
    if (args.shardCount !== undefined && args.shardCount !== null) {
      this.shardCount = args.shardCount;
    }
    if (args.serviceMap !== undefined && args.serviceMap !== null) {
      this.serviceMap = Thrift.copyList(args.serviceMap, [ttypes.ServiceMap]);
    }
  }
};
ConfigurationInfo.prototype = {};
ConfigurationInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.shardCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        let _size80 = 0;
        var _rtmp384;
        this.serviceMap = [];
        let _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (let _i85 = 0; _i85 < _size80; ++_i85) {
          let elem86 = null;
          elem86 = new ttypes.ServiceMap();
          elem86.read(input);
          this.serviceMap.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfigurationInfo.prototype.write = function(output) {
  output.writeStructBegin('ConfigurationInfo');
  if (this.shardCount !== null && this.shardCount !== undefined) {
    output.writeFieldBegin('shardCount', Thrift.Type.I32, 1);
    output.writeI32(this.shardCount);
    output.writeFieldEnd();
  }
  if (this.serviceMap !== null && this.serviceMap !== undefined) {
    output.writeFieldBegin('serviceMap', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.serviceMap.length);
    for (let iter87 in this.serviceMap) {
      if (this.serviceMap.hasOwnProperty(iter87)) {
        iter87 = this.serviceMap[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetLastUpdateTimesRequest = module.exports.GetLastUpdateTimesRequest = function(args) {
  this.shardId = null;
  this.minLastUpdateTime = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.shardId !== undefined && args.shardId !== null) {
      this.shardId = args.shardId;
    }
    if (args.minLastUpdateTime !== undefined && args.minLastUpdateTime !== null) {
      this.minLastUpdateTime = args.minLastUpdateTime;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
GetLastUpdateTimesRequest.prototype = {};
GetLastUpdateTimesRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.shardId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minLastUpdateTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetLastUpdateTimesRequest.prototype.write = function(output) {
  output.writeStructBegin('GetLastUpdateTimesRequest');
  if (this.shardId !== null && this.shardId !== undefined) {
    output.writeFieldBegin('shardId', Thrift.Type.I64, 1);
    output.writeI64(this.shardId);
    output.writeFieldEnd();
  }
  if (this.minLastUpdateTime !== null && this.minLastUpdateTime !== undefined) {
    output.writeFieldBegin('minLastUpdateTime', Thrift.Type.I32, 2);
    output.writeI32(this.minLastUpdateTime);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

KeyUpdateTime = module.exports.KeyUpdateTime = function(args) {
  this.key = null;
  this.categoryId = null;
  this.updateTime = null;
  this.queriedRecently = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.categoryId !== undefined && args.categoryId !== null) {
      this.categoryId = args.categoryId;
    }
    if (args.updateTime !== undefined && args.updateTime !== null) {
      this.updateTime = args.updateTime;
    }
    if (args.queriedRecently !== undefined && args.queriedRecently !== null) {
      this.queriedRecently = args.queriedRecently;
    }
  }
};
KeyUpdateTime.prototype = {};
KeyUpdateTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.categoryId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.updateTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.queriedRecently = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyUpdateTime.prototype.write = function(output) {
  output.writeStructBegin('KeyUpdateTime');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.categoryId !== null && this.categoryId !== undefined) {
    output.writeFieldBegin('categoryId', Thrift.Type.I32, 2);
    output.writeI32(this.categoryId);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I32, 3);
    output.writeI32(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.queriedRecently !== null && this.queriedRecently !== undefined) {
    output.writeFieldBegin('queriedRecently', Thrift.Type.BOOL, 4);
    output.writeBool(this.queriedRecently);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetLastUpdateTimesResult = module.exports.GetLastUpdateTimesResult = function(args) {
  this.keys = null;
  this.moreResults = null;
  if (args) {
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [ttypes.KeyUpdateTime]);
    }
    if (args.moreResults !== undefined && args.moreResults !== null) {
      this.moreResults = args.moreResults;
    }
  }
};
GetLastUpdateTimesResult.prototype = {};
GetLastUpdateTimesResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    const ret = input.readFieldBegin();
    const fname = ret.fname;
    const ftype = ret.ftype;
    const fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        let _size88 = 0;
        var _rtmp392;
        this.keys = [];
        let _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (let _i93 = 0; _i93 < _size88; ++_i93) {
          let elem94 = null;
          elem94 = new ttypes.KeyUpdateTime();
          elem94.read(input);
          this.keys.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.moreResults = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetLastUpdateTimesResult.prototype.write = function(output) {
  output.writeStructBegin('GetLastUpdateTimesResult');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.keys.length);
    for (let iter95 in this.keys) {
      if (this.keys.hasOwnProperty(iter95)) {
        iter95 = this.keys[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.moreResults !== null && this.moreResults !== undefined) {
    output.writeFieldBegin('moreResults', Thrift.Type.BOOL, 2);
    output.writeBool(this.moreResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

