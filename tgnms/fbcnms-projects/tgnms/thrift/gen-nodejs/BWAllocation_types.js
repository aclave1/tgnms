//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.SlotAttrib = {
  'UNRSVD_SLOT' : 0,
  'BF_RSVD_SLOT' : 1,
  'MGMT_RSVD_SLOT' : 2
};
var SlotInfo = module.exports.SlotInfo = function(args) {
  this.id = null;
  this.attrib = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.attrib !== undefined && args.attrib !== null) {
      this.attrib = args.attrib;
    }
  }
};
SlotInfo.prototype = {};
SlotInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.attrib = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SlotInfo.prototype.write = function(output) {
  output.writeStructBegin('SlotInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I16, 1);
    output.writeI16(this.id);
    output.writeFieldEnd();
  }
  if (this.attrib !== null && this.attrib !== undefined) {
    output.writeFieldBegin('attrib', Thrift.Type.I32, 2);
    output.writeI32(this.attrib);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NodeBwAlloc = module.exports.NodeBwAlloc = function(args) {
  this.frmCfgType = null;
  this.sframesPerBWGD = null;
  this.slotsPerFrame = null;
  this.macAddrList = null;
  this.txSlotMap = null;
  this.rxSlotMap = null;
  if (args) {
    if (args.frmCfgType !== undefined && args.frmCfgType !== null) {
      this.frmCfgType = args.frmCfgType;
    }
    if (args.sframesPerBWGD !== undefined && args.sframesPerBWGD !== null) {
      this.sframesPerBWGD = args.sframesPerBWGD;
    }
    if (args.slotsPerFrame !== undefined && args.slotsPerFrame !== null) {
      this.slotsPerFrame = args.slotsPerFrame;
    }
    if (args.macAddrList !== undefined && args.macAddrList !== null) {
      this.macAddrList = Thrift.copyMap(args.macAddrList, [null]);
    }
    if (args.txSlotMap !== undefined && args.txSlotMap !== null) {
      this.txSlotMap = Thrift.copyMap(args.txSlotMap, [ttypes.SlotInfo]);
    }
    if (args.rxSlotMap !== undefined && args.rxSlotMap !== null) {
      this.rxSlotMap = Thrift.copyMap(args.rxSlotMap, [ttypes.SlotInfo]);
    }
  }
};
NodeBwAlloc.prototype = {};
NodeBwAlloc.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.frmCfgType = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.sframesPerBWGD = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.slotsPerFrame = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.macAddrList = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = input.readI16();
          val4 = input.readString();
          this.macAddrList[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.txSlotMap = {};
        var _rtmp36 = input.readMapBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var key8 = null;
          var val9 = null;
          key8 = input.readI16();
          val9 = new ttypes.SlotInfo();
          val9.read(input);
          this.txSlotMap[key8] = val9;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.rxSlotMap = {};
        var _rtmp311 = input.readMapBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var key13 = null;
          var val14 = null;
          key13 = input.readI16();
          val14 = new ttypes.SlotInfo();
          val14.read(input);
          this.rxSlotMap[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeBwAlloc.prototype.write = function(output) {
  output.writeStructBegin('NodeBwAlloc');
  if (this.frmCfgType !== null && this.frmCfgType !== undefined) {
    output.writeFieldBegin('frmCfgType', Thrift.Type.I16, 1);
    output.writeI16(this.frmCfgType);
    output.writeFieldEnd();
  }
  if (this.sframesPerBWGD !== null && this.sframesPerBWGD !== undefined) {
    output.writeFieldBegin('sframesPerBWGD', Thrift.Type.I16, 2);
    output.writeI16(this.sframesPerBWGD);
    output.writeFieldEnd();
  }
  if (this.slotsPerFrame !== null && this.slotsPerFrame !== undefined) {
    output.writeFieldBegin('slotsPerFrame', Thrift.Type.I16, 3);
    output.writeI16(this.slotsPerFrame);
    output.writeFieldEnd();
  }
  if (this.macAddrList !== null && this.macAddrList !== undefined) {
    output.writeFieldBegin('macAddrList', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I16, Thrift.Type.STRING, Thrift.objectLength(this.macAddrList));
    for (var kiter15 in this.macAddrList) {
      if (this.macAddrList.hasOwnProperty(kiter15)) {
        var viter16 = this.macAddrList[kiter15];
        output.writeI16(kiter15);
        output.writeString(viter16);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.txSlotMap !== null && this.txSlotMap !== undefined) {
    output.writeFieldBegin('txSlotMap', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.I16, Thrift.Type.STRUCT, Thrift.objectLength(this.txSlotMap));
    for (var kiter17 in this.txSlotMap) {
      if (this.txSlotMap.hasOwnProperty(kiter17)) {
        var viter18 = this.txSlotMap[kiter17];
        output.writeI16(kiter17);
        viter18.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.rxSlotMap !== null && this.rxSlotMap !== undefined) {
    output.writeFieldBegin('rxSlotMap', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.I16, Thrift.Type.STRUCT, Thrift.objectLength(this.rxSlotMap));
    for (var kiter19 in this.rxSlotMap) {
      if (this.rxSlotMap.hasOwnProperty(kiter19)) {
        var viter20 = this.rxSlotMap[kiter19];
        output.writeI16(kiter19);
        viter20.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NetworkBwAlloc = module.exports.NetworkBwAlloc = function(args) {
  this.nodeBwAllocMap = null;
  if (args) {
    if (args.nodeBwAllocMap !== undefined && args.nodeBwAllocMap !== null) {
      this.nodeBwAllocMap = Thrift.copyMap(args.nodeBwAllocMap, [ttypes.NodeBwAlloc]);
    }
  }
};
NetworkBwAlloc.prototype = {};
NetworkBwAlloc.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.nodeBwAllocMap = {};
        var _rtmp322 = input.readMapBegin();
        var _size21 = _rtmp322.size || 0;
        for (var _i23 = 0; _i23 < _size21; ++_i23) {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          val25 = new ttypes.NodeBwAlloc();
          val25.read(input);
          this.nodeBwAllocMap[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NetworkBwAlloc.prototype.write = function(output) {
  output.writeStructBegin('NetworkBwAlloc');
  if (this.nodeBwAllocMap !== null && this.nodeBwAllocMap !== undefined) {
    output.writeFieldBegin('nodeBwAllocMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.nodeBwAllocMap));
    for (var kiter26 in this.nodeBwAllocMap) {
      if (this.nodeBwAllocMap.hasOwnProperty(kiter26)) {
        var viter27 = this.nodeBwAllocMap[kiter26];
        output.writeString(kiter26);
        viter27.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LinkAirtime = module.exports.LinkAirtime = function(args) {
  this.macAddress = null;
  this.txIdeal = null;
  this.txMin = null;
  this.txMax = null;
  this.rxIdeal = null;
  this.rxMin = null;
  this.rxMax = null;
  if (args) {
    if (args.macAddress !== undefined && args.macAddress !== null) {
      this.macAddress = args.macAddress;
    }
    if (args.txIdeal !== undefined && args.txIdeal !== null) {
      this.txIdeal = args.txIdeal;
    }
    if (args.txMin !== undefined && args.txMin !== null) {
      this.txMin = args.txMin;
    }
    if (args.txMax !== undefined && args.txMax !== null) {
      this.txMax = args.txMax;
    }
    if (args.rxIdeal !== undefined && args.rxIdeal !== null) {
      this.rxIdeal = args.rxIdeal;
    }
    if (args.rxMin !== undefined && args.rxMin !== null) {
      this.rxMin = args.rxMin;
    }
    if (args.rxMax !== undefined && args.rxMax !== null) {
      this.rxMax = args.rxMax;
    }
  }
};
LinkAirtime.prototype = {};
LinkAirtime.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.macAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.txIdeal = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.txMin = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.txMax = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.rxIdeal = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.rxMin = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.rxMax = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkAirtime.prototype.write = function(output) {
  output.writeStructBegin('LinkAirtime');
  if (this.macAddress !== null && this.macAddress !== undefined) {
    output.writeFieldBegin('macAddress', Thrift.Type.STRING, 1);
    output.writeString(this.macAddress);
    output.writeFieldEnd();
  }
  if (this.txIdeal !== null && this.txIdeal !== undefined) {
    output.writeFieldBegin('txIdeal', Thrift.Type.I16, 2);
    output.writeI16(this.txIdeal);
    output.writeFieldEnd();
  }
  if (this.txMin !== null && this.txMin !== undefined) {
    output.writeFieldBegin('txMin', Thrift.Type.I16, 3);
    output.writeI16(this.txMin);
    output.writeFieldEnd();
  }
  if (this.txMax !== null && this.txMax !== undefined) {
    output.writeFieldBegin('txMax', Thrift.Type.I16, 4);
    output.writeI16(this.txMax);
    output.writeFieldEnd();
  }
  if (this.rxIdeal !== null && this.rxIdeal !== undefined) {
    output.writeFieldBegin('rxIdeal', Thrift.Type.I16, 5);
    output.writeI16(this.rxIdeal);
    output.writeFieldEnd();
  }
  if (this.rxMin !== null && this.rxMin !== undefined) {
    output.writeFieldBegin('rxMin', Thrift.Type.I16, 6);
    output.writeI16(this.rxMin);
    output.writeFieldEnd();
  }
  if (this.rxMax !== null && this.rxMax !== undefined) {
    output.writeFieldBegin('rxMax', Thrift.Type.I16, 7);
    output.writeI16(this.rxMax);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NodeAirtime = module.exports.NodeAirtime = function(args) {
  this.linkAirtimes = null;
  if (args) {
    if (args.linkAirtimes !== undefined && args.linkAirtimes !== null) {
      this.linkAirtimes = Thrift.copyList(args.linkAirtimes, [ttypes.LinkAirtime]);
    }
  }
};
NodeAirtime.prototype = {};
NodeAirtime.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.linkAirtimes = [];
        var _rtmp329 = input.readListBegin();
        var _size28 = _rtmp329.size || 0;
        for (var _i30 = 0; _i30 < _size28; ++_i30) {
          var elem31 = null;
          elem31 = new ttypes.LinkAirtime();
          elem31.read(input);
          this.linkAirtimes.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeAirtime.prototype.write = function(output) {
  output.writeStructBegin('NodeAirtime');
  if (this.linkAirtimes !== null && this.linkAirtimes !== undefined) {
    output.writeFieldBegin('linkAirtimes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkAirtimes.length);
    for (var iter32 in this.linkAirtimes) {
      if (this.linkAirtimes.hasOwnProperty(iter32)) {
        iter32 = this.linkAirtimes[iter32];
        iter32.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NetworkAirtime = module.exports.NetworkAirtime = function(args) {
  this.nodeAirtimeMap = null;
  if (args) {
    if (args.nodeAirtimeMap !== undefined && args.nodeAirtimeMap !== null) {
      this.nodeAirtimeMap = Thrift.copyMap(args.nodeAirtimeMap, [ttypes.NodeAirtime]);
    }
  }
};
NetworkAirtime.prototype = {};
NetworkAirtime.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        this.nodeAirtimeMap = {};
        var _rtmp334 = input.readMapBegin();
        var _size33 = _rtmp334.size || 0;
        for (var _i35 = 0; _i35 < _size33; ++_i35) {
          var key36 = null;
          var val37 = null;
          key36 = input.readString();
          val37 = new ttypes.NodeAirtime();
          val37.read(input);
          this.nodeAirtimeMap[key36] = val37;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NetworkAirtime.prototype.write = function(output) {
  output.writeStructBegin('NetworkAirtime');
  if (this.nodeAirtimeMap !== null && this.nodeAirtimeMap !== undefined) {
    output.writeFieldBegin('nodeAirtimeMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.nodeAirtimeMap));
    for (var kiter38 in this.nodeAirtimeMap) {
      if (this.nodeAirtimeMap.hasOwnProperty(kiter38)) {
        var viter39 = this.nodeAirtimeMap[kiter38];
        output.writeString(kiter38);
        viter39.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

