/**
 * Generated by `js1 upgrade www-shared`.
 * @generated SignedSource<<a63f9ff960e0439e3f6781abc0287c92>>
 *
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @format
 */

'use strict';

function isBeingMutated(node) {
  var currNode = node;
  while (currNode.parent) {
    if (currNode.parent.type === 'UpdateExpression') {
      if (currNode.parent.argument === currNode) {
        return true;
      }
    }
    if (currNode.parent.type === 'AssignmentExpression') {
      if (currNode.parent.left === currNode) {
        return true;
      }
    }
    if (currNode.parent.type === 'MemberExpression') {
      if (currNode.parent.object !== currNode) {
        return false;
      }
    }
    currNode = currNode.parent;
  }
  return false;
}

function isInConstructor(node) {
  if (!node || !node.parent) {
    return false;
  }

  if (
    node.parent.type === 'MethodDefinition' &&
    node.parent.kind === 'constructor'
  ) {
    return true;
  }

  return isInConstructor(node.parent);
}

function isReferencing(node, property) {
  return (
    node.object.type === 'ThisExpression' &&
    node.property.type === 'Identifier' &&
    node.property.name === property &&
    (node.parent.type === 'MemberExpression' ||
      node.parent.type === 'AssignmentExpression')
  );
}

module.exports = function rule(context) {
  function checkForStatePropsMutation(node) {
    var isStateMember = isReferencing(node, 'state');
    var isPropsMember = isReferencing(node, 'props');

    var isStateOrPropsMember = isStateMember || isPropsMember;

    // ex: this.state.foo
    if (!isStateOrPropsMember) {
      return;
    }

    // ex:
    // this.state.foo = 5 or
    // this.state.foo++ or
    // [this.state.foo, x] = [1, 2] or
    // this.state.foo.bar = 5
    if (!isBeingMutated(node)) {
      return;
    }

    if (isStateMember && isInConstructor(node)) {
      return;
    }

    var message;
    if (node.property.name === 'state') {
      message =
        "Never mutate a React component's `state` property directly. Treat " +
        '`this.state` as immutable and always use this.setState() to change ' +
        'it. Refer to http://facebook.github.io/react/docs/component-api.html' +
        '#setstate for more information.';
    } else {
      message =
        "Never mutate a React component's `props`, they should always be " +
        'treated as immutable within the component. \n' +
        ' - To set defaults, create a `getDefaultProps` method\n' +
        ' - Mutable state should be stored as state using `this.setState`\n' +
        ' - If you need to change the props of another component, use ' +
        '`cloneWithProps`.';
    }

    context.report(node, message);
  }

  return {
    MemberExpression: checkForStatePropsMutation,
  };
};
