/**
 * Generated by `js1 upgrade www-shared`.
 * @generated SignedSource<<4490e795e2f56238f143ecc2165d01c7>>
 *
 * Copyright 2004-present Facebook. All Rights Reserved.
 */

'use strict';

const isReactClass = classDeclaration => {
  const superClass = classDeclaration.superClass;

  if (!superClass) {
    return false;
  } else if (
    superClass.type === 'MemberExpression' &&
    superClass.object.name === 'React'
  ) {
    return superClass.property.name === 'Component' ||
      superClass.property.name === 'PureComponent';
  } else if (superClass.type === 'Identifier') {
    return superClass.name === 'Component' ||
      superClass.name === 'PureComponent';
  }

  return false;
};

const isInsideReactComponent = node => {
  while (node) {
    if (node.type === 'ClassDeclaration') {
      return isReactClass(node);
    }

    node = node.parent;
  }

  return false;
};


const isThisDotState = node =>
  node.parent.property && node.parent.property.name === 'state';

const isInsideSetStateCall = node => {
  while (node) {
    if (
      node.type === 'CallExpression' &&
      node.callee.type === 'MemberExpression' &&
      node.callee.property.name === 'setState'
    ) {
      return true;
    }

    node = node.parent;
  }

  return false;
};

module.exports = function rule(context) {
  const message = 'setState() is asynchronous. This means it is unsafe to ' +
    'use values currently in this.state when setting new state (because ' +
    'these values may be stale). Please use the updater form of setState() ' +
    'instead. See https://reactjs.org/docs/react-component.html#setstate';

  return {
    ThisExpression(node) {
      if (
        isInsideReactComponent(node) &&
        isThisDotState(node) &&
        isInsideSetStateCall(node)
      ) {
        context.report(node, message);
      }
    },
  };
};
