/**
 * Generated by `js1 upgrade www-shared`.
 * @generated SignedSource<<de5c5a35a49276dea7230c0da472daaf>>
 *
 * Copyright 2004-present Facebook. All Rights Reserved.
 * @format
 */

'use strict';

module.exports = {
  meta: {
    docs: {
      description: `Disallow anything that's not plain, printable ASCII
          (0x20 - 0x7E plus tabs, CR/LF). Other characters should use
          escaping (\\x and \\u). Tools or parsers could have weird issues/bugs
          dealing with multi-byte UTF-8, also many non-ASCII characters may not
          look like it at a glance and often aren't intentional.`,
      category: 'Stylistic Issues',
      recommended: true,
    },
    schema: [], // no options
  },
  create: function(context) {
    /* eslint-disable no-control-regex */
    const nonAsciiRegExp = new RegExp('([^\x20-\x7E\r\n\t]+)', 'g');
    /* eslint-enable no-control-regex */
    const sourceCode = context.getSourceCode();
    const sourceCodeText = sourceCode.getText();
    let regExResultArr = null;

    while ((regExResultArr = nonAsciiRegExp.exec(sourceCodeText)) != null) {
      const loc = sourceCode.getLocFromIndex
        ? sourceCode.getLocFromIndex(regExResultArr.index)
        : null;
      const node = sourceCode.getNodeByRangeIndex(regExResultArr.index);
      const disallowedCharCode = regExResultArr[0].charCodeAt(0);
      const replacementSuggestion =
        node && (node.type === 'Literal' && typeof node.value === 'string')
          ? ', use character escaping instead like \\u' +
            disallowedCharCode
              .toString(16)
              .toUpperCase()
              .padStart(4, '0')
          : '';
      context.report({
        loc,
        message:
          'Non-plain ASCII character disallowed' +
          replacementSuggestion +
          ' (characters are: https://our.intern.facebook.com/intern/unicode/string/' +
          encodeURIComponent(regExResultArr[0]) +
          '?taescaped=js)',
        node,
      });
    }
    return {};
  },
};
