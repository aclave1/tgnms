/**
 * Generated by `js1 upgrade www-shared`.
 * @generated SignedSource<<a4dbdd79abfb91d5998dab15034e561d>>
 *
* Copyright 2004-present Facebook. All Rights Reserved.
*
* This rule helps to prevent usage of generic flow types that provide no
* useful flow information. This includes `any`, `Object`, and `Function`.
* Prefer to use more clear type definitions in place of these.
* See rule handlers for edge cases and whitelists.
*/

'use strict';

var traverseTypeAnnotations = require('./traverseTypeAnnotations');

const ANY_BEFORE_IDENTIFIER_WHITELIST = [
  'Element',
  'ReactClass',
  'ReactElement',
];

const getErrorMessage = (type) =>
  `The \`${type}\` type is too generic and could lead to hard to debug ` +
  'errors. Please use only as a last resort.';

module.exports = function anyTypeAnnotationRule(context) {
  return traverseTypeAnnotations(node => {
    if (node.type === 'AnyTypeAnnotation') {
      const sourceCode = context.getSourceCode();

      // ignore ReactElement<any>, React.Element<any>, ReactClass<any>,
      // and Element<any>
      const tokensBeforeIdentifier = sourceCode.getTokensBefore(node, 2);
      if (
        tokensBeforeIdentifier.length === 2 &&
        ANY_BEFORE_IDENTIFIER_WHITELIST.includes(
          tokensBeforeIdentifier[0].value
        ) &&
        tokensBeforeIdentifier[1].value === '<'
      ) {
        return;
      }

      context.report({
        node,
        message: getErrorMessage('any'),
      });
    } else if (
      node.type === 'GenericTypeAnnotation' &&
      node.id && node.id.name &&
      (
        node.id.name === 'Object' ||
        node.id.name === 'Function'
      )
    ) {
      context.report({
        node,
        message: getErrorMessage(node.id.name),
      });
    }
  }, {
    ignoreTypesInFunctionAndClassDeclaration: true,
  });
};
