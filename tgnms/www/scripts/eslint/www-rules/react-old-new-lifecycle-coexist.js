/**
 * Generated by `js1 upgrade www-shared`.
 * @generated SignedSource<<bbeab1b084d90801973348a92f6954e0>>
 *
 * Copyright 2004-present Facebook. All Rights Reserved.
 * @format
 */

'use strict';

function getMethodName(node) {
  return node.key && node.key.name;
}

function isWillMountMethod(name) {
  return name === 'componentWillMount' || name === 'UNSAFE_componentWillMount';
}

function isWillUpdateMethod(name) {
  return (
    name === 'componentWillUpdate' || name === 'UNSAFE_componentWillUpdate'
  );
}

function isWillReceivePropsMethod(name) {
  return (
    name === 'componentWillReceiveProps' ||
    name === 'UNSAFE_componentWillReceiveProps'
  );
}

function isNewAPIMethod(name) {
  return (
    name === 'getDerivedStateFromProps' || name === 'getSnapshotBeforeUpdate'
  );
}

function getMethods(nodes, targetType) {
  let willMountMethod = null;
  let willUpdateMethod = null;
  let willReceivePropsMethod = null;
  let newAPIMethod = null;
  for (let p of nodes) {
    if (p.type === targetType) {
      let name = getMethodName(p);
      if (isWillMountMethod(name)) {
        willMountMethod = name;
      }
      if (isWillUpdateMethod(name)) {
        willUpdateMethod = name;
      }
      if (isWillReceivePropsMethod(name)) {
        willReceivePropsMethod = name;
      }
      if (isNewAPIMethod(name)) {
        newAPIMethod = name;
      }
    }
  }
  return {
    willMountMethod,
    willUpdateMethod,
    willReceivePropsMethod,
    newAPIMethod,
  };
}

function getMessage(
  newAPIMethod,
  willMountMethod,
  willUpdateMethod,
  willReceivePropsMethod,
) {
  return (
    'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
    `This component uses ${newAPIMethod} but also contains the following legacy lifecycles:` +
    `${willMountMethod !== null ? '\n' + willMountMethod : ''}` +
    `${willUpdateMethod !== null ? '\n' + willUpdateMethod : ''}` +
    `${
      willReceivePropsMethod !== null ? '\n' + willReceivePropsMethod : ''
    }\n\n` +
    'If new component APIs are defined, "unsafe" lifecycles won\'t be called.\n' +
    'https://fb.me/react-async-component-lifecycle-hooks\n'
  );
}

module.exports = function rule(context) {
  return {
    ObjectExpression(node) {
      let properties = node.properties;
      if (properties) {
        let {
          willMountMethod,
          willUpdateMethod,
          willReceivePropsMethod,
          newAPIMethod,
        } = getMethods(properties, 'Property');
        if (
          newAPIMethod !== null &&
          (willMountMethod !== null ||
            willUpdateMethod !== null ||
            willReceivePropsMethod !== null)
        ) {
          const message = getMessage(
            newAPIMethod,
            willMountMethod,
            willUpdateMethod,
            willReceivePropsMethod,
          );
          context.report({
            message,
            node,
          });
        }
      }
    },

    ClassBody(node) {
      const body = node.body;
      if (body) {
        let {
          willMountMethod,
          willUpdateMethod,
          willReceivePropsMethod,
          newAPIMethod,
        } = getMethods(body, 'MethodDefinition');

        if (
          newAPIMethod !== null &&
          (willMountMethod !== null ||
            willUpdateMethod !== null ||
            willReceivePropsMethod !== null)
        ) {
          const message = getMessage(
            newAPIMethod,
            willMountMethod,
            willUpdateMethod,
            willReceivePropsMethod,
          );
          context.report({
            message,
            node,
          });
        }
      }
    },
  };
};
