//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Topology_ttypes = require('./Topology_types');


var ttypes = module.exports = {};
ttypes.KeyUnit = {
  'NONE' : 0,
  'PERC' : 1,
  'BYTES_PER_SEC' : 2
};
ttypes.RestrictorType = {
  'NODE' : 1,
  'LINK' : 2
};
ttypes.TypeaheadType = {
  'KEYNAME' : 1,
  'NODENAME' : 3,
  'TOPOLOGYNAME' : 4
};
ttypes.LinkDirection = {
  'LINK_A' : 1,
  'LINK_Z' : 2
};
ttypes.StatsOutputFormat = {
  'POINTS' : 1,
  'TABLE' : 2,
  'RAW' : 3,
  'RAW_LINK' : 4,
  'RAW_NODE' : 5,
  'EVENT_LINK' : 10,
  'EVENT_NODE' : 11
};
ttypes.GraphAggregation = {
  'NONE' : 1,
  'LATEST' : 2,
  'AVG' : 10,
  'COUNT' : 15,
  'SUM' : 20,
  'TOP_AVG' : 30,
  'TOP_MIN' : 31,
  'TOP_MAX' : 32,
  'BOTTOM_AVG' : 40,
  'BOTTOM_MIN' : 41,
  'BOTTOM_MAX' : 42
};
var QueryRestrictor = module.exports.QueryRestrictor = function(args) {
  this.restrictorType = null;
  this.values = null;
  if (args) {
    if (args.restrictorType !== undefined && args.restrictorType !== null) {
      this.restrictorType = args.restrictorType;
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    }
  }
};
QueryRestrictor.prototype = {};
QueryRestrictor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.restrictorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.values = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.values.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryRestrictor.prototype.write = function(output) {
  output.writeStructBegin('QueryRestrictor');
  if (this.restrictorType !== null && this.restrictorType !== undefined) {
    output.writeFieldBegin('restrictorType', Thrift.Type.I32, 1);
    output.writeI32(this.restrictorType);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter7 in this.values)
    {
      if (this.values.hasOwnProperty(iter7))
      {
        iter7 = this.values[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TypeaheadRequest = module.exports.TypeaheadRequest = function(args) {
  this.topologyName = null;
  this.searchTerm = null;
  this.typeaheadType = 1;
  this.restrictors = null;
  this.debugLogToConsole = false;
  if (args) {
    if (args.topologyName !== undefined && args.topologyName !== null) {
      this.topologyName = args.topologyName;
    }
    if (args.searchTerm !== undefined && args.searchTerm !== null) {
      this.searchTerm = args.searchTerm;
    }
    if (args.typeaheadType !== undefined && args.typeaheadType !== null) {
      this.typeaheadType = args.typeaheadType;
    }
    if (args.restrictors !== undefined && args.restrictors !== null) {
      this.restrictors = Thrift.copyList(args.restrictors, [ttypes.QueryRestrictor]);
    }
    if (args.debugLogToConsole !== undefined && args.debugLogToConsole !== null) {
      this.debugLogToConsole = args.debugLogToConsole;
    }
  }
};
TypeaheadRequest.prototype = {};
TypeaheadRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.topologyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.searchTerm = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.typeaheadType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.restrictors = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.QueryRestrictor();
          elem14.read(input);
          this.restrictors.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1000:
      if (ftype == Thrift.Type.BOOL) {
        this.debugLogToConsole = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TypeaheadRequest.prototype.write = function(output) {
  output.writeStructBegin('TypeaheadRequest');
  if (this.topologyName !== null && this.topologyName !== undefined) {
    output.writeFieldBegin('topologyName', Thrift.Type.STRING, 1);
    output.writeString(this.topologyName);
    output.writeFieldEnd();
  }
  if (this.searchTerm !== null && this.searchTerm !== undefined) {
    output.writeFieldBegin('searchTerm', Thrift.Type.STRING, 2);
    output.writeString(this.searchTerm);
    output.writeFieldEnd();
  }
  if (this.typeaheadType !== null && this.typeaheadType !== undefined) {
    output.writeFieldBegin('typeaheadType', Thrift.Type.I32, 3);
    output.writeI32(this.typeaheadType);
    output.writeFieldEnd();
  }
  if (this.restrictors !== null && this.restrictors !== undefined) {
    output.writeFieldBegin('restrictors', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.restrictors.length);
    for (var iter15 in this.restrictors)
    {
      if (this.restrictors.hasOwnProperty(iter15))
      {
        iter15 = this.restrictors[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.debugLogToConsole !== null && this.debugLogToConsole !== undefined) {
    output.writeFieldBegin('debugLogToConsole', Thrift.Type.BOOL, 1000);
    output.writeBool(this.debugLogToConsole);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyMetaData = module.exports.KeyMetaData = function(args) {
  this.keyId = null;
  this.keyName = null;
  this.shortName = null;
  this.srcNodeMac = null;
  this.srcNodeName = null;
  this.peerNodeMac = null;
  this.linkName = null;
  this.linkDirection = null;
  this.unit = null;
  if (args) {
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
    if (args.keyName !== undefined && args.keyName !== null) {
      this.keyName = args.keyName;
    }
    if (args.shortName !== undefined && args.shortName !== null) {
      this.shortName = args.shortName;
    }
    if (args.srcNodeMac !== undefined && args.srcNodeMac !== null) {
      this.srcNodeMac = args.srcNodeMac;
    }
    if (args.srcNodeName !== undefined && args.srcNodeName !== null) {
      this.srcNodeName = args.srcNodeName;
    }
    if (args.peerNodeMac !== undefined && args.peerNodeMac !== null) {
      this.peerNodeMac = args.peerNodeMac;
    }
    if (args.linkName !== undefined && args.linkName !== null) {
      this.linkName = args.linkName;
    }
    if (args.linkDirection !== undefined && args.linkDirection !== null) {
      this.linkDirection = args.linkDirection;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
  }
};
KeyMetaData.prototype = {};
KeyMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.keyId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.keyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.shortName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.srcNodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.srcNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.peerNodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.linkName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.linkDirection = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.I32) {
        this.unit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyMetaData.prototype.write = function(output) {
  output.writeStructBegin('KeyMetaData');
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I64, 1);
    output.writeI64(this.keyId);
    output.writeFieldEnd();
  }
  if (this.keyName !== null && this.keyName !== undefined) {
    output.writeFieldBegin('keyName', Thrift.Type.STRING, 2);
    output.writeString(this.keyName);
    output.writeFieldEnd();
  }
  if (this.shortName !== null && this.shortName !== undefined) {
    output.writeFieldBegin('shortName', Thrift.Type.STRING, 3);
    output.writeString(this.shortName);
    output.writeFieldEnd();
  }
  if (this.srcNodeMac !== null && this.srcNodeMac !== undefined) {
    output.writeFieldBegin('srcNodeMac', Thrift.Type.STRING, 10);
    output.writeString(this.srcNodeMac);
    output.writeFieldEnd();
  }
  if (this.srcNodeName !== null && this.srcNodeName !== undefined) {
    output.writeFieldBegin('srcNodeName', Thrift.Type.STRING, 11);
    output.writeString(this.srcNodeName);
    output.writeFieldEnd();
  }
  if (this.peerNodeMac !== null && this.peerNodeMac !== undefined) {
    output.writeFieldBegin('peerNodeMac', Thrift.Type.STRING, 21);
    output.writeString(this.peerNodeMac);
    output.writeFieldEnd();
  }
  if (this.linkName !== null && this.linkName !== undefined) {
    output.writeFieldBegin('linkName', Thrift.Type.STRING, 30);
    output.writeString(this.linkName);
    output.writeFieldEnd();
  }
  if (this.linkDirection !== null && this.linkDirection !== undefined) {
    output.writeFieldBegin('linkDirection', Thrift.Type.I32, 31);
    output.writeI32(this.linkDirection);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I32, 100);
    output.writeI32(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TypeaheadResponse = module.exports.TypeaheadResponse = function(args) {
  this.results = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyMap(args.results, [Thrift.copyList, ttypes.KeyMetaData]);
    }
  }
};
TypeaheadResponse.prototype = {};
TypeaheadResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.results = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var key22 = null;
          var val23 = null;
          key22 = input.readString();
          var _size24 = 0;
          var _rtmp328;
          val23 = [];
          var _etype27 = 0;
          _rtmp328 = input.readListBegin();
          _etype27 = _rtmp328.etype;
          _size24 = _rtmp328.size;
          for (var _i29 = 0; _i29 < _size24; ++_i29)
          {
            var elem30 = null;
            elem30 = new ttypes.KeyMetaData();
            elem30.read(input);
            val23.push(elem30);
          }
          input.readListEnd();
          this.results[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TypeaheadResponse.prototype.write = function(output) {
  output.writeStructBegin('TypeaheadResponse');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.results));
    for (var kiter31 in this.results)
    {
      if (this.results.hasOwnProperty(kiter31))
      {
        var viter32 = this.results[kiter31];
        output.writeString(kiter31);
        output.writeListBegin(Thrift.Type.STRUCT, viter32.length);
        for (var iter33 in viter32)
        {
          if (viter32.hasOwnProperty(iter33))
          {
            iter33 = viter32[iter33];
            iter33.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryRequest = module.exports.QueryRequest = function(args) {
  this.topologyName = null;
  this.keyNames = null;
  this.aggregation = 1;
  this.maxResults = 10;
  this.maxDataPoints = 0;
  this.restrictors = null;
  this.outputFormat = 1;
  this.countPerSecond = 39;
  this.minAgo = null;
  this.startTsSec = null;
  this.endTsSec = null;
  this.dsIntervalSec = 30;
  this.debugLogToConsole = false;
  if (args) {
    if (args.topologyName !== undefined && args.topologyName !== null) {
      this.topologyName = args.topologyName;
    }
    if (args.keyNames !== undefined && args.keyNames !== null) {
      this.keyNames = Thrift.copyList(args.keyNames, [null]);
    }
    if (args.aggregation !== undefined && args.aggregation !== null) {
      this.aggregation = args.aggregation;
    }
    if (args.maxResults !== undefined && args.maxResults !== null) {
      this.maxResults = args.maxResults;
    }
    if (args.maxDataPoints !== undefined && args.maxDataPoints !== null) {
      this.maxDataPoints = args.maxDataPoints;
    }
    if (args.restrictors !== undefined && args.restrictors !== null) {
      this.restrictors = Thrift.copyList(args.restrictors, [ttypes.QueryRestrictor]);
    }
    if (args.outputFormat !== undefined && args.outputFormat !== null) {
      this.outputFormat = args.outputFormat;
    }
    if (args.countPerSecond !== undefined && args.countPerSecond !== null) {
      this.countPerSecond = args.countPerSecond;
    }
    if (args.minAgo !== undefined && args.minAgo !== null) {
      this.minAgo = args.minAgo;
    }
    if (args.startTsSec !== undefined && args.startTsSec !== null) {
      this.startTsSec = args.startTsSec;
    }
    if (args.endTsSec !== undefined && args.endTsSec !== null) {
      this.endTsSec = args.endTsSec;
    }
    if (args.dsIntervalSec !== undefined && args.dsIntervalSec !== null) {
      this.dsIntervalSec = args.dsIntervalSec;
    }
    if (args.debugLogToConsole !== undefined && args.debugLogToConsole !== null) {
      this.debugLogToConsole = args.debugLogToConsole;
    }
  }
};
QueryRequest.prototype = {};
QueryRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.topologyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.keyNames = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readString();
          this.keyNames.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.aggregation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maxResults = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maxDataPoints = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size41 = 0;
        var _rtmp345;
        this.restrictors = [];
        var _etype44 = 0;
        _rtmp345 = input.readListBegin();
        _etype44 = _rtmp345.etype;
        _size41 = _rtmp345.size;
        for (var _i46 = 0; _i46 < _size41; ++_i46)
        {
          var elem47 = null;
          elem47 = new ttypes.QueryRestrictor();
          elem47.read(input);
          this.restrictors.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.outputFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.DOUBLE) {
        this.countPerSecond = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.I32) {
        this.minAgo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.I64) {
        this.startTsSec = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 102:
      if (ftype == Thrift.Type.I64) {
        this.endTsSec = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 110:
      if (ftype == Thrift.Type.I32) {
        this.dsIntervalSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1000:
      if (ftype == Thrift.Type.BOOL) {
        this.debugLogToConsole = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryRequest.prototype.write = function(output) {
  output.writeStructBegin('QueryRequest');
  if (this.topologyName !== null && this.topologyName !== undefined) {
    output.writeFieldBegin('topologyName', Thrift.Type.STRING, 1);
    output.writeString(this.topologyName);
    output.writeFieldEnd();
  }
  if (this.keyNames !== null && this.keyNames !== undefined) {
    output.writeFieldBegin('keyNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.keyNames.length);
    for (var iter48 in this.keyNames)
    {
      if (this.keyNames.hasOwnProperty(iter48))
      {
        iter48 = this.keyNames[iter48];
        output.writeString(iter48);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.aggregation !== null && this.aggregation !== undefined) {
    output.writeFieldBegin('aggregation', Thrift.Type.I32, 3);
    output.writeI32(this.aggregation);
    output.writeFieldEnd();
  }
  if (this.maxResults !== null && this.maxResults !== undefined) {
    output.writeFieldBegin('maxResults', Thrift.Type.I32, 4);
    output.writeI32(this.maxResults);
    output.writeFieldEnd();
  }
  if (this.maxDataPoints !== null && this.maxDataPoints !== undefined) {
    output.writeFieldBegin('maxDataPoints', Thrift.Type.I32, 5);
    output.writeI32(this.maxDataPoints);
    output.writeFieldEnd();
  }
  if (this.restrictors !== null && this.restrictors !== undefined) {
    output.writeFieldBegin('restrictors', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.restrictors.length);
    for (var iter49 in this.restrictors)
    {
      if (this.restrictors.hasOwnProperty(iter49))
      {
        iter49 = this.restrictors[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputFormat !== null && this.outputFormat !== undefined) {
    output.writeFieldBegin('outputFormat', Thrift.Type.I32, 20);
    output.writeI32(this.outputFormat);
    output.writeFieldEnd();
  }
  if (this.countPerSecond !== null && this.countPerSecond !== undefined) {
    output.writeFieldBegin('countPerSecond', Thrift.Type.DOUBLE, 21);
    output.writeDouble(this.countPerSecond);
    output.writeFieldEnd();
  }
  if (this.minAgo !== null && this.minAgo !== undefined) {
    output.writeFieldBegin('minAgo', Thrift.Type.I32, 100);
    output.writeI32(this.minAgo);
    output.writeFieldEnd();
  }
  if (this.startTsSec !== null && this.startTsSec !== undefined) {
    output.writeFieldBegin('startTsSec', Thrift.Type.I64, 101);
    output.writeI64(this.startTsSec);
    output.writeFieldEnd();
  }
  if (this.endTsSec !== null && this.endTsSec !== undefined) {
    output.writeFieldBegin('endTsSec', Thrift.Type.I64, 102);
    output.writeI64(this.endTsSec);
    output.writeFieldEnd();
  }
  if (this.dsIntervalSec !== null && this.dsIntervalSec !== undefined) {
    output.writeFieldBegin('dsIntervalSec', Thrift.Type.I32, 110);
    output.writeI32(this.dsIntervalSec);
    output.writeFieldEnd();
  }
  if (this.debugLogToConsole !== null && this.debugLogToConsole !== undefined) {
    output.writeFieldBegin('debugLogToConsole', Thrift.Type.BOOL, 1000);
    output.writeBool(this.debugLogToConsole);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

