//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Lsdb_ttypes = require('./Lsdb_types')
var IpPrefix_ttypes = require('./IpPrefix_types')
var Monitor_ttypes = require('./Monitor_types')


var ttypes = module.exports = {};
ttypes.AggrMessageType = {
  'GET_STATUS_DUMP_DEPRECATED' : 101,
  'GET_STATUS_REPORT' : 103,
  'GET_ROUTING_REPORT' : 104,
  'STATUS_DUMP_DEPRECATED' : 201,
  'ROUTING_ADJ' : 202,
  'STATUS_REPORT_DEPRECATED' : 401,
  'STATUS_REPORT' : 403,
  'ROUTING_REPORT' : 404,
  'STATS_REPORT' : 402,
  'SYSLOG_REPORT' : 451,
  'GET_ALERTS_CONFIG' : 501,
  'GET_ALERTS_CONFIG_RESP' : 502,
  'SET_ALERTS_CONFIG' : 503,
  'SET_ALERTS_CONFIG_RESP' : 504,
  'START_IPERF' : 601,
  'STOP_IPERF' : 602,
  'GET_IPERF_STATUS' : 603,
  'START_IPERF_SERVER' : 611,
  'START_IPERF_CLIENT' : 612,
  'START_IPERF_SERVER_RESP' : 621,
  'IPERF_STATUS_REPORT' : 622,
  'AGGR_ACK' : 1001
};
ttypes.AggrAlertComparator = {
  'ALERT_GT' : 0,
  'ALERT_GTE' : 1,
  'ALERT_LT' : 2,
  'ALERT_LTE' : 3
};
ttypes.AggrAlertLevel = {
  'ALERT_INFO' : 0,
  'ALERT_WARNING' : 1,
  'ALERT_CRITICAL' : 2
};
ttypes.AggrIperfTransportProtocol = {
  'TCP' : 6,
  'UDP' : 17
};
AggrGetStatusDump = module.exports.AggrGetStatusDump = function(args) {
};
AggrGetStatusDump.prototype = {};
AggrGetStatusDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrGetStatusDump.prototype.write = function(output) {
  output.writeStructBegin('AggrGetStatusDump');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStatusDump_Deprecated = module.exports.AggrStatusDump_Deprecated = function(args) {
  this.adjacencyMap = null;
  this.statusReports = null;
  this.version = null;
  if (args) {
    if (args.adjacencyMap !== undefined && args.adjacencyMap !== null) {
      this.adjacencyMap = Thrift.copyMap(args.adjacencyMap, [Lsdb_ttypes.AdjacencyDatabase]);
    }
    if (args.statusReports !== undefined && args.statusReports !== null) {
      this.statusReports = Thrift.copyMap(args.statusReports, [null]);
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
AggrStatusDump_Deprecated.prototype = {};
AggrStatusDump_Deprecated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.adjacencyMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new Lsdb_ttypes.AdjacencyDatabase();
          val7.read(input);
          this.adjacencyMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.statusReports = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = new ttypes.AggrStatusReport_Deprecated();
          val15.read(input);
          this.statusReports[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStatusDump_Deprecated.prototype.write = function(output) {
  output.writeStructBegin('AggrStatusDump_Deprecated');
  if (this.adjacencyMap !== null && this.adjacencyMap !== undefined) {
    output.writeFieldBegin('adjacencyMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.adjacencyMap));
    for (var kiter16 in this.adjacencyMap)
    {
      if (this.adjacencyMap.hasOwnProperty(kiter16))
      {
        var viter17 = this.adjacencyMap[kiter16];
        output.writeString(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.statusReports !== null && this.statusReports !== undefined) {
    output.writeFieldBegin('statusReports', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.statusReports));
    for (var kiter18 in this.statusReports)
    {
      if (this.statusReports.hasOwnProperty(kiter18))
      {
        var viter19 = this.statusReports[kiter18];
        output.writeString(kiter18);
        viter19.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrGetStatusReport = module.exports.AggrGetStatusReport = function(args) {
};
AggrGetStatusReport.prototype = {};
AggrGetStatusReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrGetStatusReport.prototype.write = function(output) {
  output.writeStructBegin('AggrGetStatusReport');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStatusReport = module.exports.AggrStatusReport = function(args) {
  this.statusReports = null;
  if (args) {
    if (args.statusReports !== undefined && args.statusReports !== null) {
      this.statusReports = Thrift.copyMap(args.statusReports, [null]);
    }
  }
};
AggrStatusReport.prototype = {};
AggrStatusReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size20 = 0;
        var _rtmp324;
        this.statusReports = {};
        var _ktype21 = 0;
        var _vtype22 = 0;
        _rtmp324 = input.readMapBegin();
        _ktype21 = _rtmp324.ktype;
        _vtype22 = _rtmp324.vtype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var key26 = null;
          var val27 = null;
          key26 = input.readString();
          val27 = new ttypes.AgentStatusReport();
          val27.read(input);
          this.statusReports[key26] = val27;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStatusReport.prototype.write = function(output) {
  output.writeStructBegin('AggrStatusReport');
  if (this.statusReports !== null && this.statusReports !== undefined) {
    output.writeFieldBegin('statusReports', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.statusReports));
    for (var kiter28 in this.statusReports)
    {
      if (this.statusReports.hasOwnProperty(kiter28))
      {
        var viter29 = this.statusReports[kiter28];
        output.writeString(kiter28);
        viter29.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentStatusReport = module.exports.AgentStatusReport = function(args) {
  this.timeStamp = null;
  this.ipv6Address = null;
  if (args) {
    if (args.timeStamp !== undefined && args.timeStamp !== null) {
      this.timeStamp = args.timeStamp;
    }
    if (args.ipv6Address !== undefined && args.ipv6Address !== null) {
      this.ipv6Address = args.ipv6Address;
    }
  }
};
AgentStatusReport.prototype = {};
AgentStatusReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipv6Address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentStatusReport.prototype.write = function(output) {
  output.writeStructBegin('AgentStatusReport');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.ipv6Address !== null && this.ipv6Address !== undefined) {
    output.writeFieldBegin('ipv6Address', Thrift.Type.STRING, 2);
    output.writeString(this.ipv6Address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStatusReport_Deprecated = module.exports.AggrStatusReport_Deprecated = function(args) {
  this.timeStamp = null;
  this.ipv6Address = null;
  this.routes = null;
  this.linkLocals = null;
  if (args) {
    if (args.timeStamp !== undefined && args.timeStamp !== null) {
      this.timeStamp = args.timeStamp;
    }
    if (args.ipv6Address !== undefined && args.ipv6Address !== null) {
      this.ipv6Address = args.ipv6Address;
    }
    if (args.routes !== undefined && args.routes !== null) {
      this.routes = Thrift.copyList(args.routes, [IpPrefix_ttypes.UnicastRoute]);
    }
    if (args.linkLocals !== undefined && args.linkLocals !== null) {
      this.linkLocals = Thrift.copyMap(args.linkLocals, [null]);
    }
  }
};
AggrStatusReport_Deprecated.prototype = {};
AggrStatusReport_Deprecated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipv6Address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.routes = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = new IpPrefix_ttypes.UnicastRoute();
          elem36.read(input);
          this.routes.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size37 = 0;
        var _rtmp341;
        this.linkLocals = {};
        var _ktype38 = 0;
        var _vtype39 = 0;
        _rtmp341 = input.readMapBegin();
        _ktype38 = _rtmp341.ktype;
        _vtype39 = _rtmp341.vtype;
        _size37 = _rtmp341.size;
        for (var _i42 = 0; _i42 < _size37; ++_i42)
        {
          var key43 = null;
          var val44 = null;
          key43 = input.readString();
          val44 = input.readString();
          this.linkLocals[key43] = val44;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStatusReport_Deprecated.prototype.write = function(output) {
  output.writeStructBegin('AggrStatusReport_Deprecated');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.ipv6Address !== null && this.ipv6Address !== undefined) {
    output.writeFieldBegin('ipv6Address', Thrift.Type.STRING, 2);
    output.writeString(this.ipv6Address);
    output.writeFieldEnd();
  }
  if (this.routes !== null && this.routes !== undefined) {
    output.writeFieldBegin('routes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.routes.length);
    for (var iter45 in this.routes)
    {
      if (this.routes.hasOwnProperty(iter45))
      {
        iter45 = this.routes[iter45];
        iter45.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkLocals !== null && this.linkLocals !== undefined) {
    output.writeFieldBegin('linkLocals', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.linkLocals));
    for (var kiter46 in this.linkLocals)
    {
      if (this.linkLocals.hasOwnProperty(kiter46))
      {
        var viter47 = this.linkLocals[kiter46];
        output.writeString(kiter46);
        output.writeString(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrGetRoutingReport = module.exports.AggrGetRoutingReport = function(args) {
};
AggrGetRoutingReport.prototype = {};
AggrGetRoutingReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrGetRoutingReport.prototype.write = function(output) {
  output.writeStructBegin('AggrGetRoutingReport');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrRoutingReport = module.exports.AggrRoutingReport = function(args) {
  this.adjacencyMap = null;
  this.routingReports = null;
  if (args) {
    if (args.adjacencyMap !== undefined && args.adjacencyMap !== null) {
      this.adjacencyMap = Thrift.copyMap(args.adjacencyMap, [Lsdb_ttypes.AdjacencyDatabase]);
    }
    if (args.routingReports !== undefined && args.routingReports !== null) {
      this.routingReports = Thrift.copyMap(args.routingReports, [null]);
    }
  }
};
AggrRoutingReport.prototype = {};
AggrRoutingReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.adjacencyMap = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var key54 = null;
          var val55 = null;
          key54 = input.readString();
          val55 = new Lsdb_ttypes.AdjacencyDatabase();
          val55.read(input);
          this.adjacencyMap[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size56 = 0;
        var _rtmp360;
        this.routingReports = {};
        var _ktype57 = 0;
        var _vtype58 = 0;
        _rtmp360 = input.readMapBegin();
        _ktype57 = _rtmp360.ktype;
        _vtype58 = _rtmp360.vtype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var key62 = null;
          var val63 = null;
          key62 = input.readString();
          val63 = new ttypes.AgentRoutingReport();
          val63.read(input);
          this.routingReports[key62] = val63;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrRoutingReport.prototype.write = function(output) {
  output.writeStructBegin('AggrRoutingReport');
  if (this.adjacencyMap !== null && this.adjacencyMap !== undefined) {
    output.writeFieldBegin('adjacencyMap', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.adjacencyMap));
    for (var kiter64 in this.adjacencyMap)
    {
      if (this.adjacencyMap.hasOwnProperty(kiter64))
      {
        var viter65 = this.adjacencyMap[kiter64];
        output.writeString(kiter64);
        viter65.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.routingReports !== null && this.routingReports !== undefined) {
    output.writeFieldBegin('routingReports', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.routingReports));
    for (var kiter66 in this.routingReports)
    {
      if (this.routingReports.hasOwnProperty(kiter66))
      {
        var viter67 = this.routingReports[kiter66];
        output.writeString(kiter66);
        viter67.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AgentRoutingReport = module.exports.AgentRoutingReport = function(args) {
  this.routes = null;
  this.linkLocals = null;
  if (args) {
    if (args.routes !== undefined && args.routes !== null) {
      this.routes = Thrift.copyList(args.routes, [IpPrefix_ttypes.UnicastRoute]);
    }
    if (args.linkLocals !== undefined && args.linkLocals !== null) {
      this.linkLocals = Thrift.copyMap(args.linkLocals, [null]);
    }
  }
};
AgentRoutingReport.prototype = {};
AgentRoutingReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.routes = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new IpPrefix_ttypes.UnicastRoute();
          elem74.read(input);
          this.routes.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size75 = 0;
        var _rtmp379;
        this.linkLocals = {};
        var _ktype76 = 0;
        var _vtype77 = 0;
        _rtmp379 = input.readMapBegin();
        _ktype76 = _rtmp379.ktype;
        _vtype77 = _rtmp379.vtype;
        _size75 = _rtmp379.size;
        for (var _i80 = 0; _i80 < _size75; ++_i80)
        {
          var key81 = null;
          var val82 = null;
          key81 = input.readString();
          val82 = input.readString();
          this.linkLocals[key81] = val82;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgentRoutingReport.prototype.write = function(output) {
  output.writeStructBegin('AgentRoutingReport');
  if (this.routes !== null && this.routes !== undefined) {
    output.writeFieldBegin('routes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.routes.length);
    for (var iter83 in this.routes)
    {
      if (this.routes.hasOwnProperty(iter83))
      {
        iter83 = this.routes[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkLocals !== null && this.linkLocals !== undefined) {
    output.writeFieldBegin('linkLocals', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.linkLocals));
    for (var kiter84 in this.linkLocals)
    {
      if (this.linkLocals.hasOwnProperty(kiter84))
      {
        var viter85 = this.linkLocals[kiter84];
        output.writeString(kiter84);
        output.writeString(viter85);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStat = module.exports.AggrStat = function(args) {
  this.key = null;
  this.timestamp = null;
  this.value = null;
  this.isCounter = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.isCounter !== undefined && args.isCounter !== null) {
      this.isCounter = args.isCounter;
    }
  }
};
AggrStat.prototype = {};
AggrStat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isCounter = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStat.prototype.write = function(output) {
  output.writeStructBegin('AggrStat');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.isCounter !== null && this.isCounter !== undefined) {
    output.writeFieldBegin('isCounter', Thrift.Type.BOOL, 4);
    output.writeBool(this.isCounter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStatsReport = module.exports.AggrStatsReport = function(args) {
  this.stats = null;
  this.events = null;
  if (args) {
    if (args.stats !== undefined && args.stats !== null) {
      this.stats = Thrift.copyList(args.stats, [ttypes.AggrStat]);
    }
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [Monitor_ttypes.EventLog]);
    }
  }
};
AggrStatsReport.prototype = {};
AggrStatsReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.stats = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new ttypes.AggrStat();
          elem92.read(input);
          this.stats.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size93 = 0;
        var _rtmp397;
        this.events = [];
        var _etype96 = 0;
        _rtmp397 = input.readListBegin();
        _etype96 = _rtmp397.etype;
        _size93 = _rtmp397.size;
        for (var _i98 = 0; _i98 < _size93; ++_i98)
        {
          var elem99 = null;
          elem99 = new Monitor_ttypes.EventLog();
          elem99.read(input);
          this.events.push(elem99);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStatsReport.prototype.write = function(output) {
  output.writeStructBegin('AggrStatsReport');
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter100 in this.stats)
    {
      if (this.stats.hasOwnProperty(iter100))
      {
        iter100 = this.stats[iter100];
        iter100.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter101 in this.events)
    {
      if (this.events.hasOwnProperty(iter101))
      {
        iter101 = this.events[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrAlertConf = module.exports.AggrAlertConf = function(args) {
  this.id = null;
  this.key = null;
  this.threshold = null;
  this.comp = null;
  this.level = null;
  this.nodeMac = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.threshold !== undefined && args.threshold !== null) {
      this.threshold = args.threshold;
    }
    if (args.comp !== undefined && args.comp !== null) {
      this.comp = args.comp;
    }
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    }
    if (args.nodeMac !== undefined && args.nodeMac !== null) {
      this.nodeMac = args.nodeMac;
    }
  }
};
AggrAlertConf.prototype = {};
AggrAlertConf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.threshold = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.comp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrAlertConf.prototype.write = function(output) {
  output.writeStructBegin('AggrAlertConf');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.threshold !== null && this.threshold !== undefined) {
    output.writeFieldBegin('threshold', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.threshold);
    output.writeFieldEnd();
  }
  if (this.comp !== null && this.comp !== undefined) {
    output.writeFieldBegin('comp', Thrift.Type.I32, 4);
    output.writeI32(this.comp);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 5);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 6);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrAlertConfList = module.exports.AggrAlertConfList = function(args) {
  this.alerts = null;
  if (args) {
    if (args.alerts !== undefined && args.alerts !== null) {
      this.alerts = Thrift.copyList(args.alerts, [ttypes.AggrAlertConf]);
    }
  }
};
AggrAlertConfList.prototype = {};
AggrAlertConfList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.alerts = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = new ttypes.AggrAlertConf();
          elem108.read(input);
          this.alerts.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrAlertConfList.prototype.write = function(output) {
  output.writeStructBegin('AggrAlertConfList');
  if (this.alerts !== null && this.alerts !== undefined) {
    output.writeFieldBegin('alerts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.alerts.length);
    for (var iter109 in this.alerts)
    {
      if (this.alerts.hasOwnProperty(iter109))
      {
        iter109 = this.alerts[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrSetAlertsConfigResp = module.exports.AggrSetAlertsConfigResp = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
AggrSetAlertsConfigResp.prototype = {};
AggrSetAlertsConfigResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrSetAlertsConfigResp.prototype.write = function(output) {
  output.writeStructBegin('AggrSetAlertsConfigResp');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrSyslog = module.exports.AggrSyslog = function(args) {
  this.timestamp = null;
  this.index = null;
  this.log = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.log !== undefined && args.log !== null) {
      this.log = args.log;
    }
  }
};
AggrSyslog.prototype = {};
AggrSyslog.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.log = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrSyslog.prototype.write = function(output) {
  output.writeStructBegin('AggrSyslog');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 2);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.log !== null && this.log !== undefined) {
    output.writeFieldBegin('log', Thrift.Type.STRING, 3);
    output.writeString(this.log);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrSyslogReport = module.exports.AggrSyslogReport = function(args) {
  this.macAddr = null;
  this.syslogs = null;
  if (args) {
    if (args.macAddr !== undefined && args.macAddr !== null) {
      this.macAddr = args.macAddr;
    }
    if (args.syslogs !== undefined && args.syslogs !== null) {
      this.syslogs = Thrift.copyList(args.syslogs, [ttypes.AggrSyslog]);
    }
  }
};
AggrSyslogReport.prototype = {};
AggrSyslogReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.macAddr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.syslogs = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = new ttypes.AggrSyslog();
          elem116.read(input);
          this.syslogs.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrSyslogReport.prototype.write = function(output) {
  output.writeStructBegin('AggrSyslogReport');
  if (this.macAddr !== null && this.macAddr !== undefined) {
    output.writeFieldBegin('macAddr', Thrift.Type.STRING, 1);
    output.writeString(this.macAddr);
    output.writeFieldEnd();
  }
  if (this.syslogs !== null && this.syslogs !== undefined) {
    output.writeFieldBegin('syslogs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.syslogs.length);
    for (var iter117 in this.syslogs)
    {
      if (this.syslogs.hasOwnProperty(iter117))
      {
        iter117 = this.syslogs[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStartIperf = module.exports.AggrStartIperf = function(args) {
  this.srcNodeId = null;
  this.srcNodeIpv6 = null;
  this.dstNodeId = null;
  this.dstNodeIpv6 = null;
  this.bitrate = null;
  this.timeSec = null;
  this.protocol = null;
  if (args) {
    if (args.srcNodeId !== undefined && args.srcNodeId !== null) {
      this.srcNodeId = args.srcNodeId;
    }
    if (args.srcNodeIpv6 !== undefined && args.srcNodeIpv6 !== null) {
      this.srcNodeIpv6 = args.srcNodeIpv6;
    }
    if (args.dstNodeId !== undefined && args.dstNodeId !== null) {
      this.dstNodeId = args.dstNodeId;
    }
    if (args.dstNodeIpv6 !== undefined && args.dstNodeIpv6 !== null) {
      this.dstNodeIpv6 = args.dstNodeIpv6;
    }
    if (args.bitrate !== undefined && args.bitrate !== null) {
      this.bitrate = args.bitrate;
    }
    if (args.timeSec !== undefined && args.timeSec !== null) {
      this.timeSec = args.timeSec;
    }
    if (args.protocol !== undefined && args.protocol !== null) {
      this.protocol = args.protocol;
    }
  }
};
AggrStartIperf.prototype = {};
AggrStartIperf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.srcNodeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.srcNodeIpv6 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dstNodeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dstNodeIpv6 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.bitrate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.timeSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStartIperf.prototype.write = function(output) {
  output.writeStructBegin('AggrStartIperf');
  if (this.srcNodeId !== null && this.srcNodeId !== undefined) {
    output.writeFieldBegin('srcNodeId', Thrift.Type.STRING, 1);
    output.writeString(this.srcNodeId);
    output.writeFieldEnd();
  }
  if (this.srcNodeIpv6 !== null && this.srcNodeIpv6 !== undefined) {
    output.writeFieldBegin('srcNodeIpv6', Thrift.Type.STRING, 2);
    output.writeString(this.srcNodeIpv6);
    output.writeFieldEnd();
  }
  if (this.dstNodeId !== null && this.dstNodeId !== undefined) {
    output.writeFieldBegin('dstNodeId', Thrift.Type.STRING, 3);
    output.writeString(this.dstNodeId);
    output.writeFieldEnd();
  }
  if (this.dstNodeIpv6 !== null && this.dstNodeIpv6 !== undefined) {
    output.writeFieldBegin('dstNodeIpv6', Thrift.Type.STRING, 4);
    output.writeString(this.dstNodeIpv6);
    output.writeFieldEnd();
  }
  if (this.bitrate !== null && this.bitrate !== undefined) {
    output.writeFieldBegin('bitrate', Thrift.Type.I64, 5);
    output.writeI64(this.bitrate);
    output.writeFieldEnd();
  }
  if (this.timeSec !== null && this.timeSec !== undefined) {
    output.writeFieldBegin('timeSec', Thrift.Type.I32, 6);
    output.writeI32(this.timeSec);
    output.writeFieldEnd();
  }
  if (this.protocol !== null && this.protocol !== undefined) {
    output.writeFieldBegin('protocol', Thrift.Type.I32, 7);
    output.writeI32(this.protocol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStartAgentIperf = module.exports.AggrStartAgentIperf = function(args) {
  this.iperfConfig = null;
  this.serverPort = 0;
  if (args) {
    if (args.iperfConfig !== undefined && args.iperfConfig !== null) {
      this.iperfConfig = new ttypes.AggrStartIperf(args.iperfConfig);
    }
    if (args.serverPort !== undefined && args.serverPort !== null) {
      this.serverPort = args.serverPort;
    }
  }
};
AggrStartAgentIperf.prototype = {};
AggrStartAgentIperf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.iperfConfig = new ttypes.AggrStartIperf();
        this.iperfConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.serverPort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStartAgentIperf.prototype.write = function(output) {
  output.writeStructBegin('AggrStartAgentIperf');
  if (this.iperfConfig !== null && this.iperfConfig !== undefined) {
    output.writeFieldBegin('iperfConfig', Thrift.Type.STRUCT, 1);
    this.iperfConfig.write(output);
    output.writeFieldEnd();
  }
  if (this.serverPort !== null && this.serverPort !== undefined) {
    output.writeFieldBegin('serverPort', Thrift.Type.I32, 2);
    output.writeI32(this.serverPort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStopIperf = module.exports.AggrStopIperf = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined && args.nodeId !== null) {
      this.nodeId = args.nodeId;
    }
  }
};
AggrStopIperf.prototype = {};
AggrStopIperf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStopIperf.prototype.write = function(output) {
  output.writeStructBegin('AggrStopIperf');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.STRING, 1);
    output.writeString(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrStopAgentIperf = module.exports.AggrStopAgentIperf = function(args) {
};
AggrStopAgentIperf.prototype = {};
AggrStopAgentIperf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrStopAgentIperf.prototype.write = function(output) {
  output.writeStructBegin('AggrStopAgentIperf');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrGetIperfStatus = module.exports.AggrGetIperfStatus = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined && args.nodeId !== null) {
      this.nodeId = args.nodeId;
    }
  }
};
AggrGetIperfStatus.prototype = {};
AggrGetIperfStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrGetIperfStatus.prototype.write = function(output) {
  output.writeStructBegin('AggrGetIperfStatus');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.STRING, 1);
    output.writeString(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrIperfStatusReport = module.exports.AggrIperfStatusReport = function(args) {
  this.clients = null;
  this.servers = null;
  if (args) {
    if (args.clients !== undefined && args.clients !== null) {
      this.clients = Thrift.copyMap(args.clients, [ttypes.AggrStartAgentIperf]);
    }
    if (args.servers !== undefined && args.servers !== null) {
      this.servers = Thrift.copyMap(args.servers, [ttypes.AggrStartAgentIperf]);
    }
  }
};
AggrIperfStatusReport.prototype = {};
AggrIperfStatusReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size118 = 0;
        var _rtmp3122;
        this.clients = {};
        var _ktype119 = 0;
        var _vtype120 = 0;
        _rtmp3122 = input.readMapBegin();
        _ktype119 = _rtmp3122.ktype;
        _vtype120 = _rtmp3122.vtype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var key124 = null;
          var val125 = null;
          key124 = input.readI32();
          val125 = new ttypes.AggrStartAgentIperf();
          val125.read(input);
          this.clients[key124] = val125;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size126 = 0;
        var _rtmp3130;
        this.servers = {};
        var _ktype127 = 0;
        var _vtype128 = 0;
        _rtmp3130 = input.readMapBegin();
        _ktype127 = _rtmp3130.ktype;
        _vtype128 = _rtmp3130.vtype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var key132 = null;
          var val133 = null;
          key132 = input.readI32();
          val133 = new ttypes.AggrStartAgentIperf();
          val133.read(input);
          this.servers[key132] = val133;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrIperfStatusReport.prototype.write = function(output) {
  output.writeStructBegin('AggrIperfStatusReport');
  if (this.clients !== null && this.clients !== undefined) {
    output.writeFieldBegin('clients', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.clients));
    for (var kiter134 in this.clients)
    {
      if (this.clients.hasOwnProperty(kiter134))
      {
        var viter135 = this.clients[kiter134];
        output.writeI32(kiter134);
        viter135.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.servers !== null && this.servers !== undefined) {
    output.writeFieldBegin('servers', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.servers));
    for (var kiter136 in this.servers)
    {
      if (this.servers.hasOwnProperty(kiter136))
      {
        var viter137 = this.servers[kiter136];
        output.writeI32(kiter136);
        viter137.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrMessage = module.exports.AggrMessage = function(args) {
  this.mType = null;
  this.value = null;
  if (args) {
    if (args.mType !== undefined && args.mType !== null) {
      this.mType = args.mType;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
AggrMessage.prototype = {};
AggrMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.mType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrMessage.prototype.write = function(output) {
  output.writeStructBegin('AggrMessage');
  if (this.mType !== null && this.mType !== undefined) {
    output.writeFieldBegin('mType', Thrift.Type.I32, 1);
    output.writeI32(this.mType);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AggrAck = module.exports.AggrAck = function(args) {
  this.success = null;
  this.message = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
AggrAck.prototype = {};
AggrAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AggrAck.prototype.write = function(output) {
  output.writeStructBegin('AggrAck');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

