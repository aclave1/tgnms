/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "NetworkConfig_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_NetworkConfig_topology_struct_setter>
 ::facebook::terragraph::thrift::Topology& NetworkConfig::set_topology(T_NetworkConfig_topology_struct_setter&& topology_) {
  topology = std::forward<T_NetworkConfig_topology_struct_setter>(topology_);
  __isset.topology = true;
  return topology;
}

template <class Protocol_>
uint32_t NetworkConfig::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "topology") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "latitude") {
        fid = 10;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "longitude") {
        fid = 11;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "zoom_level") {
        fid = 12;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "controller_ip") {
        fid = 100;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Topology>::read(iprot, &this->topology);
          this->__isset.topology = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->zoom_level);
          this->__isset.zoom_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 100:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->controller_ip);
          this->__isset.controller_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t NetworkConfig::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NetworkConfig");
  xfer += prot_->serializedFieldSize("topology", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Topology>::serializedSize(prot_, &this->topology);
  xfer += prot_->serializedFieldSize("latitude", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->latitude);
  xfer += prot_->serializedFieldSize("longitude", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->serializedSizeDouble(this->longitude);
  xfer += prot_->serializedFieldSize("zoom_level", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->zoom_level);
  xfer += prot_->serializedFieldSize("controller_ip", apache::thrift::protocol::T_STRING, 100);
  xfer += prot_->serializedSizeString(this->controller_ip);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NetworkConfig::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NetworkConfig");
  xfer += prot_->serializedFieldSize("topology", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Topology>::serializedSizeZC(prot_, &this->topology);
  xfer += prot_->serializedFieldSize("latitude", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->latitude);
  xfer += prot_->serializedFieldSize("longitude", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->serializedSizeDouble(this->longitude);
  xfer += prot_->serializedFieldSize("zoom_level", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->zoom_level);
  xfer += prot_->serializedFieldSize("controller_ip", apache::thrift::protocol::T_STRING, 100);
  xfer += prot_->serializedSizeString(this->controller_ip);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NetworkConfig::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NetworkConfig");
  xfer += prot_->writeFieldBegin("topology", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Topology>::write(prot_, &this->topology);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("latitude", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->latitude);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("longitude", apache::thrift::protocol::T_DOUBLE, 11);
  xfer += prot_->writeDouble(this->longitude);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("zoom_level", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->zoom_level);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("controller_ip", apache::thrift::protocol::T_STRING, 100);
  xfer += prot_->writeString(this->controller_ip);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_NetworkConfigs_topologies_struct_setter>
std::vector< ::facebook::terragraph::thrift::NetworkConfig>& NetworkConfigs::set_topologies(T_NetworkConfigs_topologies_struct_setter&& topologies_) {
  topologies = std::forward<T_NetworkConfigs_topologies_struct_setter>(topologies_);
  __isset.topologies = true;
  return topologies;
}

template <class Protocol_>
uint32_t NetworkConfigs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "topologies") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->topologies = std::vector< ::facebook::terragraph::thrift::NetworkConfig>();
          uint32_t _size0;
          apache::thrift::protocol::TType _etype3;
          xfer += iprot->readListBegin(_etype3, _size0);
          uint32_t _i4;
          if (_size0 == std::numeric_limits<uint32_t>::max()) {
            for (_i4 = 0; iprot->peekList(); _i4++) {
              this->topologies.resize(_i4 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NetworkConfig>::read(iprot, &this->topologies[_i4]);
            }
          }
          else {
            this->topologies.resize(_size0);
            for (_i4 = 0; _i4 < _size0; ++_i4) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NetworkConfig>::read(iprot, &this->topologies[_i4]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.topologies = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t NetworkConfigs::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NetworkConfigs");
  xfer += prot_->serializedFieldSize("topologies", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->topologies.size());
  for (auto _iter5 = this->topologies.begin(); _iter5 != this->topologies.end(); ++_iter5) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NetworkConfig>::serializedSize(prot_, &(*_iter5));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NetworkConfigs::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NetworkConfigs");
  xfer += prot_->serializedFieldSize("topologies", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->topologies.size());
  for (auto _iter6 = this->topologies.begin(); _iter6 != this->topologies.end(); ++_iter6) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NetworkConfig>::serializedSizeZC(prot_, &(*_iter6));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NetworkConfigs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NetworkConfigs");
  xfer += prot_->writeFieldBegin("topologies", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->topologies.size());
  for (auto _iter7 = this->topologies.begin(); _iter7 != this->topologies.end(); ++_iter7) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NetworkConfig>::write(prot_, &(*_iter7));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
