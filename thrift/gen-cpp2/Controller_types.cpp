/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Controller_types.h"

#include "Controller_types.tcc"


#include <algorithm>

namespace facebook { namespace terragraph { namespace thrift {

const typename apache::thrift::detail::TEnumMapFactory<MessageType, MessageType>::ValuesToNamesMapType _MessageType_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<MessageType, MessageType>::makeValuesToNamesMap();
const typename apache::thrift::detail::TEnumMapFactory<MessageType, MessageType>::NamesToValuesMapType _MessageType_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<MessageType, MessageType>::makeNamesToValuesMap();

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::MessageType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::MessageType>::enumerators() {
  static constexpr const std::pair< ::facebook::terragraph::thrift::MessageType, folly::StringPiece> storage[43] = {
    { ::facebook::terragraph::thrift::MessageType::GET_STATUS_DUMP, "GET_STATUS_DUMP"},
    { ::facebook::terragraph::thrift::MessageType::STATUS_DUMP, "STATUS_DUMP"},
    { ::facebook::terragraph::thrift::MessageType::SET_NODE_PARAMS, "SET_NODE_PARAMS"},
    { ::facebook::terragraph::thrift::MessageType::STATUS_REPORT, "STATUS_REPORT"},
    { ::facebook::terragraph::thrift::MessageType::GET_IGNITION_STATE, "GET_IGNITION_STATE"},
    { ::facebook::terragraph::thrift::MessageType::SET_IGNITION_PARAMS, "SET_IGNITION_PARAMS"},
    { ::facebook::terragraph::thrift::MessageType::SET_LINK_STATUS_REQ, "SET_LINK_STATUS_REQ"},
    { ::facebook::terragraph::thrift::MessageType::IGNITION_STATE, "IGNITION_STATE"},
    { ::facebook::terragraph::thrift::MessageType::SET_LINK_STATUS, "SET_LINK_STATUS"},
    { ::facebook::terragraph::thrift::MessageType::LINK_STATUS, "LINK_STATUS"},
    { ::facebook::terragraph::thrift::MessageType::GET_TOPOLOGY, "GET_TOPOLOGY"},
    { ::facebook::terragraph::thrift::MessageType::SET_NODE_STATUS_REQ, "SET_NODE_STATUS_REQ"},
    { ::facebook::terragraph::thrift::MessageType::SET_NODE_MAC_REQ, "SET_NODE_MAC_REQ"},
    { ::facebook::terragraph::thrift::MessageType::SET_NODE_PARAMS_REQ, "SET_NODE_PARAMS_REQ"},
    { ::facebook::terragraph::thrift::MessageType::TOPOLOGY, "TOPOLOGY"},
    { ::facebook::terragraph::thrift::MessageType::UPGRADE_REQ, "UPGRADE_REQ"},
    { ::facebook::terragraph::thrift::MessageType::SET_UPGRADE_STATUS, "SET_UPGRADE_STATUS"},
    { ::facebook::terragraph::thrift::MessageType::SET_CTRL_PARAMS, "SET_CTRL_PARAMS"},
    { ::facebook::terragraph::thrift::MessageType::DR_SET_GPS_POS, "DR_SET_GPS_POS"},
    { ::facebook::terragraph::thrift::MessageType::NODE_INIT, "NODE_INIT"},
    { ::facebook::terragraph::thrift::MessageType::NODE_INIT_NOTIFY, "NODE_INIT_NOTIFY"},
    { ::facebook::terragraph::thrift::MessageType::DR_SET_LINK_STATUS, "DR_SET_LINK_STATUS"},
    { ::facebook::terragraph::thrift::MessageType::DR_SET_LINK_STATUS_ACK, "DR_SET_LINK_STATUS_ACK"},
    { ::facebook::terragraph::thrift::MessageType::DR_LINK_STATUS, "DR_LINK_STATUS"},
    { ::facebook::terragraph::thrift::MessageType::DISSOC_RESPONSE, "DISSOC_RESPONSE"},
    { ::facebook::terragraph::thrift::MessageType::DISSOC_NOTIFY, "DISSOC_NOTIFY"},
    { ::facebook::terragraph::thrift::MessageType::FW_SET_NODE_PARAMS, "FW_SET_NODE_PARAMS"},
    { ::facebook::terragraph::thrift::MessageType::DR_SET_NODE_PARAMS_ACK, "DR_SET_NODE_PARAMS_ACK"},
    { ::facebook::terragraph::thrift::MessageType::FW_SET_NODE_PARAMS_ACK, "FW_SET_NODE_PARAMS_ACK"},
    { ::facebook::terragraph::thrift::MessageType::FW_STATS, "FW_STATS"},
    { ::facebook::terragraph::thrift::MessageType::FW_STATS_CONFIGURE_REQ, "FW_STATS_CONFIGURE_REQ"},
    { ::facebook::terragraph::thrift::MessageType::FW_STATS_CONFIGURE_RESP, "FW_STATS_CONFIGURE_RESP"},
    { ::facebook::terragraph::thrift::MessageType::FW_STATS_CONFIGURE_NOTIFY, "FW_STATS_CONFIGURE_NOTIFY"},
    { ::facebook::terragraph::thrift::MessageType::PHY_LA_LOOKUP_CONFIG_REQ, "PHY_LA_LOOKUP_CONFIG_REQ"},
    { ::facebook::terragraph::thrift::MessageType::PHY_LA_LOOKUP_CONFIG_RESP, "PHY_LA_LOOKUP_CONFIG_RESP"},
    { ::facebook::terragraph::thrift::MessageType::PHY_LA_LOOKUP_CONFIG_NOTIFY, "PHY_LA_LOOKUP_CONFIG_NOTIFY"},
    { ::facebook::terragraph::thrift::MessageType::GPS_ENABLE_REQ, "GPS_ENABLE_REQ"},
    { ::facebook::terragraph::thrift::MessageType::GPS_ENABLE_RESP, "GPS_ENABLE_RESP"},
    { ::facebook::terragraph::thrift::MessageType::GPS_ENABLE_NOTIFY, "GPS_ENABLE_NOTIFY"},
    { ::facebook::terragraph::thrift::MessageType::NONE, "NONE"},
    { ::facebook::terragraph::thrift::MessageType::HELLO, "HELLO"},
    { ::facebook::terragraph::thrift::MessageType::E2E_ACK, "E2E_ACK"},
    { ::facebook::terragraph::thrift::MessageType::TEST, "TEST"},
  };
  return folly::range(storage);
}

template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::MessageType>::findName( ::facebook::terragraph::thrift::MessageType value) {
  return findName( ::facebook::terragraph::thrift::_MessageType_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::MessageType>::findValue(const char* name,  ::facebook::terragraph::thrift::MessageType* outValue) {
  return findValue( ::facebook::terragraph::thrift::_MessageType_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

const typename apache::thrift::detail::TEnumMapFactory<LinkActionType, LinkActionType>::ValuesToNamesMapType _LinkActionType_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<LinkActionType, LinkActionType>::makeValuesToNamesMap();
const typename apache::thrift::detail::TEnumMapFactory<LinkActionType, LinkActionType>::NamesToValuesMapType _LinkActionType_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<LinkActionType, LinkActionType>::makeNamesToValuesMap();

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::LinkActionType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::LinkActionType>::enumerators() {
  static constexpr const std::pair< ::facebook::terragraph::thrift::LinkActionType, folly::StringPiece> storage[4] = {
    { ::facebook::terragraph::thrift::LinkActionType::LINK_UP, "LINK_UP"},
    { ::facebook::terragraph::thrift::LinkActionType::LINK_DOWN, "LINK_DOWN"},
    { ::facebook::terragraph::thrift::LinkActionType::LINK_ADD, "LINK_ADD"},
    { ::facebook::terragraph::thrift::LinkActionType::LINK_DELETE, "LINK_DELETE"},
  };
  return folly::range(storage);
}

template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::LinkActionType>::findName( ::facebook::terragraph::thrift::LinkActionType value) {
  return findName( ::facebook::terragraph::thrift::_LinkActionType_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::LinkActionType>::findValue(const char* name,  ::facebook::terragraph::thrift::LinkActionType* outValue) {
  return findValue( ::facebook::terragraph::thrift::_LinkActionType_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

const typename apache::thrift::detail::TEnumMapFactory<LinkStatusType, LinkStatusType>::ValuesToNamesMapType _LinkStatusType_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<LinkStatusType, LinkStatusType>::makeValuesToNamesMap();
const typename apache::thrift::detail::TEnumMapFactory<LinkStatusType, LinkStatusType>::NamesToValuesMapType _LinkStatusType_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<LinkStatusType, LinkStatusType>::makeNamesToValuesMap();

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::LinkStatusType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::LinkStatusType>::enumerators() {
  static constexpr const std::pair< ::facebook::terragraph::thrift::LinkStatusType, folly::StringPiece> storage[2] = {
    { ::facebook::terragraph::thrift::LinkStatusType::LINK_UP, "LINK_UP"},
    { ::facebook::terragraph::thrift::LinkStatusType::LINK_DOWN, "LINK_DOWN"},
  };
  return folly::range(storage);
}

template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::LinkStatusType>::findName( ::facebook::terragraph::thrift::LinkStatusType value) {
  return findName( ::facebook::terragraph::thrift::_LinkStatusType_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::LinkStatusType>::findValue(const char* name,  ::facebook::terragraph::thrift::LinkStatusType* outValue) {
  return findValue( ::facebook::terragraph::thrift::_LinkStatusType_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

const typename apache::thrift::detail::TEnumMapFactory<UpgradeStatusType, UpgradeStatusType>::ValuesToNamesMapType _UpgradeStatusType_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<UpgradeStatusType, UpgradeStatusType>::makeValuesToNamesMap();
const typename apache::thrift::detail::TEnumMapFactory<UpgradeStatusType, UpgradeStatusType>::NamesToValuesMapType _UpgradeStatusType_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<UpgradeStatusType, UpgradeStatusType>::makeNamesToValuesMap();

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::UpgradeStatusType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeStatusType>::enumerators() {
  static constexpr const std::pair< ::facebook::terragraph::thrift::UpgradeStatusType, folly::StringPiece> storage[6] = {
    { ::facebook::terragraph::thrift::UpgradeStatusType::NONE, "NONE"},
    { ::facebook::terragraph::thrift::UpgradeStatusType::DOWNLOADING_IMAGE, "DOWNLOADING_IMAGE"},
    { ::facebook::terragraph::thrift::UpgradeStatusType::DOWNLOAD_FAILED, "DOWNLOAD_FAILED"},
    { ::facebook::terragraph::thrift::UpgradeStatusType::FLASHING_IMAGE, "FLASHING_IMAGE"},
    { ::facebook::terragraph::thrift::UpgradeStatusType::FLASH_FAILED, "FLASH_FAILED"},
    { ::facebook::terragraph::thrift::UpgradeStatusType::READY_TO_REBOOT, "READY_TO_REBOOT"},
  };
  return folly::range(storage);
}

template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeStatusType>::findName( ::facebook::terragraph::thrift::UpgradeStatusType value) {
  return findName( ::facebook::terragraph::thrift::_UpgradeStatusType_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeStatusType>::findValue(const char* name,  ::facebook::terragraph::thrift::UpgradeStatusType* outValue) {
  return findValue( ::facebook::terragraph::thrift::_UpgradeStatusType_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

const typename apache::thrift::detail::TEnumMapFactory<UpgradeReqType, UpgradeReqType>::ValuesToNamesMapType _UpgradeReqType_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<UpgradeReqType, UpgradeReqType>::makeValuesToNamesMap();
const typename apache::thrift::detail::TEnumMapFactory<UpgradeReqType, UpgradeReqType>::NamesToValuesMapType _UpgradeReqType_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<UpgradeReqType, UpgradeReqType>::makeNamesToValuesMap();

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::UpgradeReqType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeReqType>::enumerators() {
  static constexpr const std::pair< ::facebook::terragraph::thrift::UpgradeReqType, folly::StringPiece> storage[2] = {
    { ::facebook::terragraph::thrift::UpgradeReqType::PREPARE_UPGRADE, "PREPARE_UPGRADE"},
    { ::facebook::terragraph::thrift::UpgradeReqType::COMMIT_UPGRADE, "COMMIT_UPGRADE"},
  };
  return folly::range(storage);
}

template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeReqType>::findName( ::facebook::terragraph::thrift::UpgradeReqType value) {
  return findName( ::facebook::terragraph::thrift::_UpgradeReqType_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeReqType>::findValue(const char* name,  ::facebook::terragraph::thrift::UpgradeReqType* outValue) {
  return findValue( ::facebook::terragraph::thrift::_UpgradeReqType_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void ImageMeta::__clear() {
  md5 = std::string();
  version = std::string();
  __isset.__clear();
}

bool ImageMeta::operator==(const ImageMeta& rhs) const {
  if (!((md5 == rhs.md5))) {
    return false;
  }
  if (!((version == rhs.version))) {
    return false;
  }
  return true;
}

void swap(ImageMeta& a, ImageMeta& b) {
  using ::std::swap;
  swap(a.md5, b.md5);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

template uint32_t ImageMeta::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ImageMeta::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ImageMeta::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ImageMeta::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ImageMeta::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t ImageMeta::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ImageMeta::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ImageMeta::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void UpgradeStatus::__clear() {
  usType =  ::facebook::terragraph::thrift::UpgradeStatusType();
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::ImageMeta>::clear(&nextImage);
  reason = std::string();
  __isset.__clear();
}

bool UpgradeStatus::operator==(const UpgradeStatus& rhs) const {
  if (!((usType == rhs.usType))) {
    return false;
  }
  if (!((nextImage == rhs.nextImage))) {
    return false;
  }
  if (!((reason == rhs.reason))) {
    return false;
  }
  return true;
}

const  ::facebook::terragraph::thrift::ImageMeta& UpgradeStatus::get_nextImage() const& {
  return nextImage;
}

 ::facebook::terragraph::thrift::ImageMeta UpgradeStatus::get_nextImage() && {
  return std::move(nextImage);
}

void swap(UpgradeStatus& a, UpgradeStatus& b) {
  using ::std::swap;
  swap(a.usType, b.usType);
  swap(a.nextImage, b.nextImage);
  swap(a.reason, b.reason);
  swap(a.__isset, b.__isset);
}

template uint32_t UpgradeStatus::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t UpgradeStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpgradeStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t UpgradeStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t UpgradeStatus::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t UpgradeStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpgradeStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t UpgradeStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void UpgradeReq::__clear() {
  imageUrl = std::string();
  md5 = std::string();
  urType =  ::facebook::terragraph::thrift::UpgradeReqType();
  __isset.__clear();
}

bool UpgradeReq::operator==(const UpgradeReq& rhs) const {
  if (!((imageUrl == rhs.imageUrl))) {
    return false;
  }
  if (!((md5 == rhs.md5))) {
    return false;
  }
  if (!((urType == rhs.urType))) {
    return false;
  }
  return true;
}

void swap(UpgradeReq& a, UpgradeReq& b) {
  using ::std::swap;
  swap(a.imageUrl, b.imageUrl);
  swap(a.md5, b.md5);
  swap(a.urType, b.urType);
  swap(a.__isset, b.__isset);
}

template uint32_t UpgradeReq::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t UpgradeReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t UpgradeReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t UpgradeReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t UpgradeReq::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t UpgradeReq::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t UpgradeReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t UpgradeReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

bool GetStatusDump::operator==(const GetStatusDump& /* rhs */) const {
  return true;
}

void swap(GetStatusDump& a, GetStatusDump& b) {
  using ::std::swap;
}

template uint32_t GetStatusDump::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t GetStatusDump::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetStatusDump::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GetStatusDump::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GetStatusDump::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t GetStatusDump::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetStatusDump::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t GetStatusDump::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void StatusDump::__clear() {
  timeStamp = 0;
  statusReports.clear();
  __isset.__clear();
}

bool StatusDump::operator==(const StatusDump& rhs) const {
  if (!((timeStamp == rhs.timeStamp))) {
    return false;
  }
  if (!((statusReports == rhs.statusReports))) {
    return false;
  }
  return true;
}

const std::map<std::string,  ::facebook::terragraph::thrift::StatusReport>& StatusDump::get_statusReports() const& {
  return statusReports;
}

std::map<std::string,  ::facebook::terragraph::thrift::StatusReport> StatusDump::get_statusReports() && {
  return std::move(statusReports);
}

void swap(StatusDump& a, StatusDump& b) {
  using ::std::swap;
  swap(a.timeStamp, b.timeStamp);
  swap(a.statusReports, b.statusReports);
  swap(a.__isset, b.__isset);
}

template uint32_t StatusDump::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StatusDump::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StatusDump::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StatusDump::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StatusDump::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t StatusDump::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StatusDump::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StatusDump::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void NodeParams::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::clear(&bwAllocMap);
  __isset.__clear();
}

bool NodeParams::operator==(const NodeParams& rhs) const {
  if (__isset.bwAllocMap != rhs.__isset.bwAllocMap) {
    return false;
  }
  else if (__isset.bwAllocMap && !((bwAllocMap == rhs.bwAllocMap))) {
    return false;
  }
  return true;
}

const  ::facebook::terragraph::thrift::BwAllocationMap* NodeParams::get_bwAllocMap() const& {
  return __isset.bwAllocMap ? std::addressof(bwAllocMap) : nullptr;
}

 ::facebook::terragraph::thrift::BwAllocationMap* NodeParams::get_bwAllocMap() & {
  return __isset.bwAllocMap ? std::addressof(bwAllocMap) : nullptr;
}

void swap(NodeParams& a, NodeParams& b) {
  using ::std::swap;
  swap(a.bwAllocMap, b.bwAllocMap);
  swap(a.__isset, b.__isset);
}

template uint32_t NodeParams::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t NodeParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t NodeParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NodeParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NodeParams::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t NodeParams::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t NodeParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t NodeParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void StatusReport::__clear() {
  timeStamp = 0;
  ipv6Address = std::string();
  version = std::string();
  isConnected = 0;
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::UpgradeStatus>::clear(&upgradeStatus);
  __isset.__clear();
}

bool StatusReport::operator==(const StatusReport& rhs) const {
  if (!((timeStamp == rhs.timeStamp))) {
    return false;
  }
  if (!((ipv6Address == rhs.ipv6Address))) {
    return false;
  }
  if (!((version == rhs.version))) {
    return false;
  }
  if (!((isConnected == rhs.isConnected))) {
    return false;
  }
  if (!((upgradeStatus == rhs.upgradeStatus))) {
    return false;
  }
  return true;
}

const  ::facebook::terragraph::thrift::UpgradeStatus& StatusReport::get_upgradeStatus() const& {
  return upgradeStatus;
}

 ::facebook::terragraph::thrift::UpgradeStatus StatusReport::get_upgradeStatus() && {
  return std::move(upgradeStatus);
}

void swap(StatusReport& a, StatusReport& b) {
  using ::std::swap;
  swap(a.timeStamp, b.timeStamp);
  swap(a.ipv6Address, b.ipv6Address);
  swap(a.version, b.version);
  swap(a.isConnected, b.isConnected);
  swap(a.upgradeStatus, b.upgradeStatus);
  swap(a.__isset, b.__isset);
}

template uint32_t StatusReport::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StatusReport::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StatusReport::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StatusReport::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StatusReport::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t StatusReport::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StatusReport::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StatusReport::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

bool GetIgnitionState::operator==(const GetIgnitionState& /* rhs */) const {
  return true;
}

void swap(GetIgnitionState& a, GetIgnitionState& b) {
  using ::std::swap;
}

template uint32_t GetIgnitionState::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t GetIgnitionState::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetIgnitionState::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GetIgnitionState::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GetIgnitionState::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t GetIgnitionState::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetIgnitionState::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t GetIgnitionState::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void IgnitionParams::__clear() {
  enable = 0;
  linkUpInterval = 0;
  __isset.__clear();
}

bool IgnitionParams::operator==(const IgnitionParams& rhs) const {
  if (__isset.enable != rhs.__isset.enable) {
    return false;
  }
  else if (__isset.enable && !((enable == rhs.enable))) {
    return false;
  }
  if (__isset.linkUpInterval != rhs.__isset.linkUpInterval) {
    return false;
  }
  else if (__isset.linkUpInterval && !((linkUpInterval == rhs.linkUpInterval))) {
    return false;
  }
  return true;
}

void swap(IgnitionParams& a, IgnitionParams& b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.linkUpInterval, b.linkUpInterval);
  swap(a.__isset, b.__isset);
}

template uint32_t IgnitionParams::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t IgnitionParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t IgnitionParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IgnitionParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IgnitionParams::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t IgnitionParams::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IgnitionParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IgnitionParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void SetLinkStatusReq::__clear() {
  action =  ::facebook::terragraph::thrift::LinkActionType();
  initiatorNodeName = std::string();
  responderNodeName = std::string();
  __isset.__clear();
}

bool SetLinkStatusReq::operator==(const SetLinkStatusReq& rhs) const {
  if (!((action == rhs.action))) {
    return false;
  }
  if (!((initiatorNodeName == rhs.initiatorNodeName))) {
    return false;
  }
  if (!((responderNodeName == rhs.responderNodeName))) {
    return false;
  }
  return true;
}

void swap(SetLinkStatusReq& a, SetLinkStatusReq& b) {
  using ::std::swap;
  swap(a.action, b.action);
  swap(a.initiatorNodeName, b.initiatorNodeName);
  swap(a.responderNodeName, b.responderNodeName);
  swap(a.__isset, b.__isset);
}

template uint32_t SetLinkStatusReq::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetLinkStatusReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetLinkStatusReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetLinkStatusReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetLinkStatusReq::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetLinkStatusReq::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetLinkStatusReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetLinkStatusReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void IgnitionCandidate::__clear() {
  initiatorNodeName = std::string();
  linkName = std::string();
  __isset.__clear();
}

bool IgnitionCandidate::operator==(const IgnitionCandidate& rhs) const {
  if (!((initiatorNodeName == rhs.initiatorNodeName))) {
    return false;
  }
  if (!((linkName == rhs.linkName))) {
    return false;
  }
  return true;
}

void swap(IgnitionCandidate& a, IgnitionCandidate& b) {
  using ::std::swap;
  swap(a.initiatorNodeName, b.initiatorNodeName);
  swap(a.linkName, b.linkName);
  swap(a.__isset, b.__isset);
}

template uint32_t IgnitionCandidate::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t IgnitionCandidate::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t IgnitionCandidate::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IgnitionCandidate::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IgnitionCandidate::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t IgnitionCandidate::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IgnitionCandidate::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IgnitionCandidate::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void IgnitionState::__clear() {
  visitedNodeNames.clear();
  igCandidates.clear();
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::clear(&lastIgCandidate);
  __isset.__clear();
}

bool IgnitionState::operator==(const IgnitionState& rhs) const {
  if (!((visitedNodeNames == rhs.visitedNodeNames))) {
    return false;
  }
  if (!((igCandidates == rhs.igCandidates))) {
    return false;
  }
  if (!((lastIgCandidate == rhs.lastIgCandidate))) {
    return false;
  }
  return true;
}

const std::vector<std::string>& IgnitionState::get_visitedNodeNames() const& {
  return visitedNodeNames;
}

std::vector<std::string> IgnitionState::get_visitedNodeNames() && {
  return std::move(visitedNodeNames);
}

const std::vector< ::facebook::terragraph::thrift::IgnitionCandidate>& IgnitionState::get_igCandidates() const& {
  return igCandidates;
}

std::vector< ::facebook::terragraph::thrift::IgnitionCandidate> IgnitionState::get_igCandidates() && {
  return std::move(igCandidates);
}

const  ::facebook::terragraph::thrift::IgnitionCandidate& IgnitionState::get_lastIgCandidate() const& {
  return lastIgCandidate;
}

 ::facebook::terragraph::thrift::IgnitionCandidate IgnitionState::get_lastIgCandidate() && {
  return std::move(lastIgCandidate);
}

void swap(IgnitionState& a, IgnitionState& b) {
  using ::std::swap;
  swap(a.visitedNodeNames, b.visitedNodeNames);
  swap(a.igCandidates, b.igCandidates);
  swap(a.lastIgCandidate, b.lastIgCandidate);
  swap(a.__isset, b.__isset);
}

template uint32_t IgnitionState::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t IgnitionState::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t IgnitionState::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IgnitionState::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IgnitionState::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t IgnitionState::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IgnitionState::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IgnitionState::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void SetLinkStatus::__clear() {
  linkStatusType =  ::facebook::terragraph::thrift::LinkStatusType();
  responderMac = std::string();
  responderNodeType =  ::facebook::terragraph::thrift::NodeType();
  __isset.__clear();
}

bool SetLinkStatus::operator==(const SetLinkStatus& rhs) const {
  if (!((linkStatusType == rhs.linkStatusType))) {
    return false;
  }
  if (!((responderMac == rhs.responderMac))) {
    return false;
  }
  if (!((responderNodeType == rhs.responderNodeType))) {
    return false;
  }
  return true;
}

void swap(SetLinkStatus& a, SetLinkStatus& b) {
  using ::std::swap;
  swap(a.linkStatusType, b.linkStatusType);
  swap(a.responderMac, b.responderMac);
  swap(a.responderNodeType, b.responderNodeType);
  swap(a.__isset, b.__isset);
}

template uint32_t SetLinkStatus::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetLinkStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetLinkStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetLinkStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetLinkStatus::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetLinkStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetLinkStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetLinkStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void LinkStatus::__clear() {
  responderMac = std::string();
  linkStatusType =  ::facebook::terragraph::thrift::LinkStatusType();
  __isset.__clear();
}

bool LinkStatus::operator==(const LinkStatus& rhs) const {
  if (!((responderMac == rhs.responderMac))) {
    return false;
  }
  if (!((linkStatusType == rhs.linkStatusType))) {
    return false;
  }
  return true;
}

void swap(LinkStatus& a, LinkStatus& b) {
  using ::std::swap;
  swap(a.responderMac, b.responderMac);
  swap(a.linkStatusType, b.linkStatusType);
  swap(a.__isset, b.__isset);
}

template uint32_t LinkStatus::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LinkStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LinkStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LinkStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LinkStatus::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t LinkStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LinkStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LinkStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

bool GetTopology::operator==(const GetTopology& /* rhs */) const {
  return true;
}

void swap(GetTopology& a, GetTopology& b) {
  using ::std::swap;
}

template uint32_t GetTopology::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t GetTopology::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t GetTopology::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GetTopology::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t GetTopology::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t GetTopology::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t GetTopology::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t GetTopology::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void SetNodeStatusReq::__clear() {
  nodeMac = std::string();
  markAllLinksDown = 0;
  markNodeDown = 0;
  __isset.__clear();
}

bool SetNodeStatusReq::operator==(const SetNodeStatusReq& rhs) const {
  if (!((nodeMac == rhs.nodeMac))) {
    return false;
  }
  if (!((markAllLinksDown == rhs.markAllLinksDown))) {
    return false;
  }
  if (!((markNodeDown == rhs.markNodeDown))) {
    return false;
  }
  return true;
}

void swap(SetNodeStatusReq& a, SetNodeStatusReq& b) {
  using ::std::swap;
  swap(a.nodeMac, b.nodeMac);
  swap(a.markAllLinksDown, b.markAllLinksDown);
  swap(a.markNodeDown, b.markNodeDown);
  swap(a.__isset, b.__isset);
}

template uint32_t SetNodeStatusReq::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetNodeStatusReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetNodeStatusReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeStatusReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeStatusReq::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetNodeStatusReq::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetNodeStatusReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetNodeStatusReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void SetNodeParamsReq::__clear() {
  nodeMac = std::string();
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NodeParams>::clear(&nodeParams);
  __isset.__clear();
}

bool SetNodeParamsReq::operator==(const SetNodeParamsReq& rhs) const {
  if (!((nodeMac == rhs.nodeMac))) {
    return false;
  }
  if (__isset.nodeParams != rhs.__isset.nodeParams) {
    return false;
  }
  else if (__isset.nodeParams && !((nodeParams == rhs.nodeParams))) {
    return false;
  }
  return true;
}

const  ::facebook::terragraph::thrift::NodeParams* SetNodeParamsReq::get_nodeParams() const& {
  return __isset.nodeParams ? std::addressof(nodeParams) : nullptr;
}

 ::facebook::terragraph::thrift::NodeParams* SetNodeParamsReq::get_nodeParams() & {
  return __isset.nodeParams ? std::addressof(nodeParams) : nullptr;
}

void swap(SetNodeParamsReq& a, SetNodeParamsReq& b) {
  using ::std::swap;
  swap(a.nodeMac, b.nodeMac);
  swap(a.nodeParams, b.nodeParams);
  swap(a.__isset, b.__isset);
}

template uint32_t SetNodeParamsReq::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetNodeParamsReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetNodeParamsReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeParamsReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeParamsReq::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetNodeParamsReq::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetNodeParamsReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetNodeParamsReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void SetNodeMacReq::__clear() {
  nodeName = std::string();
  scannedBlob = std::string();
  __isset.__clear();
}

bool SetNodeMacReq::operator==(const SetNodeMacReq& rhs) const {
  if (!((nodeName == rhs.nodeName))) {
    return false;
  }
  if (!((scannedBlob == rhs.scannedBlob))) {
    return false;
  }
  return true;
}

void swap(SetNodeMacReq& a, SetNodeMacReq& b) {
  using ::std::swap;
  swap(a.nodeName, b.nodeName);
  swap(a.scannedBlob, b.scannedBlob);
  swap(a.__isset, b.__isset);
}

template uint32_t SetNodeMacReq::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetNodeMacReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetNodeMacReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeMacReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetNodeMacReq::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetNodeMacReq::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetNodeMacReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetNodeMacReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void SetCtrlParams::__clear() {
  ctrlUrl = std::string();
  __isset.__clear();
}

bool SetCtrlParams::operator==(const SetCtrlParams& rhs) const {
  if (!((ctrlUrl == rhs.ctrlUrl))) {
    return false;
  }
  return true;
}

void swap(SetCtrlParams& a, SetCtrlParams& b) {
  using ::std::swap;
  swap(a.ctrlUrl, b.ctrlUrl);
  swap(a.__isset, b.__isset);
}

template uint32_t SetCtrlParams::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetCtrlParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetCtrlParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetCtrlParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetCtrlParams::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetCtrlParams::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetCtrlParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetCtrlParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void FwOptParams::__clear() {
  antCodeBook = 0;
  polarity = 0;
  frameConfig = 0;
  numOfPeerSta = 0;
  logModules = 0;
  logSeverity = 0;
  gpioConfig = 0;
  channel = 0;
  swConfig = 0;
  mcs = 0;
  txPower = 0;
  rxBuffer = 0;
  beamConfig = 0;
  txBeamIndex = 0;
  rxBeamIndex = 0;
  statsType = 0;
  dataCollectionType = 0;
  numOfHbLossToFail = 0;
  statsLogInterval = 0;
  statsPrintInterval = 0;
  forceGpsDisable = 0;
  lsmAssocRespTimeout = 0;
  lsmSendAssocReqRetry = 0;
  lsmAssocRespAckTimeout = 0;
  lsmSendAssocRespRetry = 0;
  lsmRepeatAckInterval = 0;
  lsmRepeatAck = 0;
  lsmFirstHeartbTimeout = 0;
  txSlot0Start = 0;
  txSlot0End = 0;
  txSlot1Start = 0;
  txSlot1End = 0;
  txSlot2Start = 0;
  txSlot2End = 0;
  rxSlot0Start = 0;
  rxSlot0End = 0;
  rxSlot1Start = 0;
  rxSlot1End = 0;
  rxSlot2Start = 0;
  rxSlot2End = 0;
  gpsTimeout = 0;
  linkAgc = 0;
  respNodeType = 0;
  __isset.__clear();
}

bool FwOptParams::operator==(const FwOptParams& rhs) const {
  if (__isset.antCodeBook != rhs.__isset.antCodeBook) {
    return false;
  }
  else if (__isset.antCodeBook && !((antCodeBook == rhs.antCodeBook))) {
    return false;
  }
  if (__isset.polarity != rhs.__isset.polarity) {
    return false;
  }
  else if (__isset.polarity && !((polarity == rhs.polarity))) {
    return false;
  }
  if (__isset.frameConfig != rhs.__isset.frameConfig) {
    return false;
  }
  else if (__isset.frameConfig && !((frameConfig == rhs.frameConfig))) {
    return false;
  }
  if (__isset.numOfPeerSta != rhs.__isset.numOfPeerSta) {
    return false;
  }
  else if (__isset.numOfPeerSta && !((numOfPeerSta == rhs.numOfPeerSta))) {
    return false;
  }
  if (__isset.logModules != rhs.__isset.logModules) {
    return false;
  }
  else if (__isset.logModules && !((logModules == rhs.logModules))) {
    return false;
  }
  if (__isset.logSeverity != rhs.__isset.logSeverity) {
    return false;
  }
  else if (__isset.logSeverity && !((logSeverity == rhs.logSeverity))) {
    return false;
  }
  if (__isset.gpioConfig != rhs.__isset.gpioConfig) {
    return false;
  }
  else if (__isset.gpioConfig && !((gpioConfig == rhs.gpioConfig))) {
    return false;
  }
  if (__isset.channel != rhs.__isset.channel) {
    return false;
  }
  else if (__isset.channel && !((channel == rhs.channel))) {
    return false;
  }
  if (__isset.swConfig != rhs.__isset.swConfig) {
    return false;
  }
  else if (__isset.swConfig && !((swConfig == rhs.swConfig))) {
    return false;
  }
  if (__isset.mcs != rhs.__isset.mcs) {
    return false;
  }
  else if (__isset.mcs && !((mcs == rhs.mcs))) {
    return false;
  }
  if (__isset.txPower != rhs.__isset.txPower) {
    return false;
  }
  else if (__isset.txPower && !((txPower == rhs.txPower))) {
    return false;
  }
  if (__isset.rxBuffer != rhs.__isset.rxBuffer) {
    return false;
  }
  else if (__isset.rxBuffer && !((rxBuffer == rhs.rxBuffer))) {
    return false;
  }
  if (__isset.beamConfig != rhs.__isset.beamConfig) {
    return false;
  }
  else if (__isset.beamConfig && !((beamConfig == rhs.beamConfig))) {
    return false;
  }
  if (__isset.txBeamIndex != rhs.__isset.txBeamIndex) {
    return false;
  }
  else if (__isset.txBeamIndex && !((txBeamIndex == rhs.txBeamIndex))) {
    return false;
  }
  if (__isset.rxBeamIndex != rhs.__isset.rxBeamIndex) {
    return false;
  }
  else if (__isset.rxBeamIndex && !((rxBeamIndex == rhs.rxBeamIndex))) {
    return false;
  }
  if (__isset.statsType != rhs.__isset.statsType) {
    return false;
  }
  else if (__isset.statsType && !((statsType == rhs.statsType))) {
    return false;
  }
  if (__isset.dataCollectionType != rhs.__isset.dataCollectionType) {
    return false;
  }
  else if (__isset.dataCollectionType && !((dataCollectionType == rhs.dataCollectionType))) {
    return false;
  }
  if (__isset.numOfHbLossToFail != rhs.__isset.numOfHbLossToFail) {
    return false;
  }
  else if (__isset.numOfHbLossToFail && !((numOfHbLossToFail == rhs.numOfHbLossToFail))) {
    return false;
  }
  if (__isset.statsLogInterval != rhs.__isset.statsLogInterval) {
    return false;
  }
  else if (__isset.statsLogInterval && !((statsLogInterval == rhs.statsLogInterval))) {
    return false;
  }
  if (__isset.statsPrintInterval != rhs.__isset.statsPrintInterval) {
    return false;
  }
  else if (__isset.statsPrintInterval && !((statsPrintInterval == rhs.statsPrintInterval))) {
    return false;
  }
  if (__isset.forceGpsDisable != rhs.__isset.forceGpsDisable) {
    return false;
  }
  else if (__isset.forceGpsDisable && !((forceGpsDisable == rhs.forceGpsDisable))) {
    return false;
  }
  if (__isset.lsmAssocRespTimeout != rhs.__isset.lsmAssocRespTimeout) {
    return false;
  }
  else if (__isset.lsmAssocRespTimeout && !((lsmAssocRespTimeout == rhs.lsmAssocRespTimeout))) {
    return false;
  }
  if (__isset.lsmSendAssocReqRetry != rhs.__isset.lsmSendAssocReqRetry) {
    return false;
  }
  else if (__isset.lsmSendAssocReqRetry && !((lsmSendAssocReqRetry == rhs.lsmSendAssocReqRetry))) {
    return false;
  }
  if (__isset.lsmAssocRespAckTimeout != rhs.__isset.lsmAssocRespAckTimeout) {
    return false;
  }
  else if (__isset.lsmAssocRespAckTimeout && !((lsmAssocRespAckTimeout == rhs.lsmAssocRespAckTimeout))) {
    return false;
  }
  if (__isset.lsmSendAssocRespRetry != rhs.__isset.lsmSendAssocRespRetry) {
    return false;
  }
  else if (__isset.lsmSendAssocRespRetry && !((lsmSendAssocRespRetry == rhs.lsmSendAssocRespRetry))) {
    return false;
  }
  if (__isset.lsmRepeatAckInterval != rhs.__isset.lsmRepeatAckInterval) {
    return false;
  }
  else if (__isset.lsmRepeatAckInterval && !((lsmRepeatAckInterval == rhs.lsmRepeatAckInterval))) {
    return false;
  }
  if (__isset.lsmRepeatAck != rhs.__isset.lsmRepeatAck) {
    return false;
  }
  else if (__isset.lsmRepeatAck && !((lsmRepeatAck == rhs.lsmRepeatAck))) {
    return false;
  }
  if (__isset.lsmFirstHeartbTimeout != rhs.__isset.lsmFirstHeartbTimeout) {
    return false;
  }
  else if (__isset.lsmFirstHeartbTimeout && !((lsmFirstHeartbTimeout == rhs.lsmFirstHeartbTimeout))) {
    return false;
  }
  if (__isset.txSlot0Start != rhs.__isset.txSlot0Start) {
    return false;
  }
  else if (__isset.txSlot0Start && !((txSlot0Start == rhs.txSlot0Start))) {
    return false;
  }
  if (__isset.txSlot0End != rhs.__isset.txSlot0End) {
    return false;
  }
  else if (__isset.txSlot0End && !((txSlot0End == rhs.txSlot0End))) {
    return false;
  }
  if (__isset.txSlot1Start != rhs.__isset.txSlot1Start) {
    return false;
  }
  else if (__isset.txSlot1Start && !((txSlot1Start == rhs.txSlot1Start))) {
    return false;
  }
  if (__isset.txSlot1End != rhs.__isset.txSlot1End) {
    return false;
  }
  else if (__isset.txSlot1End && !((txSlot1End == rhs.txSlot1End))) {
    return false;
  }
  if (__isset.txSlot2Start != rhs.__isset.txSlot2Start) {
    return false;
  }
  else if (__isset.txSlot2Start && !((txSlot2Start == rhs.txSlot2Start))) {
    return false;
  }
  if (__isset.txSlot2End != rhs.__isset.txSlot2End) {
    return false;
  }
  else if (__isset.txSlot2End && !((txSlot2End == rhs.txSlot2End))) {
    return false;
  }
  if (__isset.rxSlot0Start != rhs.__isset.rxSlot0Start) {
    return false;
  }
  else if (__isset.rxSlot0Start && !((rxSlot0Start == rhs.rxSlot0Start))) {
    return false;
  }
  if (__isset.rxSlot0End != rhs.__isset.rxSlot0End) {
    return false;
  }
  else if (__isset.rxSlot0End && !((rxSlot0End == rhs.rxSlot0End))) {
    return false;
  }
  if (__isset.rxSlot1Start != rhs.__isset.rxSlot1Start) {
    return false;
  }
  else if (__isset.rxSlot1Start && !((rxSlot1Start == rhs.rxSlot1Start))) {
    return false;
  }
  if (__isset.rxSlot1End != rhs.__isset.rxSlot1End) {
    return false;
  }
  else if (__isset.rxSlot1End && !((rxSlot1End == rhs.rxSlot1End))) {
    return false;
  }
  if (__isset.rxSlot2Start != rhs.__isset.rxSlot2Start) {
    return false;
  }
  else if (__isset.rxSlot2Start && !((rxSlot2Start == rhs.rxSlot2Start))) {
    return false;
  }
  if (__isset.rxSlot2End != rhs.__isset.rxSlot2End) {
    return false;
  }
  else if (__isset.rxSlot2End && !((rxSlot2End == rhs.rxSlot2End))) {
    return false;
  }
  if (__isset.gpsTimeout != rhs.__isset.gpsTimeout) {
    return false;
  }
  else if (__isset.gpsTimeout && !((gpsTimeout == rhs.gpsTimeout))) {
    return false;
  }
  if (__isset.linkAgc != rhs.__isset.linkAgc) {
    return false;
  }
  else if (__isset.linkAgc && !((linkAgc == rhs.linkAgc))) {
    return false;
  }
  if (__isset.respNodeType != rhs.__isset.respNodeType) {
    return false;
  }
  else if (__isset.respNodeType && !((respNodeType == rhs.respNodeType))) {
    return false;
  }
  return true;
}

void swap(FwOptParams& a, FwOptParams& b) {
  using ::std::swap;
  swap(a.antCodeBook, b.antCodeBook);
  swap(a.polarity, b.polarity);
  swap(a.frameConfig, b.frameConfig);
  swap(a.numOfPeerSta, b.numOfPeerSta);
  swap(a.logModules, b.logModules);
  swap(a.logSeverity, b.logSeverity);
  swap(a.gpioConfig, b.gpioConfig);
  swap(a.channel, b.channel);
  swap(a.swConfig, b.swConfig);
  swap(a.mcs, b.mcs);
  swap(a.txPower, b.txPower);
  swap(a.rxBuffer, b.rxBuffer);
  swap(a.beamConfig, b.beamConfig);
  swap(a.txBeamIndex, b.txBeamIndex);
  swap(a.rxBeamIndex, b.rxBeamIndex);
  swap(a.statsType, b.statsType);
  swap(a.dataCollectionType, b.dataCollectionType);
  swap(a.numOfHbLossToFail, b.numOfHbLossToFail);
  swap(a.statsLogInterval, b.statsLogInterval);
  swap(a.statsPrintInterval, b.statsPrintInterval);
  swap(a.forceGpsDisable, b.forceGpsDisable);
  swap(a.lsmAssocRespTimeout, b.lsmAssocRespTimeout);
  swap(a.lsmSendAssocReqRetry, b.lsmSendAssocReqRetry);
  swap(a.lsmAssocRespAckTimeout, b.lsmAssocRespAckTimeout);
  swap(a.lsmSendAssocRespRetry, b.lsmSendAssocRespRetry);
  swap(a.lsmRepeatAckInterval, b.lsmRepeatAckInterval);
  swap(a.lsmRepeatAck, b.lsmRepeatAck);
  swap(a.lsmFirstHeartbTimeout, b.lsmFirstHeartbTimeout);
  swap(a.txSlot0Start, b.txSlot0Start);
  swap(a.txSlot0End, b.txSlot0End);
  swap(a.txSlot1Start, b.txSlot1Start);
  swap(a.txSlot1End, b.txSlot1End);
  swap(a.txSlot2Start, b.txSlot2Start);
  swap(a.txSlot2End, b.txSlot2End);
  swap(a.rxSlot0Start, b.rxSlot0Start);
  swap(a.rxSlot0End, b.rxSlot0End);
  swap(a.rxSlot1Start, b.rxSlot1Start);
  swap(a.rxSlot1End, b.rxSlot1End);
  swap(a.rxSlot2Start, b.rxSlot2Start);
  swap(a.rxSlot2End, b.rxSlot2End);
  swap(a.gpsTimeout, b.gpsTimeout);
  swap(a.linkAgc, b.linkAgc);
  swap(a.respNodeType, b.respNodeType);
  swap(a.__isset, b.__isset);
}

template uint32_t FwOptParams::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t FwOptParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t FwOptParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t FwOptParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t FwOptParams::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t FwOptParams::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t FwOptParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t FwOptParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void NodeFwParams::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::clear(&nodeInitOptParams);
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::clear(&linkOptParams);
  __isset.__clear();
}

bool NodeFwParams::operator==(const NodeFwParams& rhs) const {
  if (!((nodeInitOptParams == rhs.nodeInitOptParams))) {
    return false;
  }
  if (!((linkOptParams == rhs.linkOptParams))) {
    return false;
  }
  return true;
}

const  ::facebook::terragraph::thrift::FwOptParams& NodeFwParams::get_nodeInitOptParams() const& {
  return nodeInitOptParams;
}

 ::facebook::terragraph::thrift::FwOptParams NodeFwParams::get_nodeInitOptParams() && {
  return std::move(nodeInitOptParams);
}

const  ::facebook::terragraph::thrift::FwOptParams& NodeFwParams::get_linkOptParams() const& {
  return linkOptParams;
}

 ::facebook::terragraph::thrift::FwOptParams NodeFwParams::get_linkOptParams() && {
  return std::move(linkOptParams);
}

void swap(NodeFwParams& a, NodeFwParams& b) {
  using ::std::swap;
  swap(a.nodeInitOptParams, b.nodeInitOptParams);
  swap(a.linkOptParams, b.linkOptParams);
  swap(a.__isset, b.__isset);
}

template uint32_t NodeFwParams::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t NodeFwParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t NodeFwParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NodeFwParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NodeFwParams::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t NodeFwParams::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t NodeFwParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t NodeFwParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void Message::__clear() {
  mType =  ::facebook::terragraph::thrift::MessageType();
  value = std::string();
  __isset.__clear();
}

bool Message::operator==(const Message& rhs) const {
  if (!((mType == rhs.mType))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(value, rhs.value))) {
    return false;
  }
  return true;
}

void swap(Message& a, Message& b) {
  using ::std::swap;
  swap(a.mType, b.mType);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

template uint32_t Message::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Message::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Message::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Message::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Message::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Message::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Message::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Message::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

bool Hello::operator==(const Hello& /* rhs */) const {
  return true;
}

void swap(Hello& a, Hello& b) {
  using ::std::swap;
}

template uint32_t Hello::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Hello::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Hello::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Hello::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Hello::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Hello::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Hello::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Hello::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void E2EAck::__clear() {
  success = 0;
  message = std::string();
  __isset.__clear();
}

bool E2EAck::operator==(const E2EAck& rhs) const {
  if (!((success == rhs.success))) {
    return false;
  }
  if (!((message == rhs.message))) {
    return false;
  }
  return true;
}

void swap(E2EAck& a, E2EAck& b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

template uint32_t E2EAck::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t E2EAck::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t E2EAck::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t E2EAck::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t E2EAck::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t E2EAck::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t E2EAck::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t E2EAck::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
