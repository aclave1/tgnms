/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include "Topology_types.h"
#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>



namespace facebook { namespace terragraph { namespace thrift {

class NetworkConfig;
class NetworkConfigs;

class NetworkConfig : private apache::thrift::detail::st::ComparisonOperators<NetworkConfig> {
 public:

  NetworkConfig() :
      latitude(0),
      longitude(0),
      zoom_level(0) {}
  // FragileConstructor for use in initialization lists only

  NetworkConfig(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::Topology topology__arg, double latitude__arg, double longitude__arg, int64_t zoom_level__arg, std::string controller_ip__arg) :
      topology(std::move(topology__arg)),
      latitude(std::move(latitude__arg)),
      longitude(std::move(longitude__arg)),
      zoom_level(std::move(zoom_level__arg)),
      controller_ip(std::move(controller_ip__arg)) {
    __isset.topology = true;
    __isset.latitude = true;
    __isset.longitude = true;
    __isset.zoom_level = true;
    __isset.controller_ip = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NetworkConfig(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NetworkConfig(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    topology = arg.move();
    __isset.topology = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NetworkConfig(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NetworkConfig(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    latitude = arg.move();
    __isset.latitude = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NetworkConfig(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NetworkConfig(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    longitude = arg.move();
    __isset.longitude = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NetworkConfig(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NetworkConfig(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    zoom_level = arg.move();
    __isset.zoom_level = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NetworkConfig(::apache::thrift::detail::argument_wrapper<100, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NetworkConfig(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    controller_ip = arg.move();
    __isset.controller_ip = true;
  }

  NetworkConfig(NetworkConfig&&) = default;

  NetworkConfig(const NetworkConfig&) = default;

  NetworkConfig& operator=(NetworkConfig&&) = default;

  NetworkConfig& operator=(const NetworkConfig&) = default;
  void __clear();

  virtual ~NetworkConfig() throw() {}

   ::facebook::terragraph::thrift::Topology topology;
  double latitude;
  double longitude;
  int64_t zoom_level;
  std::string controller_ip;

  struct __isset {
    void __clear() {
      topology = false;
      latitude = false;
      longitude = false;
      zoom_level = false;
      controller_ip = false;
    }

    bool topology = false;
    bool latitude = false;
    bool longitude = false;
    bool zoom_level = false;
    bool controller_ip = false;
  } __isset;
  bool operator==(const NetworkConfig& rhs) const;
  bool operator < (const NetworkConfig& rhs) const;
  const  ::facebook::terragraph::thrift::Topology& get_topology() const&;
   ::facebook::terragraph::thrift::Topology get_topology() &&;
  template <typename T_NetworkConfig_topology_struct_setter>
   ::facebook::terragraph::thrift::Topology& set_topology(T_NetworkConfig_topology_struct_setter&& topology_);

  double get_latitude() const {
    return latitude;
  }

  double& set_latitude(double latitude_) {
    latitude = latitude_;
    __isset.latitude = true;
    return latitude;
  }

  double get_longitude() const {
    return longitude;
  }

  double& set_longitude(double longitude_) {
    longitude = longitude_;
    __isset.longitude = true;
    return longitude;
  }

  int64_t get_zoom_level() const {
    return zoom_level;
  }

  int64_t& set_zoom_level(int64_t zoom_level_) {
    zoom_level = zoom_level_;
    __isset.zoom_level = true;
    return zoom_level;
  }

  const std::string& get_controller_ip() const& {
    return controller_ip;
  }

  std::string get_controller_ip() && {
    return std::move(controller_ip);
  }

  template <typename T_NetworkConfig_controller_ip_struct_setter>
  std::string& set_controller_ip(T_NetworkConfig_controller_ip_struct_setter&& controller_ip_) {
    controller_ip = std::forward<T_NetworkConfig_controller_ip_struct_setter>(controller_ip_);
    __isset.controller_ip = true;
    return controller_ip;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(NetworkConfig& a, NetworkConfig& b);
extern template uint32_t NetworkConfig::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NetworkConfig::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NetworkConfig::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NetworkConfig::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NetworkConfig::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NetworkConfig::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NetworkConfig::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NetworkConfig::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfig>::clear( ::facebook::terragraph::thrift::NetworkConfig* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfig>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfig>::write(Protocol* proto,  ::facebook::terragraph::thrift::NetworkConfig const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfig>::read(Protocol* proto,  ::facebook::terragraph::thrift::NetworkConfig* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfig>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::NetworkConfig const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfig>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::NetworkConfig const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class NetworkConfigs : private apache::thrift::detail::st::ComparisonOperators<NetworkConfigs> {
 public:

  NetworkConfigs() {}
  // FragileConstructor for use in initialization lists only

  NetworkConfigs(apache::thrift::FragileConstructor, std::vector< ::facebook::terragraph::thrift::NetworkConfig> topologies__arg) :
      topologies(std::move(topologies__arg)) {
    __isset.topologies = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NetworkConfigs(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NetworkConfigs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    topologies = arg.move();
    __isset.topologies = true;
  }

  NetworkConfigs(NetworkConfigs&&) = default;

  NetworkConfigs(const NetworkConfigs&) = default;

  NetworkConfigs& operator=(NetworkConfigs&&) = default;

  NetworkConfigs& operator=(const NetworkConfigs&) = default;
  void __clear();

  virtual ~NetworkConfigs() throw() {}

  std::vector< ::facebook::terragraph::thrift::NetworkConfig> topologies;

  struct __isset {
    void __clear() {
      topologies = false;
    }

    bool topologies = false;
  } __isset;
  bool operator==(const NetworkConfigs& rhs) const;
  bool operator < (const NetworkConfigs& rhs) const;
  const std::vector< ::facebook::terragraph::thrift::NetworkConfig>& get_topologies() const&;
  std::vector< ::facebook::terragraph::thrift::NetworkConfig> get_topologies() &&;
  template <typename T_NetworkConfigs_topologies_struct_setter>
  std::vector< ::facebook::terragraph::thrift::NetworkConfig>& set_topologies(T_NetworkConfigs_topologies_struct_setter&& topologies_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(NetworkConfigs& a, NetworkConfigs& b);
extern template uint32_t NetworkConfigs::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NetworkConfigs::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NetworkConfigs::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NetworkConfigs::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NetworkConfigs::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NetworkConfigs::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NetworkConfigs::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NetworkConfigs::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfigs>::clear( ::facebook::terragraph::thrift::NetworkConfigs* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfigs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfigs>::write(Protocol* proto,  ::facebook::terragraph::thrift::NetworkConfigs const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfigs>::read(Protocol* proto,  ::facebook::terragraph::thrift::NetworkConfigs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfigs>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::NetworkConfigs const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NetworkConfigs>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::NetworkConfigs const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
