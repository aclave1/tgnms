/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "BWAllocation_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t SlotInfo::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "id") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "attrib") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->attrib = ( ::facebook::terragraph::thrift::SlotAttrib)ecast0;
          this->__isset.attrib = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SlotInfo::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SlotInfo");
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->id);
  xfer += prot_->serializedFieldSize("attrib", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->attrib);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SlotInfo::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SlotInfo");
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->id);
  xfer += prot_->serializedFieldSize("attrib", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->attrib);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SlotInfo::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SlotInfo");
  xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("attrib", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32((int32_t)this->attrib);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_BwAllocationMap_macAddrList_struct_setter>
std::map< ::facebook::terragraph::thrift::LinkId, std::string>& BwAllocationMap::set_macAddrList(T_BwAllocationMap_macAddrList_struct_setter&& macAddrList_) {
  macAddrList = std::forward<T_BwAllocationMap_macAddrList_struct_setter>(macAddrList_);
  __isset.macAddrList = true;
  return macAddrList;
}

template <typename T_BwAllocationMap_txSlotMap_struct_setter>
std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& BwAllocationMap::set_txSlotMap(T_BwAllocationMap_txSlotMap_struct_setter&& txSlotMap_) {
  txSlotMap = std::forward<T_BwAllocationMap_txSlotMap_struct_setter>(txSlotMap_);
  __isset.txSlotMap = true;
  return txSlotMap;
}

template <typename T_BwAllocationMap_rxSlotMap_struct_setter>
std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& BwAllocationMap::set_rxSlotMap(T_BwAllocationMap_rxSlotMap_struct_setter&& rxSlotMap_) {
  rxSlotMap = std::forward<T_BwAllocationMap_rxSlotMap_struct_setter>(rxSlotMap_);
  __isset.rxSlotMap = true;
  return rxSlotMap;
}

template <class Protocol_>
uint32_t BwAllocationMap::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "frmCfgType") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "sframesPerBWGD") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "slotsPerFrame") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "macAddrList") {
        fid = 4;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "txSlotMap") {
        fid = 5;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "rxSlotMap") {
        fid = 6;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->frmCfgType);
          this->__isset.frmCfgType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sframesPerBWGD);
          this->__isset.sframesPerBWGD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->slotsPerFrame);
          this->__isset.slotsPerFrame = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          this->macAddrList = std::map< ::facebook::terragraph::thrift::LinkId, std::string>();
          uint32_t _size1;
          apache::thrift::protocol::TType _ktype2;
          apache::thrift::protocol::TType _vtype3;
          xfer += iprot->readMapBegin(_ktype2, _vtype3, _size1);
          uint32_t _i5;
          if (_size1 == std::numeric_limits<uint32_t>::max()) {
            for (_i5 = 0; iprot->peekMap(); _i5++) {
               ::facebook::terragraph::thrift::LinkId _key6;
              xfer += iprot->readI16(_key6);
              std::string& _val7 = this->macAddrList[std::move(_key6)];
              xfer += iprot->readString(_val7);
            }
          }
          else {
            auto const _kreader8 = [&xfer, &iprot](auto& _key10) {
              xfer += iprot->readI16(_key10);
            }
            ;
            auto const _vreader9 = [&xfer, &iprot](auto& _val11) {
              xfer += iprot->readString(_val11);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->macAddrList, _size1, _kreader8, _vreader9);
          }
          xfer += iprot->readMapEnd();
          this->__isset.macAddrList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          this->txSlotMap = std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>();
          uint32_t _size12;
          apache::thrift::protocol::TType _ktype13;
          apache::thrift::protocol::TType _vtype14;
          xfer += iprot->readMapBegin(_ktype13, _vtype14, _size12);
          uint32_t _i16;
          if (_size12 == std::numeric_limits<uint32_t>::max()) {
            for (_i16 = 0; iprot->peekMap(); _i16++) {
               ::facebook::terragraph::thrift::SlotIdx _key17;
              xfer += iprot->readI16(_key17);
               ::facebook::terragraph::thrift::SlotInfo& _val18 = this->txSlotMap[std::move(_key17)];
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::read(iprot, &_val18);
            }
          }
          else {
            auto const _kreader19 = [&xfer, &iprot](auto& _key21) {
              xfer += iprot->readI16(_key21);
            }
            ;
            auto const _vreader20 = [&xfer, &iprot](auto& _val22) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::read(iprot, &_val22);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->txSlotMap, _size12, _kreader19, _vreader20);
          }
          xfer += iprot->readMapEnd();
          this->__isset.txSlotMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          this->rxSlotMap = std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>();
          uint32_t _size23;
          apache::thrift::protocol::TType _ktype24;
          apache::thrift::protocol::TType _vtype25;
          xfer += iprot->readMapBegin(_ktype24, _vtype25, _size23);
          uint32_t _i27;
          if (_size23 == std::numeric_limits<uint32_t>::max()) {
            for (_i27 = 0; iprot->peekMap(); _i27++) {
               ::facebook::terragraph::thrift::SlotIdx _key28;
              xfer += iprot->readI16(_key28);
               ::facebook::terragraph::thrift::SlotInfo& _val29 = this->rxSlotMap[std::move(_key28)];
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::read(iprot, &_val29);
            }
          }
          else {
            auto const _kreader30 = [&xfer, &iprot](auto& _key32) {
              xfer += iprot->readI16(_key32);
            }
            ;
            auto const _vreader31 = [&xfer, &iprot](auto& _val33) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::read(iprot, &_val33);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->rxSlotMap, _size23, _kreader30, _vreader31);
          }
          xfer += iprot->readMapEnd();
          this->__isset.rxSlotMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationMap::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BwAllocationMap");
  xfer += prot_->serializedFieldSize("frmCfgType", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->frmCfgType);
  xfer += prot_->serializedFieldSize("sframesPerBWGD", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->sframesPerBWGD);
  xfer += prot_->serializedFieldSize("slotsPerFrame", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->slotsPerFrame);
  xfer += prot_->serializedFieldSize("macAddrList", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRING, this->macAddrList.size());
  for (auto _iter34 = this->macAddrList.begin(); _iter34 != this->macAddrList.end(); ++_iter34) {
    xfer += prot_->serializedSizeI16(_iter34->first);
    xfer += prot_->serializedSizeString(_iter34->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("txSlotMap", apache::thrift::protocol::T_MAP, 5);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRUCT, this->txSlotMap.size());
  for (auto _iter35 = this->txSlotMap.begin(); _iter35 != this->txSlotMap.end(); ++_iter35) {
    xfer += prot_->serializedSizeI16(_iter35->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::serializedSize(prot_, &_iter35->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("rxSlotMap", apache::thrift::protocol::T_MAP, 6);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRUCT, this->rxSlotMap.size());
  for (auto _iter36 = this->rxSlotMap.begin(); _iter36 != this->rxSlotMap.end(); ++_iter36) {
    xfer += prot_->serializedSizeI16(_iter36->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::serializedSize(prot_, &_iter36->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationMap::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BwAllocationMap");
  xfer += prot_->serializedFieldSize("frmCfgType", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->frmCfgType);
  xfer += prot_->serializedFieldSize("sframesPerBWGD", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->sframesPerBWGD);
  xfer += prot_->serializedFieldSize("slotsPerFrame", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->slotsPerFrame);
  xfer += prot_->serializedFieldSize("macAddrList", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRING, this->macAddrList.size());
  for (auto _iter37 = this->macAddrList.begin(); _iter37 != this->macAddrList.end(); ++_iter37) {
    xfer += prot_->serializedSizeI16(_iter37->first);
    xfer += prot_->serializedSizeString(_iter37->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("txSlotMap", apache::thrift::protocol::T_MAP, 5);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRUCT, this->txSlotMap.size());
  for (auto _iter38 = this->txSlotMap.begin(); _iter38 != this->txSlotMap.end(); ++_iter38) {
    xfer += prot_->serializedSizeI16(_iter38->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::serializedSizeZC(prot_, &_iter38->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("rxSlotMap", apache::thrift::protocol::T_MAP, 6);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRUCT, this->rxSlotMap.size());
  for (auto _iter39 = this->rxSlotMap.begin(); _iter39 != this->rxSlotMap.end(); ++_iter39) {
    xfer += prot_->serializedSizeI16(_iter39->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::serializedSizeZC(prot_, &_iter39->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationMap::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("BwAllocationMap");
  xfer += prot_->writeFieldBegin("frmCfgType", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->frmCfgType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sframesPerBWGD", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->sframesPerBWGD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("slotsPerFrame", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->slotsPerFrame);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("macAddrList", apache::thrift::protocol::T_MAP, 4);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRING, this->macAddrList.size());
  for (auto _iter40 = this->macAddrList.begin(); _iter40 != this->macAddrList.end(); ++_iter40) {
    xfer += prot_->writeI16(_iter40->first);
    xfer += prot_->writeString(_iter40->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("txSlotMap", apache::thrift::protocol::T_MAP, 5);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRUCT, this->txSlotMap.size());
  for (auto _iter41 = this->txSlotMap.begin(); _iter41 != this->txSlotMap.end(); ++_iter41) {
    xfer += prot_->writeI16(_iter41->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::write(prot_, &_iter41->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("rxSlotMap", apache::thrift::protocol::T_MAP, 6);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I16, apache::thrift::protocol::T_STRUCT, this->rxSlotMap.size());
  for (auto _iter42 = this->rxSlotMap.begin(); _iter42 != this->rxSlotMap.end(); ++_iter42) {
    xfer += prot_->writeI16(_iter42->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::SlotInfo>::write(prot_, &_iter42->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_BwAllocationMapConfigs_nodeBwAllocationMaps_struct_setter>
std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap>& BwAllocationMapConfigs::set_nodeBwAllocationMaps(T_BwAllocationMapConfigs_nodeBwAllocationMaps_struct_setter&& nodeBwAllocationMaps_) {
  nodeBwAllocationMaps = std::forward<T_BwAllocationMapConfigs_nodeBwAllocationMaps_struct_setter>(nodeBwAllocationMaps_);
  __isset.nodeBwAllocationMaps = true;
  return nodeBwAllocationMaps;
}

template <class Protocol_>
uint32_t BwAllocationMapConfigs::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "nodeBwAllocationMaps") {
        fid = 1;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          this->nodeBwAllocationMaps = std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap>();
          uint32_t _size43;
          apache::thrift::protocol::TType _ktype44;
          apache::thrift::protocol::TType _vtype45;
          xfer += iprot->readMapBegin(_ktype44, _vtype45, _size43);
          uint32_t _i47;
          if (_size43 == std::numeric_limits<uint32_t>::max()) {
            for (_i47 = 0; iprot->peekMap(); _i47++) {
              std::string _key48;
              xfer += iprot->readString(_key48);
               ::facebook::terragraph::thrift::BwAllocationMap& _val49 = this->nodeBwAllocationMaps[std::move(_key48)];
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::read(iprot, &_val49);
            }
          }
          else {
            auto const _kreader50 = [&xfer, &iprot](auto& _key52) {
              xfer += iprot->readString(_key52);
            }
            ;
            auto const _vreader51 = [&xfer, &iprot](auto& _val53) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::read(iprot, &_val53);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->nodeBwAllocationMaps, _size43, _kreader50, _vreader51);
          }
          xfer += iprot->readMapEnd();
          this->__isset.nodeBwAllocationMaps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationMapConfigs::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BwAllocationMapConfigs");
  xfer += prot_->serializedFieldSize("nodeBwAllocationMaps", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->nodeBwAllocationMaps.size());
  for (auto _iter54 = this->nodeBwAllocationMaps.begin(); _iter54 != this->nodeBwAllocationMaps.end(); ++_iter54) {
    xfer += prot_->serializedSizeString(_iter54->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::serializedSize(prot_, &_iter54->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationMapConfigs::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BwAllocationMapConfigs");
  xfer += prot_->serializedFieldSize("nodeBwAllocationMaps", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->nodeBwAllocationMaps.size());
  for (auto _iter55 = this->nodeBwAllocationMaps.begin(); _iter55 != this->nodeBwAllocationMaps.end(); ++_iter55) {
    xfer += prot_->serializedSizeString(_iter55->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::serializedSizeZC(prot_, &_iter55->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationMapConfigs::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("BwAllocationMapConfigs");
  xfer += prot_->writeFieldBegin("nodeBwAllocationMaps", apache::thrift::protocol::T_MAP, 1);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->nodeBwAllocationMaps.size());
  for (auto _iter56 = this->nodeBwAllocationMaps.begin(); _iter56 != this->nodeBwAllocationMaps.end(); ++_iter56) {
    xfer += prot_->writeString(_iter56->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::write(prot_, &_iter56->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t LinkAirtime::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "macAddress") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "txIdeal") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "txMin") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "txMax") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "rxIdeal") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "rxMin") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "rxMax") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->macAddress);
          this->__isset.macAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->txIdeal);
          this->__isset.txIdeal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->txMin);
          this->__isset.txMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->txMax);
          this->__isset.txMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->rxIdeal);
          this->__isset.rxIdeal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->rxMin);
          this->__isset.rxMin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->rxMax);
          this->__isset.rxMax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t LinkAirtime::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("LinkAirtime");
  xfer += prot_->serializedFieldSize("macAddress", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->macAddress);
  xfer += prot_->serializedFieldSize("txIdeal", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->txIdeal);
  xfer += prot_->serializedFieldSize("txMin", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->txMin);
  xfer += prot_->serializedFieldSize("txMax", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->txMax);
  xfer += prot_->serializedFieldSize("rxIdeal", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->rxIdeal);
  xfer += prot_->serializedFieldSize("rxMin", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->rxMin);
  xfer += prot_->serializedFieldSize("rxMax", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->rxMax);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t LinkAirtime::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("LinkAirtime");
  xfer += prot_->serializedFieldSize("macAddress", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->macAddress);
  xfer += prot_->serializedFieldSize("txIdeal", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->txIdeal);
  xfer += prot_->serializedFieldSize("txMin", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->txMin);
  xfer += prot_->serializedFieldSize("txMax", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->serializedSizeI16(this->txMax);
  xfer += prot_->serializedFieldSize("rxIdeal", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->rxIdeal);
  xfer += prot_->serializedFieldSize("rxMin", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->serializedSizeI16(this->rxMin);
  xfer += prot_->serializedFieldSize("rxMax", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->rxMax);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t LinkAirtime::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("LinkAirtime");
  xfer += prot_->writeFieldBegin("macAddress", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->macAddress);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("txIdeal", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->txIdeal);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("txMin", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->txMin);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("txMax", apache::thrift::protocol::T_I16, 4);
  xfer += prot_->writeI16(this->txMax);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("rxIdeal", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->rxIdeal);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("rxMin", apache::thrift::protocol::T_I16, 6);
  xfer += prot_->writeI16(this->rxMin);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("rxMax", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->writeI16(this->rxMax);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_BwAllocationAirtimeConfig_airtimes_struct_setter>
std::vector< ::facebook::terragraph::thrift::LinkAirtime>& BwAllocationAirtimeConfig::set_airtimes(T_BwAllocationAirtimeConfig_airtimes_struct_setter&& airtimes_) {
  airtimes = std::forward<T_BwAllocationAirtimeConfig_airtimes_struct_setter>(airtimes_);
  __isset.airtimes = true;
  return airtimes;
}

template <class Protocol_>
uint32_t BwAllocationAirtimeConfig::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "airtimes") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->airtimes = std::vector< ::facebook::terragraph::thrift::LinkAirtime>();
          uint32_t _size57;
          apache::thrift::protocol::TType _etype60;
          xfer += iprot->readListBegin(_etype60, _size57);
          uint32_t _i61;
          if (_size57 == std::numeric_limits<uint32_t>::max()) {
            for (_i61 = 0; iprot->peekList(); _i61++) {
              this->airtimes.resize(_i61 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::LinkAirtime>::read(iprot, &this->airtimes[_i61]);
            }
          }
          else {
            this->airtimes.resize(_size57);
            for (_i61 = 0; _i61 < _size57; ++_i61) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::LinkAirtime>::read(iprot, &this->airtimes[_i61]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.airtimes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationAirtimeConfig::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BwAllocationAirtimeConfig");
  xfer += prot_->serializedFieldSize("airtimes", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->airtimes.size());
  for (auto _iter62 = this->airtimes.begin(); _iter62 != this->airtimes.end(); ++_iter62) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::LinkAirtime>::serializedSize(prot_, &(*_iter62));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationAirtimeConfig::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("BwAllocationAirtimeConfig");
  xfer += prot_->serializedFieldSize("airtimes", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->airtimes.size());
  for (auto _iter63 = this->airtimes.begin(); _iter63 != this->airtimes.end(); ++_iter63) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::LinkAirtime>::serializedSizeZC(prot_, &(*_iter63));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t BwAllocationAirtimeConfig::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("BwAllocationAirtimeConfig");
  xfer += prot_->writeFieldBegin("airtimes", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->airtimes.size());
  for (auto _iter64 = this->airtimes.begin(); _iter64 != this->airtimes.end(); ++_iter64) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::LinkAirtime>::write(prot_, &(*_iter64));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
