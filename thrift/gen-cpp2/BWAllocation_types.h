/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>



namespace facebook { namespace terragraph { namespace thrift {

class SlotInfo;
class BwAllocationMap;
class BwAllocationMapConfigs;
class LinkAirtime;
class BwAllocationAirtimeConfig;

enum class SlotAttrib {
  UNRSVD_SLOT = 0,
  BF_RSVD_SLOT = 1,
  MGMT_RSVD_SLOT = 2
};

extern const typename apache::thrift::detail::TEnumMapFactory<SlotAttrib, SlotAttrib>::ValuesToNamesMapType _SlotAttrib_VALUES_TO_NAMES;
extern const typename apache::thrift::detail::TEnumMapFactory<SlotAttrib, SlotAttrib>::NamesToValuesMapType _SlotAttrib_NAMES_TO_VALUES;

}}} // facebook::terragraph::thrift
namespace std {

template<> struct hash<typename  ::facebook::terragraph::thrift::SlotAttrib> : public apache::thrift::detail::enum_hash<typename  ::facebook::terragraph::thrift::SlotAttrib> {};
template<> struct equal_to<typename  ::facebook::terragraph::thrift::SlotAttrib> : public apache::thrift::detail::enum_equal_to<typename  ::facebook::terragraph::thrift::SlotAttrib> {};

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::SlotAttrib, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::SlotAttrib>::enumerators();
template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::SlotAttrib>::findName( ::facebook::terragraph::thrift::SlotAttrib value);
template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::SlotAttrib>::findValue(const char* name,  ::facebook::terragraph::thrift::SlotAttrib* outValue);

template <> constexpr  ::facebook::terragraph::thrift::SlotAttrib TEnumTraits< ::facebook::terragraph::thrift::SlotAttrib>::min() {
  return  ::facebook::terragraph::thrift::SlotAttrib::UNRSVD_SLOT;
}

template <> constexpr  ::facebook::terragraph::thrift::SlotAttrib TEnumTraits< ::facebook::terragraph::thrift::SlotAttrib>::max() {
  return  ::facebook::terragraph::thrift::SlotAttrib::MGMT_RSVD_SLOT;
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

typedef int16_t LinkId;

typedef int16_t SlotIdx;

class SlotInfo : private apache::thrift::detail::st::ComparisonOperators<SlotInfo> {
 public:

  SlotInfo() :
      id(0),
      attrib( ::facebook::terragraph::thrift::SlotAttrib()) {}
  // FragileConstructor for use in initialization lists only

  SlotInfo(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::LinkId id__arg,  ::facebook::terragraph::thrift::SlotAttrib attrib__arg) :
      id(std::move(id__arg)),
      attrib(std::move(attrib__arg)) {
    __isset.id = true;
    __isset.attrib = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SlotInfo(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SlotInfo(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    id = arg.move();
    __isset.id = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SlotInfo(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SlotInfo(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    attrib = arg.move();
    __isset.attrib = true;
  }

  SlotInfo(SlotInfo&&) = default;

  SlotInfo(const SlotInfo&) = default;

  SlotInfo& operator=(SlotInfo&&) = default;

  SlotInfo& operator=(const SlotInfo&) = default;
  void __clear();

  virtual ~SlotInfo() throw() {}

   ::facebook::terragraph::thrift::LinkId id;
   ::facebook::terragraph::thrift::SlotAttrib attrib;

  struct __isset {
    void __clear() {
      id = false;
      attrib = false;
    }

    bool id = false;
    bool attrib = false;
  } __isset;
  bool operator==(const SlotInfo& rhs) const;
  bool operator < (const SlotInfo& rhs) const;

   ::facebook::terragraph::thrift::LinkId get_id() const {
    return id;
  }

   ::facebook::terragraph::thrift::LinkId& set_id( ::facebook::terragraph::thrift::LinkId id_) {
    id = id_;
    __isset.id = true;
    return id;
  }

   ::facebook::terragraph::thrift::SlotAttrib get_attrib() const {
    return attrib;
  }

   ::facebook::terragraph::thrift::SlotAttrib& set_attrib( ::facebook::terragraph::thrift::SlotAttrib attrib_) {
    attrib = attrib_;
    __isset.attrib = true;
    return attrib;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SlotInfo& a, SlotInfo& b);
extern template uint32_t SlotInfo::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SlotInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SlotInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SlotInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SlotInfo::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SlotInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SlotInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SlotInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::SlotInfo>::clear( ::facebook::terragraph::thrift::SlotInfo* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::SlotInfo>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SlotInfo>::write(Protocol* proto,  ::facebook::terragraph::thrift::SlotInfo const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SlotInfo>::read(Protocol* proto,  ::facebook::terragraph::thrift::SlotInfo* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SlotInfo>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::SlotInfo const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SlotInfo>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::SlotInfo const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class BwAllocationMap : private apache::thrift::detail::st::ComparisonOperators<BwAllocationMap> {
 public:

  BwAllocationMap() :
      frmCfgType(0),
      sframesPerBWGD(0),
      slotsPerFrame(0) {}
  // FragileConstructor for use in initialization lists only

  BwAllocationMap(apache::thrift::FragileConstructor, int16_t frmCfgType__arg, int16_t sframesPerBWGD__arg, int16_t slotsPerFrame__arg, std::map< ::facebook::terragraph::thrift::LinkId, std::string> macAddrList__arg, std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> txSlotMap__arg, std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> rxSlotMap__arg) :
      frmCfgType(std::move(frmCfgType__arg)),
      sframesPerBWGD(std::move(sframesPerBWGD__arg)),
      slotsPerFrame(std::move(slotsPerFrame__arg)),
      macAddrList(std::move(macAddrList__arg)),
      txSlotMap(std::move(txSlotMap__arg)),
      rxSlotMap(std::move(rxSlotMap__arg)) {
    __isset.frmCfgType = true;
    __isset.sframesPerBWGD = true;
    __isset.slotsPerFrame = true;
    __isset.macAddrList = true;
    __isset.txSlotMap = true;
    __isset.rxSlotMap = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationMap(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationMap(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    frmCfgType = arg.move();
    __isset.frmCfgType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationMap(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationMap(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    sframesPerBWGD = arg.move();
    __isset.sframesPerBWGD = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationMap(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationMap(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    slotsPerFrame = arg.move();
    __isset.slotsPerFrame = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationMap(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationMap(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    macAddrList = arg.move();
    __isset.macAddrList = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationMap(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationMap(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txSlotMap = arg.move();
    __isset.txSlotMap = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationMap(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationMap(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxSlotMap = arg.move();
    __isset.rxSlotMap = true;
  }

  BwAllocationMap(BwAllocationMap&&) = default;

  BwAllocationMap(const BwAllocationMap&) = default;

  BwAllocationMap& operator=(BwAllocationMap&&) = default;

  BwAllocationMap& operator=(const BwAllocationMap&) = default;
  void __clear();

  virtual ~BwAllocationMap() throw() {}

  int16_t frmCfgType;
  int16_t sframesPerBWGD;
  int16_t slotsPerFrame;
  std::map< ::facebook::terragraph::thrift::LinkId, std::string> macAddrList;
  std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> txSlotMap;
  std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> rxSlotMap;

  struct __isset {
    void __clear() {
      frmCfgType = false;
      sframesPerBWGD = false;
      slotsPerFrame = false;
      macAddrList = false;
      txSlotMap = false;
      rxSlotMap = false;
    }

    bool frmCfgType = false;
    bool sframesPerBWGD = false;
    bool slotsPerFrame = false;
    bool macAddrList = false;
    bool txSlotMap = false;
    bool rxSlotMap = false;
  } __isset;
  bool operator==(const BwAllocationMap& rhs) const;
  bool operator < (const BwAllocationMap& rhs) const;

  int16_t get_frmCfgType() const {
    return frmCfgType;
  }

  int16_t& set_frmCfgType(int16_t frmCfgType_) {
    frmCfgType = frmCfgType_;
    __isset.frmCfgType = true;
    return frmCfgType;
  }

  int16_t get_sframesPerBWGD() const {
    return sframesPerBWGD;
  }

  int16_t& set_sframesPerBWGD(int16_t sframesPerBWGD_) {
    sframesPerBWGD = sframesPerBWGD_;
    __isset.sframesPerBWGD = true;
    return sframesPerBWGD;
  }

  int16_t get_slotsPerFrame() const {
    return slotsPerFrame;
  }

  int16_t& set_slotsPerFrame(int16_t slotsPerFrame_) {
    slotsPerFrame = slotsPerFrame_;
    __isset.slotsPerFrame = true;
    return slotsPerFrame;
  }
  const std::map< ::facebook::terragraph::thrift::LinkId, std::string>& get_macAddrList() const&;
  std::map< ::facebook::terragraph::thrift::LinkId, std::string> get_macAddrList() &&;
  template <typename T_BwAllocationMap_macAddrList_struct_setter>
  std::map< ::facebook::terragraph::thrift::LinkId, std::string>& set_macAddrList(T_BwAllocationMap_macAddrList_struct_setter&& macAddrList_);
  const std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& get_txSlotMap() const&;
  std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> get_txSlotMap() &&;
  template <typename T_BwAllocationMap_txSlotMap_struct_setter>
  std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& set_txSlotMap(T_BwAllocationMap_txSlotMap_struct_setter&& txSlotMap_);
  const std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& get_rxSlotMap() const&;
  std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> get_rxSlotMap() &&;
  template <typename T_BwAllocationMap_rxSlotMap_struct_setter>
  std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& set_rxSlotMap(T_BwAllocationMap_rxSlotMap_struct_setter&& rxSlotMap_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(BwAllocationMap& a, BwAllocationMap& b);
extern template uint32_t BwAllocationMap::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t BwAllocationMap::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t BwAllocationMap::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BwAllocationMap::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BwAllocationMap::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t BwAllocationMap::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t BwAllocationMap::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t BwAllocationMap::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMap>::clear( ::facebook::terragraph::thrift::BwAllocationMap* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMap>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMap>::write(Protocol* proto,  ::facebook::terragraph::thrift::BwAllocationMap const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMap>::read(Protocol* proto,  ::facebook::terragraph::thrift::BwAllocationMap* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMap>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::BwAllocationMap const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMap>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::BwAllocationMap const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class BwAllocationMapConfigs : private apache::thrift::detail::st::ComparisonOperators<BwAllocationMapConfigs> {
 public:

  BwAllocationMapConfigs() {}
  // FragileConstructor for use in initialization lists only

  BwAllocationMapConfigs(apache::thrift::FragileConstructor, std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap> nodeBwAllocationMaps__arg) :
      nodeBwAllocationMaps(std::move(nodeBwAllocationMaps__arg)) {
    __isset.nodeBwAllocationMaps = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationMapConfigs(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationMapConfigs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    nodeBwAllocationMaps = arg.move();
    __isset.nodeBwAllocationMaps = true;
  }

  BwAllocationMapConfigs(BwAllocationMapConfigs&&) = default;

  BwAllocationMapConfigs(const BwAllocationMapConfigs&) = default;

  BwAllocationMapConfigs& operator=(BwAllocationMapConfigs&&) = default;

  BwAllocationMapConfigs& operator=(const BwAllocationMapConfigs&) = default;
  void __clear();

  virtual ~BwAllocationMapConfigs() throw() {}

  std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap> nodeBwAllocationMaps;

  struct __isset {
    void __clear() {
      nodeBwAllocationMaps = false;
    }

    bool nodeBwAllocationMaps = false;
  } __isset;
  bool operator==(const BwAllocationMapConfigs& rhs) const;
  bool operator < (const BwAllocationMapConfigs& rhs) const;
  const std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap>& get_nodeBwAllocationMaps() const&;
  std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap> get_nodeBwAllocationMaps() &&;
  template <typename T_BwAllocationMapConfigs_nodeBwAllocationMaps_struct_setter>
  std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap>& set_nodeBwAllocationMaps(T_BwAllocationMapConfigs_nodeBwAllocationMaps_struct_setter&& nodeBwAllocationMaps_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(BwAllocationMapConfigs& a, BwAllocationMapConfigs& b);
extern template uint32_t BwAllocationMapConfigs::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t BwAllocationMapConfigs::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t BwAllocationMapConfigs::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BwAllocationMapConfigs::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BwAllocationMapConfigs::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t BwAllocationMapConfigs::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t BwAllocationMapConfigs::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t BwAllocationMapConfigs::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMapConfigs>::clear( ::facebook::terragraph::thrift::BwAllocationMapConfigs* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMapConfigs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMapConfigs>::write(Protocol* proto,  ::facebook::terragraph::thrift::BwAllocationMapConfigs const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMapConfigs>::read(Protocol* proto,  ::facebook::terragraph::thrift::BwAllocationMapConfigs* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMapConfigs>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::BwAllocationMapConfigs const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationMapConfigs>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::BwAllocationMapConfigs const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class LinkAirtime : private apache::thrift::detail::st::ComparisonOperators<LinkAirtime> {
 public:

  LinkAirtime() :
      txIdeal(0),
      txMin(0),
      txMax(0),
      rxIdeal(0),
      rxMin(0),
      rxMax(0) {}
  // FragileConstructor for use in initialization lists only

  LinkAirtime(apache::thrift::FragileConstructor, std::string macAddress__arg, int16_t txIdeal__arg, int16_t txMin__arg, int16_t txMax__arg, int16_t rxIdeal__arg, int16_t rxMin__arg, int16_t rxMax__arg) :
      macAddress(std::move(macAddress__arg)),
      txIdeal(std::move(txIdeal__arg)),
      txMin(std::move(txMin__arg)),
      txMax(std::move(txMax__arg)),
      rxIdeal(std::move(rxIdeal__arg)),
      rxMin(std::move(rxMin__arg)),
      rxMax(std::move(rxMax__arg)) {
    __isset.macAddress = true;
    __isset.txIdeal = true;
    __isset.txMin = true;
    __isset.txMax = true;
    __isset.rxIdeal = true;
    __isset.rxMin = true;
    __isset.rxMax = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkAirtime(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkAirtime(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    macAddress = arg.move();
    __isset.macAddress = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkAirtime(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkAirtime(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txIdeal = arg.move();
    __isset.txIdeal = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkAirtime(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkAirtime(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txMin = arg.move();
    __isset.txMin = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkAirtime(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkAirtime(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txMax = arg.move();
    __isset.txMax = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkAirtime(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkAirtime(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxIdeal = arg.move();
    __isset.rxIdeal = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkAirtime(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkAirtime(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxMin = arg.move();
    __isset.rxMin = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkAirtime(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkAirtime(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxMax = arg.move();
    __isset.rxMax = true;
  }

  LinkAirtime(LinkAirtime&&) = default;

  LinkAirtime(const LinkAirtime&) = default;

  LinkAirtime& operator=(LinkAirtime&&) = default;

  LinkAirtime& operator=(const LinkAirtime&) = default;
  void __clear();

  virtual ~LinkAirtime() throw() {}

  std::string macAddress;
  int16_t txIdeal;
  int16_t txMin;
  int16_t txMax;
  int16_t rxIdeal;
  int16_t rxMin;
  int16_t rxMax;

  struct __isset {
    void __clear() {
      macAddress = false;
      txIdeal = false;
      txMin = false;
      txMax = false;
      rxIdeal = false;
      rxMin = false;
      rxMax = false;
    }

    bool macAddress = false;
    bool txIdeal = false;
    bool txMin = false;
    bool txMax = false;
    bool rxIdeal = false;
    bool rxMin = false;
    bool rxMax = false;
  } __isset;
  bool operator==(const LinkAirtime& rhs) const;

  bool operator < (const LinkAirtime& rhs) const {
    if (!(macAddress == rhs.macAddress)) {
      return macAddress < rhs.macAddress;
    }
    if (!(txIdeal == rhs.txIdeal)) {
      return txIdeal < rhs.txIdeal;
    }
    if (!(txMin == rhs.txMin)) {
      return txMin < rhs.txMin;
    }
    if (!(txMax == rhs.txMax)) {
      return txMax < rhs.txMax;
    }
    if (!(rxIdeal == rhs.rxIdeal)) {
      return rxIdeal < rhs.rxIdeal;
    }
    if (!(rxMin == rhs.rxMin)) {
      return rxMin < rhs.rxMin;
    }
    if (!(rxMax == rhs.rxMax)) {
      return rxMax < rhs.rxMax;
    }
    return false;
  }

  const std::string& get_macAddress() const& {
    return macAddress;
  }

  std::string get_macAddress() && {
    return std::move(macAddress);
  }

  template <typename T_LinkAirtime_macAddress_struct_setter>
  std::string& set_macAddress(T_LinkAirtime_macAddress_struct_setter&& macAddress_) {
    macAddress = std::forward<T_LinkAirtime_macAddress_struct_setter>(macAddress_);
    __isset.macAddress = true;
    return macAddress;
  }

  int16_t get_txIdeal() const {
    return txIdeal;
  }

  int16_t& set_txIdeal(int16_t txIdeal_) {
    txIdeal = txIdeal_;
    __isset.txIdeal = true;
    return txIdeal;
  }

  int16_t get_txMin() const {
    return txMin;
  }

  int16_t& set_txMin(int16_t txMin_) {
    txMin = txMin_;
    __isset.txMin = true;
    return txMin;
  }

  int16_t get_txMax() const {
    return txMax;
  }

  int16_t& set_txMax(int16_t txMax_) {
    txMax = txMax_;
    __isset.txMax = true;
    return txMax;
  }

  int16_t get_rxIdeal() const {
    return rxIdeal;
  }

  int16_t& set_rxIdeal(int16_t rxIdeal_) {
    rxIdeal = rxIdeal_;
    __isset.rxIdeal = true;
    return rxIdeal;
  }

  int16_t get_rxMin() const {
    return rxMin;
  }

  int16_t& set_rxMin(int16_t rxMin_) {
    rxMin = rxMin_;
    __isset.rxMin = true;
    return rxMin;
  }

  int16_t get_rxMax() const {
    return rxMax;
  }

  int16_t& set_rxMax(int16_t rxMax_) {
    rxMax = rxMax_;
    __isset.rxMax = true;
    return rxMax;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(LinkAirtime& a, LinkAirtime& b);
extern template uint32_t LinkAirtime::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t LinkAirtime::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t LinkAirtime::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t LinkAirtime::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t LinkAirtime::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t LinkAirtime::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t LinkAirtime::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t LinkAirtime::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::LinkAirtime>::clear( ::facebook::terragraph::thrift::LinkAirtime* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::LinkAirtime>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkAirtime>::write(Protocol* proto,  ::facebook::terragraph::thrift::LinkAirtime const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkAirtime>::read(Protocol* proto,  ::facebook::terragraph::thrift::LinkAirtime* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkAirtime>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::LinkAirtime const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkAirtime>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::LinkAirtime const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class BwAllocationAirtimeConfig : private apache::thrift::detail::st::ComparisonOperators<BwAllocationAirtimeConfig> {
 public:

  BwAllocationAirtimeConfig() {}
  // FragileConstructor for use in initialization lists only

  BwAllocationAirtimeConfig(apache::thrift::FragileConstructor, std::vector< ::facebook::terragraph::thrift::LinkAirtime> airtimes__arg) :
      airtimes(std::move(airtimes__arg)) {
    __isset.airtimes = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  BwAllocationAirtimeConfig(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    BwAllocationAirtimeConfig(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    airtimes = arg.move();
    __isset.airtimes = true;
  }

  BwAllocationAirtimeConfig(BwAllocationAirtimeConfig&&) = default;

  BwAllocationAirtimeConfig(const BwAllocationAirtimeConfig&) = default;

  BwAllocationAirtimeConfig& operator=(BwAllocationAirtimeConfig&&) = default;

  BwAllocationAirtimeConfig& operator=(const BwAllocationAirtimeConfig&) = default;
  void __clear();

  virtual ~BwAllocationAirtimeConfig() throw() {}

  std::vector< ::facebook::terragraph::thrift::LinkAirtime> airtimes;

  struct __isset {
    void __clear() {
      airtimes = false;
    }

    bool airtimes = false;
  } __isset;
  bool operator==(const BwAllocationAirtimeConfig& rhs) const;

  bool operator < (const BwAllocationAirtimeConfig& rhs) const {
    if (!(airtimes == rhs.airtimes)) {
      return airtimes < rhs.airtimes;
    }
    return false;
  }
  const std::vector< ::facebook::terragraph::thrift::LinkAirtime>& get_airtimes() const&;
  std::vector< ::facebook::terragraph::thrift::LinkAirtime> get_airtimes() &&;
  template <typename T_BwAllocationAirtimeConfig_airtimes_struct_setter>
  std::vector< ::facebook::terragraph::thrift::LinkAirtime>& set_airtimes(T_BwAllocationAirtimeConfig_airtimes_struct_setter&& airtimes_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(BwAllocationAirtimeConfig& a, BwAllocationAirtimeConfig& b);
extern template uint32_t BwAllocationAirtimeConfig::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t BwAllocationAirtimeConfig::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t BwAllocationAirtimeConfig::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BwAllocationAirtimeConfig::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t BwAllocationAirtimeConfig::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t BwAllocationAirtimeConfig::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t BwAllocationAirtimeConfig::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t BwAllocationAirtimeConfig::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationAirtimeConfig>::clear( ::facebook::terragraph::thrift::BwAllocationAirtimeConfig* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationAirtimeConfig>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationAirtimeConfig>::write(Protocol* proto,  ::facebook::terragraph::thrift::BwAllocationAirtimeConfig const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationAirtimeConfig>::read(Protocol* proto,  ::facebook::terragraph::thrift::BwAllocationAirtimeConfig* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationAirtimeConfig>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::BwAllocationAirtimeConfig const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::BwAllocationAirtimeConfig>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::BwAllocationAirtimeConfig const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
