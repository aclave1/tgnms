/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "Controller_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t ImageMeta::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "md5") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "version") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t ImageMeta::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ImageMeta");
  xfer += prot_->serializedFieldSize("md5", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->md5);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->version);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ImageMeta::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ImageMeta");
  xfer += prot_->serializedFieldSize("md5", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->md5);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->version);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ImageMeta::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ImageMeta");
  xfer += prot_->writeFieldBegin("md5", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->md5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("version", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->version);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_UpgradeStatus_nextImage_struct_setter>
 ::facebook::terragraph::thrift::ImageMeta& UpgradeStatus::set_nextImage(T_UpgradeStatus_nextImage_struct_setter&& nextImage_) {
  nextImage = std::forward<T_UpgradeStatus_nextImage_struct_setter>(nextImage_);
  __isset.nextImage = true;
  return nextImage;
}

template <class Protocol_>
uint32_t UpgradeStatus::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "usType") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "nextImage") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "reason") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->usType = ( ::facebook::terragraph::thrift::UpgradeStatusType)ecast0;
          this->__isset.usType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::ImageMeta>::read(iprot, &this->nextImage);
          this->__isset.nextImage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reason);
          this->__isset.reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t UpgradeStatus::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpgradeStatus");
  xfer += prot_->serializedFieldSize("usType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->usType);
  xfer += prot_->serializedFieldSize("nextImage", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::ImageMeta>::serializedSize(prot_, &this->nextImage);
  xfer += prot_->serializedFieldSize("reason", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->reason);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpgradeStatus::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpgradeStatus");
  xfer += prot_->serializedFieldSize("usType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->usType);
  xfer += prot_->serializedFieldSize("nextImage", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::ImageMeta>::serializedSizeZC(prot_, &this->nextImage);
  xfer += prot_->serializedFieldSize("reason", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->reason);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpgradeStatus::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("UpgradeStatus");
  xfer += prot_->writeFieldBegin("usType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32((int32_t)this->usType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("nextImage", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::ImageMeta>::write(prot_, &this->nextImage);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("reason", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->reason);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t UpgradeReq::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "imageUrl") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "md5") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "urType") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageUrl);
          this->__isset.imageUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->urType = ( ::facebook::terragraph::thrift::UpgradeReqType)ecast1;
          this->__isset.urType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t UpgradeReq::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpgradeReq");
  xfer += prot_->serializedFieldSize("imageUrl", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->imageUrl);
  xfer += prot_->serializedFieldSize("md5", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->md5);
  xfer += prot_->serializedFieldSize("urType", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->urType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpgradeReq::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("UpgradeReq");
  xfer += prot_->serializedFieldSize("imageUrl", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->imageUrl);
  xfer += prot_->serializedFieldSize("md5", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->md5);
  xfer += prot_->serializedFieldSize("urType", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->urType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t UpgradeReq::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("UpgradeReq");
  xfer += prot_->writeFieldBegin("imageUrl", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->imageUrl);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("md5", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->md5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("urType", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)this->urType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t GetStatusDump::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GetStatusDump::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetStatusDump");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetStatusDump::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetStatusDump");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetStatusDump::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GetStatusDump");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_StatusDump_statusReports_struct_setter>
std::map<std::string,  ::facebook::terragraph::thrift::StatusReport>& StatusDump::set_statusReports(T_StatusDump_statusReports_struct_setter&& statusReports_) {
  statusReports = std::forward<T_StatusDump_statusReports_struct_setter>(statusReports_);
  __isset.statusReports = true;
  return statusReports;
}

template <class Protocol_>
uint32_t StatusDump::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "timeStamp") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "statusReports") {
        fid = 2;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeStamp);
          this->__isset.timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          this->statusReports = std::map<std::string,  ::facebook::terragraph::thrift::StatusReport>();
          uint32_t _size2;
          apache::thrift::protocol::TType _ktype3;
          apache::thrift::protocol::TType _vtype4;
          xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
          uint32_t _i6;
          if (_size2 == std::numeric_limits<uint32_t>::max()) {
            for (_i6 = 0; iprot->peekMap(); _i6++) {
              std::string _key7;
              xfer += iprot->readString(_key7);
               ::facebook::terragraph::thrift::StatusReport& _val8 = this->statusReports[std::move(_key7)];
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::StatusReport>::read(iprot, &_val8);
            }
          }
          else {
            auto const _kreader9 = [&xfer, &iprot](auto& _key11) {
              xfer += iprot->readString(_key11);
            }
            ;
            auto const _vreader10 = [&xfer, &iprot](auto& _val12) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::StatusReport>::read(iprot, &_val12);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(this->statusReports, _size2, _kreader9, _vreader10);
          }
          xfer += iprot->readMapEnd();
          this->__isset.statusReports = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StatusDump::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StatusDump");
  xfer += prot_->serializedFieldSize("timeStamp", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->timeStamp);
  xfer += prot_->serializedFieldSize("statusReports", apache::thrift::protocol::T_MAP, 2);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->statusReports.size());
  for (auto _iter13 = this->statusReports.begin(); _iter13 != this->statusReports.end(); ++_iter13) {
    xfer += prot_->serializedSizeString(_iter13->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::StatusReport>::serializedSize(prot_, &_iter13->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StatusDump::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StatusDump");
  xfer += prot_->serializedFieldSize("timeStamp", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->timeStamp);
  xfer += prot_->serializedFieldSize("statusReports", apache::thrift::protocol::T_MAP, 2);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->statusReports.size());
  for (auto _iter14 = this->statusReports.begin(); _iter14 != this->statusReports.end(); ++_iter14) {
    xfer += prot_->serializedSizeString(_iter14->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::StatusReport>::serializedSizeZC(prot_, &_iter14->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StatusDump::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StatusDump");
  xfer += prot_->writeFieldBegin("timeStamp", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->timeStamp);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("statusReports", apache::thrift::protocol::T_MAP, 2);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, this->statusReports.size());
  for (auto _iter15 = this->statusReports.begin(); _iter15 != this->statusReports.end(); ++_iter15) {
    xfer += prot_->writeString(_iter15->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::StatusReport>::write(prot_, &_iter15->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_NodeParams_bwAllocMap_struct_setter>
 ::facebook::terragraph::thrift::BwAllocationMap& NodeParams::set_bwAllocMap(T_NodeParams_bwAllocMap_struct_setter&& bwAllocMap_) {
  bwAllocMap = std::forward<T_NodeParams_bwAllocMap_struct_setter>(bwAllocMap_);
  __isset.bwAllocMap = true;
  return bwAllocMap;
}

template <class Protocol_>
uint32_t NodeParams::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "bwAllocMap") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::read(iprot, &this->bwAllocMap);
          this->__isset.bwAllocMap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t NodeParams::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeParams");
  if (this->__isset.bwAllocMap) {
    xfer += prot_->serializedFieldSize("bwAllocMap", apache::thrift::protocol::T_STRUCT, 1);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::serializedSize(prot_, &this->bwAllocMap);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeParams::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeParams");
  if (this->__isset.bwAllocMap) {
    xfer += prot_->serializedFieldSize("bwAllocMap", apache::thrift::protocol::T_STRUCT, 1);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::serializedSizeZC(prot_, &this->bwAllocMap);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeParams::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NodeParams");
  if (this->__isset.bwAllocMap) {
    xfer += prot_->writeFieldBegin("bwAllocMap", apache::thrift::protocol::T_STRUCT, 1);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::BwAllocationMap>::write(prot_, &this->bwAllocMap);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_StatusReport_upgradeStatus_struct_setter>
 ::facebook::terragraph::thrift::UpgradeStatus& StatusReport::set_upgradeStatus(T_StatusReport_upgradeStatus_struct_setter&& upgradeStatus_) {
  upgradeStatus = std::forward<T_StatusReport_upgradeStatus_struct_setter>(upgradeStatus_);
  __isset.upgradeStatus = true;
  return upgradeStatus;
}

template <class Protocol_>
uint32_t StatusReport::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "timeStamp") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "ipv6Address") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "version") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "isConnected") {
        fid = 4;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "upgradeStatus") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeStamp);
          this->__isset.timeStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipv6Address);
          this->__isset.ipv6Address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isConnected);
          this->__isset.isConnected = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::UpgradeStatus>::read(iprot, &this->upgradeStatus);
          this->__isset.upgradeStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StatusReport::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StatusReport");
  xfer += prot_->serializedFieldSize("timeStamp", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->timeStamp);
  xfer += prot_->serializedFieldSize("ipv6Address", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->ipv6Address);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->version);
  xfer += prot_->serializedFieldSize("isConnected", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->isConnected);
  xfer += prot_->serializedFieldSize("upgradeStatus", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::UpgradeStatus>::serializedSize(prot_, &this->upgradeStatus);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StatusReport::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StatusReport");
  xfer += prot_->serializedFieldSize("timeStamp", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->timeStamp);
  xfer += prot_->serializedFieldSize("ipv6Address", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->ipv6Address);
  xfer += prot_->serializedFieldSize("version", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->version);
  xfer += prot_->serializedFieldSize("isConnected", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(this->isConnected);
  xfer += prot_->serializedFieldSize("upgradeStatus", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::UpgradeStatus>::serializedSizeZC(prot_, &this->upgradeStatus);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StatusReport::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StatusReport");
  xfer += prot_->writeFieldBegin("timeStamp", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->timeStamp);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ipv6Address", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->ipv6Address);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("version", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->version);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("isConnected", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(this->isConnected);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("upgradeStatus", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::UpgradeStatus>::write(prot_, &this->upgradeStatus);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t GetIgnitionState::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GetIgnitionState::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetIgnitionState");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetIgnitionState::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetIgnitionState");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetIgnitionState::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GetIgnitionState");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t IgnitionParams::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "enable") {
        fid = 1;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "linkUpInterval") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->linkUpInterval);
          this->__isset.linkUpInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t IgnitionParams::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IgnitionParams");
  if (this->__isset.enable) {
    xfer += prot_->serializedFieldSize("enable", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->serializedSizeBool(this->enable);
  }
  if (this->__isset.linkUpInterval) {
    xfer += prot_->serializedFieldSize("linkUpInterval", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->linkUpInterval);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IgnitionParams::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IgnitionParams");
  if (this->__isset.enable) {
    xfer += prot_->serializedFieldSize("enable", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->serializedSizeBool(this->enable);
  }
  if (this->__isset.linkUpInterval) {
    xfer += prot_->serializedFieldSize("linkUpInterval", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->linkUpInterval);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IgnitionParams::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("IgnitionParams");
  if (this->__isset.enable) {
    xfer += prot_->writeFieldBegin("enable", apache::thrift::protocol::T_BOOL, 1);
    xfer += prot_->writeBool(this->enable);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.linkUpInterval) {
    xfer += prot_->writeFieldBegin("linkUpInterval", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->linkUpInterval);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t SetLinkStatusReq::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "action") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "initiatorNodeName") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "responderNodeName") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->action = ( ::facebook::terragraph::thrift::LinkActionType)ecast16;
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->initiatorNodeName);
          this->__isset.initiatorNodeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->responderNodeName);
          this->__isset.responderNodeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetLinkStatusReq::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetLinkStatusReq");
  xfer += prot_->serializedFieldSize("action", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->action);
  xfer += prot_->serializedFieldSize("initiatorNodeName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->initiatorNodeName);
  xfer += prot_->serializedFieldSize("responderNodeName", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->responderNodeName);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetLinkStatusReq::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetLinkStatusReq");
  xfer += prot_->serializedFieldSize("action", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->action);
  xfer += prot_->serializedFieldSize("initiatorNodeName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->initiatorNodeName);
  xfer += prot_->serializedFieldSize("responderNodeName", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->responderNodeName);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetLinkStatusReq::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetLinkStatusReq");
  xfer += prot_->writeFieldBegin("action", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32((int32_t)this->action);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("initiatorNodeName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->initiatorNodeName);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("responderNodeName", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->responderNodeName);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t IgnitionCandidate::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "initiatorNodeName") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "linkName") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->initiatorNodeName);
          this->__isset.initiatorNodeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->linkName);
          this->__isset.linkName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t IgnitionCandidate::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IgnitionCandidate");
  xfer += prot_->serializedFieldSize("initiatorNodeName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->initiatorNodeName);
  xfer += prot_->serializedFieldSize("linkName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->linkName);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IgnitionCandidate::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IgnitionCandidate");
  xfer += prot_->serializedFieldSize("initiatorNodeName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->initiatorNodeName);
  xfer += prot_->serializedFieldSize("linkName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->linkName);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IgnitionCandidate::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("IgnitionCandidate");
  xfer += prot_->writeFieldBegin("initiatorNodeName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->initiatorNodeName);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("linkName", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->linkName);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_IgnitionState_visitedNodeNames_struct_setter>
std::vector<std::string>& IgnitionState::set_visitedNodeNames(T_IgnitionState_visitedNodeNames_struct_setter&& visitedNodeNames_) {
  visitedNodeNames = std::forward<T_IgnitionState_visitedNodeNames_struct_setter>(visitedNodeNames_);
  __isset.visitedNodeNames = true;
  return visitedNodeNames;
}

template <typename T_IgnitionState_igCandidates_struct_setter>
std::vector< ::facebook::terragraph::thrift::IgnitionCandidate>& IgnitionState::set_igCandidates(T_IgnitionState_igCandidates_struct_setter&& igCandidates_) {
  igCandidates = std::forward<T_IgnitionState_igCandidates_struct_setter>(igCandidates_);
  __isset.igCandidates = true;
  return igCandidates;
}

template <typename T_IgnitionState_lastIgCandidate_struct_setter>
 ::facebook::terragraph::thrift::IgnitionCandidate& IgnitionState::set_lastIgCandidate(T_IgnitionState_lastIgCandidate_struct_setter&& lastIgCandidate_) {
  lastIgCandidate = std::forward<T_IgnitionState_lastIgCandidate_struct_setter>(lastIgCandidate_);
  __isset.lastIgCandidate = true;
  return lastIgCandidate;
}

template <class Protocol_>
uint32_t IgnitionState::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "visitedNodeNames") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "igCandidates") {
        fid = 2;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "lastIgCandidate") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->visitedNodeNames = std::vector<std::string>();
          uint32_t _size17;
          apache::thrift::protocol::TType _etype20;
          xfer += iprot->readListBegin(_etype20, _size17);
          uint32_t _i21;
          if (_size17 == std::numeric_limits<uint32_t>::max()) {
            for (_i21 = 0; iprot->peekList(); _i21++) {
              this->visitedNodeNames.resize(_i21 + 1);
              xfer += iprot->readString(this->visitedNodeNames[_i21]);
            }
          }
          else {
            this->visitedNodeNames.resize(_size17);
            for (_i21 = 0; _i21 < _size17; ++_i21) {
              xfer += iprot->readString(this->visitedNodeNames[_i21]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.visitedNodeNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->igCandidates = std::vector< ::facebook::terragraph::thrift::IgnitionCandidate>();
          uint32_t _size22;
          apache::thrift::protocol::TType _etype25;
          xfer += iprot->readListBegin(_etype25, _size22);
          uint32_t _i26;
          if (_size22 == std::numeric_limits<uint32_t>::max()) {
            for (_i26 = 0; iprot->peekList(); _i26++) {
              this->igCandidates.resize(_i26 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::read(iprot, &this->igCandidates[_i26]);
            }
          }
          else {
            this->igCandidates.resize(_size22);
            for (_i26 = 0; _i26 < _size22; ++_i26) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::read(iprot, &this->igCandidates[_i26]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.igCandidates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::read(iprot, &this->lastIgCandidate);
          this->__isset.lastIgCandidate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t IgnitionState::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IgnitionState");
  xfer += prot_->serializedFieldSize("visitedNodeNames", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->visitedNodeNames.size());
  for (auto _iter27 = this->visitedNodeNames.begin(); _iter27 != this->visitedNodeNames.end(); ++_iter27) {
    xfer += prot_->serializedSizeString((*_iter27));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("igCandidates", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->igCandidates.size());
  for (auto _iter28 = this->igCandidates.begin(); _iter28 != this->igCandidates.end(); ++_iter28) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::serializedSize(prot_, &(*_iter28));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("lastIgCandidate", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::serializedSize(prot_, &this->lastIgCandidate);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IgnitionState::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("IgnitionState");
  xfer += prot_->serializedFieldSize("visitedNodeNames", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->visitedNodeNames.size());
  for (auto _iter29 = this->visitedNodeNames.begin(); _iter29 != this->visitedNodeNames.end(); ++_iter29) {
    xfer += prot_->serializedSizeString((*_iter29));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("igCandidates", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->igCandidates.size());
  for (auto _iter30 = this->igCandidates.begin(); _iter30 != this->igCandidates.end(); ++_iter30) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::serializedSizeZC(prot_, &(*_iter30));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("lastIgCandidate", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::serializedSizeZC(prot_, &this->lastIgCandidate);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t IgnitionState::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("IgnitionState");
  xfer += prot_->writeFieldBegin("visitedNodeNames", apache::thrift::protocol::T_LIST, 1);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->visitedNodeNames.size());
  for (auto _iter31 = this->visitedNodeNames.begin(); _iter31 != this->visitedNodeNames.end(); ++_iter31) {
    xfer += prot_->writeString((*_iter31));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("igCandidates", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->igCandidates.size());
  for (auto _iter32 = this->igCandidates.begin(); _iter32 != this->igCandidates.end(); ++_iter32) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::write(prot_, &(*_iter32));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lastIgCandidate", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::IgnitionCandidate>::write(prot_, &this->lastIgCandidate);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t SetLinkStatus::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "linkStatusType") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "responderMac") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "responderNodeType") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast33;
          xfer += iprot->readI32(ecast33);
          this->linkStatusType = ( ::facebook::terragraph::thrift::LinkStatusType)ecast33;
          this->__isset.linkStatusType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->responderMac);
          this->__isset.responderMac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->responderNodeType = ( ::facebook::terragraph::thrift::NodeType)ecast34;
          this->__isset.responderNodeType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetLinkStatus::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetLinkStatus");
  xfer += prot_->serializedFieldSize("linkStatusType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->linkStatusType);
  xfer += prot_->serializedFieldSize("responderMac", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->responderMac);
  xfer += prot_->serializedFieldSize("responderNodeType", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->responderNodeType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetLinkStatus::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetLinkStatus");
  xfer += prot_->serializedFieldSize("linkStatusType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->linkStatusType);
  xfer += prot_->serializedFieldSize("responderMac", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->responderMac);
  xfer += prot_->serializedFieldSize("responderNodeType", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)this->responderNodeType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetLinkStatus::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetLinkStatus");
  xfer += prot_->writeFieldBegin("linkStatusType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32((int32_t)this->linkStatusType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("responderMac", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->responderMac);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("responderNodeType", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)this->responderNodeType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t LinkStatus::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "responderMac") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "linkStatusType") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->responderMac);
          this->__isset.responderMac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->linkStatusType = ( ::facebook::terragraph::thrift::LinkStatusType)ecast35;
          this->__isset.linkStatusType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t LinkStatus::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("LinkStatus");
  xfer += prot_->serializedFieldSize("responderMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->responderMac);
  xfer += prot_->serializedFieldSize("linkStatusType", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->linkStatusType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t LinkStatus::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("LinkStatus");
  xfer += prot_->serializedFieldSize("responderMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->responderMac);
  xfer += prot_->serializedFieldSize("linkStatusType", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->linkStatusType);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t LinkStatus::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("LinkStatus");
  xfer += prot_->writeFieldBegin("responderMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->responderMac);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("linkStatusType", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32((int32_t)this->linkStatusType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t GetTopology::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t GetTopology::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetTopology");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetTopology::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("GetTopology");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t GetTopology::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("GetTopology");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t SetNodeStatusReq::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "nodeMac") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "markAllLinksDown") {
        fid = 2;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "markNodeDown") {
        fid = 3;
        ftype = apache::thrift::protocol::T_BOOL;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nodeMac);
          this->__isset.nodeMac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->markAllLinksDown);
          this->__isset.markAllLinksDown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->markNodeDown);
          this->__isset.markNodeDown = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetNodeStatusReq::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeStatusReq");
  xfer += prot_->serializedFieldSize("nodeMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->nodeMac);
  xfer += prot_->serializedFieldSize("markAllLinksDown", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->markAllLinksDown);
  xfer += prot_->serializedFieldSize("markNodeDown", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->markNodeDown);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeStatusReq::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeStatusReq");
  xfer += prot_->serializedFieldSize("nodeMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->nodeMac);
  xfer += prot_->serializedFieldSize("markAllLinksDown", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(this->markAllLinksDown);
  xfer += prot_->serializedFieldSize("markNodeDown", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->markNodeDown);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeStatusReq::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetNodeStatusReq");
  xfer += prot_->writeFieldBegin("nodeMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->nodeMac);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("markAllLinksDown", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(this->markAllLinksDown);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("markNodeDown", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->markNodeDown);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_SetNodeParamsReq_nodeParams_struct_setter>
 ::facebook::terragraph::thrift::NodeParams& SetNodeParamsReq::set_nodeParams(T_SetNodeParamsReq_nodeParams_struct_setter&& nodeParams_) {
  nodeParams = std::forward<T_SetNodeParamsReq_nodeParams_struct_setter>(nodeParams_);
  __isset.nodeParams = true;
  return nodeParams;
}

template <class Protocol_>
uint32_t SetNodeParamsReq::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "nodeMac") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "nodeParams") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nodeMac);
          this->__isset.nodeMac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NodeParams>::read(iprot, &this->nodeParams);
          this->__isset.nodeParams = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetNodeParamsReq::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeParamsReq");
  xfer += prot_->serializedFieldSize("nodeMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->nodeMac);
  if (this->__isset.nodeParams) {
    xfer += prot_->serializedFieldSize("nodeParams", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NodeParams>::serializedSize(prot_, &this->nodeParams);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeParamsReq::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeParamsReq");
  xfer += prot_->serializedFieldSize("nodeMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->nodeMac);
  if (this->__isset.nodeParams) {
    xfer += prot_->serializedFieldSize("nodeParams", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NodeParams>::serializedSizeZC(prot_, &this->nodeParams);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeParamsReq::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetNodeParamsReq");
  xfer += prot_->writeFieldBegin("nodeMac", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->nodeMac);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.nodeParams) {
    xfer += prot_->writeFieldBegin("nodeParams", apache::thrift::protocol::T_STRUCT, 2);
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::NodeParams>::write(prot_, &this->nodeParams);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t SetNodeMacReq::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "nodeName") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "scannedBlob") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nodeName);
          this->__isset.nodeName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->scannedBlob);
          this->__isset.scannedBlob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetNodeMacReq::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeMacReq");
  xfer += prot_->serializedFieldSize("nodeName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->nodeName);
  xfer += prot_->serializedFieldSize("scannedBlob", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->scannedBlob);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeMacReq::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetNodeMacReq");
  xfer += prot_->serializedFieldSize("nodeName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->nodeName);
  xfer += prot_->serializedFieldSize("scannedBlob", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->scannedBlob);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetNodeMacReq::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetNodeMacReq");
  xfer += prot_->writeFieldBegin("nodeName", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->nodeName);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("scannedBlob", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->scannedBlob);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t SetCtrlParams::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ctrlUrl") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ctrlUrl);
          this->__isset.ctrlUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t SetCtrlParams::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetCtrlParams");
  xfer += prot_->serializedFieldSize("ctrlUrl", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->ctrlUrl);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetCtrlParams::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SetCtrlParams");
  xfer += prot_->serializedFieldSize("ctrlUrl", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->ctrlUrl);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SetCtrlParams::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SetCtrlParams");
  xfer += prot_->writeFieldBegin("ctrlUrl", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->ctrlUrl);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t FwOptParams::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "antCodeBook") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "polarity") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "frameConfig") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "numOfPeerSta") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "logModules") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "logSeverity") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "gpioConfig") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "channel") {
        fid = 8;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "swConfig") {
        fid = 9;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "mcs") {
        fid = 10;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txPower") {
        fid = 11;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxBuffer") {
        fid = 12;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "beamConfig") {
        fid = 13;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txBeamIndex") {
        fid = 14;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxBeamIndex") {
        fid = 15;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "statsType") {
        fid = 16;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "dataCollectionType") {
        fid = 17;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "numOfHbLossToFail") {
        fid = 18;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "statsLogInterval") {
        fid = 19;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "statsPrintInterval") {
        fid = 20;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "forceGpsDisable") {
        fid = 21;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "lsmAssocRespTimeout") {
        fid = 22;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "lsmSendAssocReqRetry") {
        fid = 23;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "lsmAssocRespAckTimeout") {
        fid = 24;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "lsmSendAssocRespRetry") {
        fid = 25;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "lsmRepeatAckInterval") {
        fid = 26;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "lsmRepeatAck") {
        fid = 27;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "lsmFirstHeartbTimeout") {
        fid = 28;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txSlot0Start") {
        fid = 29;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txSlot0End") {
        fid = 30;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txSlot1Start") {
        fid = 31;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txSlot1End") {
        fid = 32;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txSlot2Start") {
        fid = 33;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "txSlot2End") {
        fid = 34;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxSlot0Start") {
        fid = 35;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxSlot0End") {
        fid = 36;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxSlot1Start") {
        fid = 37;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxSlot1End") {
        fid = 38;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxSlot2Start") {
        fid = 39;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "rxSlot2End") {
        fid = 40;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "gpsTimeout") {
        fid = 41;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "linkAgc") {
        fid = 42;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "respNodeType") {
        fid = 43;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->antCodeBook);
          this->__isset.antCodeBook = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->polarity);
          this->__isset.polarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->frameConfig);
          this->__isset.frameConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numOfPeerSta);
          this->__isset.numOfPeerSta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->logModules);
          this->__isset.logModules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->logSeverity);
          this->__isset.logSeverity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->gpioConfig);
          this->__isset.gpioConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->channel);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->swConfig);
          this->__isset.swConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mcs);
          this->__isset.mcs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txPower);
          this->__isset.txPower = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxBuffer);
          this->__isset.rxBuffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->beamConfig);
          this->__isset.beamConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txBeamIndex);
          this->__isset.txBeamIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxBeamIndex);
          this->__isset.rxBeamIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->statsType);
          this->__isset.statsType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dataCollectionType);
          this->__isset.dataCollectionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numOfHbLossToFail);
          this->__isset.numOfHbLossToFail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 19:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->statsLogInterval);
          this->__isset.statsLogInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 20:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->statsPrintInterval);
          this->__isset.statsPrintInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 21:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->forceGpsDisable);
          this->__isset.forceGpsDisable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 22:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsmAssocRespTimeout);
          this->__isset.lsmAssocRespTimeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 23:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsmSendAssocReqRetry);
          this->__isset.lsmSendAssocReqRetry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 24:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsmAssocRespAckTimeout);
          this->__isset.lsmAssocRespAckTimeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 25:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsmSendAssocRespRetry);
          this->__isset.lsmSendAssocRespRetry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 26:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsmRepeatAckInterval);
          this->__isset.lsmRepeatAckInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 27:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsmRepeatAck);
          this->__isset.lsmRepeatAck = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 28:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lsmFirstHeartbTimeout);
          this->__isset.lsmFirstHeartbTimeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 29:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txSlot0Start);
          this->__isset.txSlot0Start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 30:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txSlot0End);
          this->__isset.txSlot0End = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 31:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txSlot1Start);
          this->__isset.txSlot1Start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 32:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txSlot1End);
          this->__isset.txSlot1End = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 33:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txSlot2Start);
          this->__isset.txSlot2Start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 34:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->txSlot2End);
          this->__isset.txSlot2End = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 35:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxSlot0Start);
          this->__isset.rxSlot0Start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 36:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxSlot0End);
          this->__isset.rxSlot0End = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 37:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxSlot1Start);
          this->__isset.rxSlot1Start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 38:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxSlot1End);
          this->__isset.rxSlot1End = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 39:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxSlot2Start);
          this->__isset.rxSlot2Start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 40:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rxSlot2End);
          this->__isset.rxSlot2End = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 41:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->gpsTimeout);
          this->__isset.gpsTimeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 42:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->linkAgc);
          this->__isset.linkAgc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 43:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->respNodeType);
          this->__isset.respNodeType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t FwOptParams::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("FwOptParams");
  if (this->__isset.antCodeBook) {
    xfer += prot_->serializedFieldSize("antCodeBook", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->antCodeBook);
  }
  if (this->__isset.polarity) {
    xfer += prot_->serializedFieldSize("polarity", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->polarity);
  }
  if (this->__isset.frameConfig) {
    xfer += prot_->serializedFieldSize("frameConfig", apache::thrift::protocol::T_I64, 3);
    xfer += prot_->serializedSizeI64(this->frameConfig);
  }
  if (this->__isset.numOfPeerSta) {
    xfer += prot_->serializedFieldSize("numOfPeerSta", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->serializedSizeI64(this->numOfPeerSta);
  }
  if (this->__isset.logModules) {
    xfer += prot_->serializedFieldSize("logModules", apache::thrift::protocol::T_I64, 5);
    xfer += prot_->serializedSizeI64(this->logModules);
  }
  if (this->__isset.logSeverity) {
    xfer += prot_->serializedFieldSize("logSeverity", apache::thrift::protocol::T_I64, 6);
    xfer += prot_->serializedSizeI64(this->logSeverity);
  }
  if (this->__isset.gpioConfig) {
    xfer += prot_->serializedFieldSize("gpioConfig", apache::thrift::protocol::T_I64, 7);
    xfer += prot_->serializedSizeI64(this->gpioConfig);
  }
  if (this->__isset.channel) {
    xfer += prot_->serializedFieldSize("channel", apache::thrift::protocol::T_I64, 8);
    xfer += prot_->serializedSizeI64(this->channel);
  }
  if (this->__isset.swConfig) {
    xfer += prot_->serializedFieldSize("swConfig", apache::thrift::protocol::T_I64, 9);
    xfer += prot_->serializedSizeI64(this->swConfig);
  }
  if (this->__isset.mcs) {
    xfer += prot_->serializedFieldSize("mcs", apache::thrift::protocol::T_I64, 10);
    xfer += prot_->serializedSizeI64(this->mcs);
  }
  if (this->__isset.txPower) {
    xfer += prot_->serializedFieldSize("txPower", apache::thrift::protocol::T_I64, 11);
    xfer += prot_->serializedSizeI64(this->txPower);
  }
  if (this->__isset.rxBuffer) {
    xfer += prot_->serializedFieldSize("rxBuffer", apache::thrift::protocol::T_I64, 12);
    xfer += prot_->serializedSizeI64(this->rxBuffer);
  }
  if (this->__isset.beamConfig) {
    xfer += prot_->serializedFieldSize("beamConfig", apache::thrift::protocol::T_I64, 13);
    xfer += prot_->serializedSizeI64(this->beamConfig);
  }
  if (this->__isset.txBeamIndex) {
    xfer += prot_->serializedFieldSize("txBeamIndex", apache::thrift::protocol::T_I64, 14);
    xfer += prot_->serializedSizeI64(this->txBeamIndex);
  }
  if (this->__isset.rxBeamIndex) {
    xfer += prot_->serializedFieldSize("rxBeamIndex", apache::thrift::protocol::T_I64, 15);
    xfer += prot_->serializedSizeI64(this->rxBeamIndex);
  }
  if (this->__isset.statsType) {
    xfer += prot_->serializedFieldSize("statsType", apache::thrift::protocol::T_I64, 16);
    xfer += prot_->serializedSizeI64(this->statsType);
  }
  if (this->__isset.dataCollectionType) {
    xfer += prot_->serializedFieldSize("dataCollectionType", apache::thrift::protocol::T_I64, 17);
    xfer += prot_->serializedSizeI64(this->dataCollectionType);
  }
  if (this->__isset.numOfHbLossToFail) {
    xfer += prot_->serializedFieldSize("numOfHbLossToFail", apache::thrift::protocol::T_I64, 18);
    xfer += prot_->serializedSizeI64(this->numOfHbLossToFail);
  }
  if (this->__isset.statsLogInterval) {
    xfer += prot_->serializedFieldSize("statsLogInterval", apache::thrift::protocol::T_I64, 19);
    xfer += prot_->serializedSizeI64(this->statsLogInterval);
  }
  if (this->__isset.statsPrintInterval) {
    xfer += prot_->serializedFieldSize("statsPrintInterval", apache::thrift::protocol::T_I64, 20);
    xfer += prot_->serializedSizeI64(this->statsPrintInterval);
  }
  if (this->__isset.forceGpsDisable) {
    xfer += prot_->serializedFieldSize("forceGpsDisable", apache::thrift::protocol::T_I64, 21);
    xfer += prot_->serializedSizeI64(this->forceGpsDisable);
  }
  if (this->__isset.lsmAssocRespTimeout) {
    xfer += prot_->serializedFieldSize("lsmAssocRespTimeout", apache::thrift::protocol::T_I64, 22);
    xfer += prot_->serializedSizeI64(this->lsmAssocRespTimeout);
  }
  if (this->__isset.lsmSendAssocReqRetry) {
    xfer += prot_->serializedFieldSize("lsmSendAssocReqRetry", apache::thrift::protocol::T_I64, 23);
    xfer += prot_->serializedSizeI64(this->lsmSendAssocReqRetry);
  }
  if (this->__isset.lsmAssocRespAckTimeout) {
    xfer += prot_->serializedFieldSize("lsmAssocRespAckTimeout", apache::thrift::protocol::T_I64, 24);
    xfer += prot_->serializedSizeI64(this->lsmAssocRespAckTimeout);
  }
  if (this->__isset.lsmSendAssocRespRetry) {
    xfer += prot_->serializedFieldSize("lsmSendAssocRespRetry", apache::thrift::protocol::T_I64, 25);
    xfer += prot_->serializedSizeI64(this->lsmSendAssocRespRetry);
  }
  if (this->__isset.lsmRepeatAckInterval) {
    xfer += prot_->serializedFieldSize("lsmRepeatAckInterval", apache::thrift::protocol::T_I64, 26);
    xfer += prot_->serializedSizeI64(this->lsmRepeatAckInterval);
  }
  if (this->__isset.lsmRepeatAck) {
    xfer += prot_->serializedFieldSize("lsmRepeatAck", apache::thrift::protocol::T_I64, 27);
    xfer += prot_->serializedSizeI64(this->lsmRepeatAck);
  }
  if (this->__isset.lsmFirstHeartbTimeout) {
    xfer += prot_->serializedFieldSize("lsmFirstHeartbTimeout", apache::thrift::protocol::T_I64, 28);
    xfer += prot_->serializedSizeI64(this->lsmFirstHeartbTimeout);
  }
  if (this->__isset.txSlot0Start) {
    xfer += prot_->serializedFieldSize("txSlot0Start", apache::thrift::protocol::T_I64, 29);
    xfer += prot_->serializedSizeI64(this->txSlot0Start);
  }
  if (this->__isset.txSlot0End) {
    xfer += prot_->serializedFieldSize("txSlot0End", apache::thrift::protocol::T_I64, 30);
    xfer += prot_->serializedSizeI64(this->txSlot0End);
  }
  if (this->__isset.txSlot1Start) {
    xfer += prot_->serializedFieldSize("txSlot1Start", apache::thrift::protocol::T_I64, 31);
    xfer += prot_->serializedSizeI64(this->txSlot1Start);
  }
  if (this->__isset.txSlot1End) {
    xfer += prot_->serializedFieldSize("txSlot1End", apache::thrift::protocol::T_I64, 32);
    xfer += prot_->serializedSizeI64(this->txSlot1End);
  }
  if (this->__isset.txSlot2Start) {
    xfer += prot_->serializedFieldSize("txSlot2Start", apache::thrift::protocol::T_I64, 33);
    xfer += prot_->serializedSizeI64(this->txSlot2Start);
  }
  if (this->__isset.txSlot2End) {
    xfer += prot_->serializedFieldSize("txSlot2End", apache::thrift::protocol::T_I64, 34);
    xfer += prot_->serializedSizeI64(this->txSlot2End);
  }
  if (this->__isset.rxSlot0Start) {
    xfer += prot_->serializedFieldSize("rxSlot0Start", apache::thrift::protocol::T_I64, 35);
    xfer += prot_->serializedSizeI64(this->rxSlot0Start);
  }
  if (this->__isset.rxSlot0End) {
    xfer += prot_->serializedFieldSize("rxSlot0End", apache::thrift::protocol::T_I64, 36);
    xfer += prot_->serializedSizeI64(this->rxSlot0End);
  }
  if (this->__isset.rxSlot1Start) {
    xfer += prot_->serializedFieldSize("rxSlot1Start", apache::thrift::protocol::T_I64, 37);
    xfer += prot_->serializedSizeI64(this->rxSlot1Start);
  }
  if (this->__isset.rxSlot1End) {
    xfer += prot_->serializedFieldSize("rxSlot1End", apache::thrift::protocol::T_I64, 38);
    xfer += prot_->serializedSizeI64(this->rxSlot1End);
  }
  if (this->__isset.rxSlot2Start) {
    xfer += prot_->serializedFieldSize("rxSlot2Start", apache::thrift::protocol::T_I64, 39);
    xfer += prot_->serializedSizeI64(this->rxSlot2Start);
  }
  if (this->__isset.rxSlot2End) {
    xfer += prot_->serializedFieldSize("rxSlot2End", apache::thrift::protocol::T_I64, 40);
    xfer += prot_->serializedSizeI64(this->rxSlot2End);
  }
  if (this->__isset.gpsTimeout) {
    xfer += prot_->serializedFieldSize("gpsTimeout", apache::thrift::protocol::T_I64, 41);
    xfer += prot_->serializedSizeI64(this->gpsTimeout);
  }
  if (this->__isset.linkAgc) {
    xfer += prot_->serializedFieldSize("linkAgc", apache::thrift::protocol::T_I64, 42);
    xfer += prot_->serializedSizeI64(this->linkAgc);
  }
  if (this->__isset.respNodeType) {
    xfer += prot_->serializedFieldSize("respNodeType", apache::thrift::protocol::T_I64, 43);
    xfer += prot_->serializedSizeI64(this->respNodeType);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t FwOptParams::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("FwOptParams");
  if (this->__isset.antCodeBook) {
    xfer += prot_->serializedFieldSize("antCodeBook", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->antCodeBook);
  }
  if (this->__isset.polarity) {
    xfer += prot_->serializedFieldSize("polarity", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->polarity);
  }
  if (this->__isset.frameConfig) {
    xfer += prot_->serializedFieldSize("frameConfig", apache::thrift::protocol::T_I64, 3);
    xfer += prot_->serializedSizeI64(this->frameConfig);
  }
  if (this->__isset.numOfPeerSta) {
    xfer += prot_->serializedFieldSize("numOfPeerSta", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->serializedSizeI64(this->numOfPeerSta);
  }
  if (this->__isset.logModules) {
    xfer += prot_->serializedFieldSize("logModules", apache::thrift::protocol::T_I64, 5);
    xfer += prot_->serializedSizeI64(this->logModules);
  }
  if (this->__isset.logSeverity) {
    xfer += prot_->serializedFieldSize("logSeverity", apache::thrift::protocol::T_I64, 6);
    xfer += prot_->serializedSizeI64(this->logSeverity);
  }
  if (this->__isset.gpioConfig) {
    xfer += prot_->serializedFieldSize("gpioConfig", apache::thrift::protocol::T_I64, 7);
    xfer += prot_->serializedSizeI64(this->gpioConfig);
  }
  if (this->__isset.channel) {
    xfer += prot_->serializedFieldSize("channel", apache::thrift::protocol::T_I64, 8);
    xfer += prot_->serializedSizeI64(this->channel);
  }
  if (this->__isset.swConfig) {
    xfer += prot_->serializedFieldSize("swConfig", apache::thrift::protocol::T_I64, 9);
    xfer += prot_->serializedSizeI64(this->swConfig);
  }
  if (this->__isset.mcs) {
    xfer += prot_->serializedFieldSize("mcs", apache::thrift::protocol::T_I64, 10);
    xfer += prot_->serializedSizeI64(this->mcs);
  }
  if (this->__isset.txPower) {
    xfer += prot_->serializedFieldSize("txPower", apache::thrift::protocol::T_I64, 11);
    xfer += prot_->serializedSizeI64(this->txPower);
  }
  if (this->__isset.rxBuffer) {
    xfer += prot_->serializedFieldSize("rxBuffer", apache::thrift::protocol::T_I64, 12);
    xfer += prot_->serializedSizeI64(this->rxBuffer);
  }
  if (this->__isset.beamConfig) {
    xfer += prot_->serializedFieldSize("beamConfig", apache::thrift::protocol::T_I64, 13);
    xfer += prot_->serializedSizeI64(this->beamConfig);
  }
  if (this->__isset.txBeamIndex) {
    xfer += prot_->serializedFieldSize("txBeamIndex", apache::thrift::protocol::T_I64, 14);
    xfer += prot_->serializedSizeI64(this->txBeamIndex);
  }
  if (this->__isset.rxBeamIndex) {
    xfer += prot_->serializedFieldSize("rxBeamIndex", apache::thrift::protocol::T_I64, 15);
    xfer += prot_->serializedSizeI64(this->rxBeamIndex);
  }
  if (this->__isset.statsType) {
    xfer += prot_->serializedFieldSize("statsType", apache::thrift::protocol::T_I64, 16);
    xfer += prot_->serializedSizeI64(this->statsType);
  }
  if (this->__isset.dataCollectionType) {
    xfer += prot_->serializedFieldSize("dataCollectionType", apache::thrift::protocol::T_I64, 17);
    xfer += prot_->serializedSizeI64(this->dataCollectionType);
  }
  if (this->__isset.numOfHbLossToFail) {
    xfer += prot_->serializedFieldSize("numOfHbLossToFail", apache::thrift::protocol::T_I64, 18);
    xfer += prot_->serializedSizeI64(this->numOfHbLossToFail);
  }
  if (this->__isset.statsLogInterval) {
    xfer += prot_->serializedFieldSize("statsLogInterval", apache::thrift::protocol::T_I64, 19);
    xfer += prot_->serializedSizeI64(this->statsLogInterval);
  }
  if (this->__isset.statsPrintInterval) {
    xfer += prot_->serializedFieldSize("statsPrintInterval", apache::thrift::protocol::T_I64, 20);
    xfer += prot_->serializedSizeI64(this->statsPrintInterval);
  }
  if (this->__isset.forceGpsDisable) {
    xfer += prot_->serializedFieldSize("forceGpsDisable", apache::thrift::protocol::T_I64, 21);
    xfer += prot_->serializedSizeI64(this->forceGpsDisable);
  }
  if (this->__isset.lsmAssocRespTimeout) {
    xfer += prot_->serializedFieldSize("lsmAssocRespTimeout", apache::thrift::protocol::T_I64, 22);
    xfer += prot_->serializedSizeI64(this->lsmAssocRespTimeout);
  }
  if (this->__isset.lsmSendAssocReqRetry) {
    xfer += prot_->serializedFieldSize("lsmSendAssocReqRetry", apache::thrift::protocol::T_I64, 23);
    xfer += prot_->serializedSizeI64(this->lsmSendAssocReqRetry);
  }
  if (this->__isset.lsmAssocRespAckTimeout) {
    xfer += prot_->serializedFieldSize("lsmAssocRespAckTimeout", apache::thrift::protocol::T_I64, 24);
    xfer += prot_->serializedSizeI64(this->lsmAssocRespAckTimeout);
  }
  if (this->__isset.lsmSendAssocRespRetry) {
    xfer += prot_->serializedFieldSize("lsmSendAssocRespRetry", apache::thrift::protocol::T_I64, 25);
    xfer += prot_->serializedSizeI64(this->lsmSendAssocRespRetry);
  }
  if (this->__isset.lsmRepeatAckInterval) {
    xfer += prot_->serializedFieldSize("lsmRepeatAckInterval", apache::thrift::protocol::T_I64, 26);
    xfer += prot_->serializedSizeI64(this->lsmRepeatAckInterval);
  }
  if (this->__isset.lsmRepeatAck) {
    xfer += prot_->serializedFieldSize("lsmRepeatAck", apache::thrift::protocol::T_I64, 27);
    xfer += prot_->serializedSizeI64(this->lsmRepeatAck);
  }
  if (this->__isset.lsmFirstHeartbTimeout) {
    xfer += prot_->serializedFieldSize("lsmFirstHeartbTimeout", apache::thrift::protocol::T_I64, 28);
    xfer += prot_->serializedSizeI64(this->lsmFirstHeartbTimeout);
  }
  if (this->__isset.txSlot0Start) {
    xfer += prot_->serializedFieldSize("txSlot0Start", apache::thrift::protocol::T_I64, 29);
    xfer += prot_->serializedSizeI64(this->txSlot0Start);
  }
  if (this->__isset.txSlot0End) {
    xfer += prot_->serializedFieldSize("txSlot0End", apache::thrift::protocol::T_I64, 30);
    xfer += prot_->serializedSizeI64(this->txSlot0End);
  }
  if (this->__isset.txSlot1Start) {
    xfer += prot_->serializedFieldSize("txSlot1Start", apache::thrift::protocol::T_I64, 31);
    xfer += prot_->serializedSizeI64(this->txSlot1Start);
  }
  if (this->__isset.txSlot1End) {
    xfer += prot_->serializedFieldSize("txSlot1End", apache::thrift::protocol::T_I64, 32);
    xfer += prot_->serializedSizeI64(this->txSlot1End);
  }
  if (this->__isset.txSlot2Start) {
    xfer += prot_->serializedFieldSize("txSlot2Start", apache::thrift::protocol::T_I64, 33);
    xfer += prot_->serializedSizeI64(this->txSlot2Start);
  }
  if (this->__isset.txSlot2End) {
    xfer += prot_->serializedFieldSize("txSlot2End", apache::thrift::protocol::T_I64, 34);
    xfer += prot_->serializedSizeI64(this->txSlot2End);
  }
  if (this->__isset.rxSlot0Start) {
    xfer += prot_->serializedFieldSize("rxSlot0Start", apache::thrift::protocol::T_I64, 35);
    xfer += prot_->serializedSizeI64(this->rxSlot0Start);
  }
  if (this->__isset.rxSlot0End) {
    xfer += prot_->serializedFieldSize("rxSlot0End", apache::thrift::protocol::T_I64, 36);
    xfer += prot_->serializedSizeI64(this->rxSlot0End);
  }
  if (this->__isset.rxSlot1Start) {
    xfer += prot_->serializedFieldSize("rxSlot1Start", apache::thrift::protocol::T_I64, 37);
    xfer += prot_->serializedSizeI64(this->rxSlot1Start);
  }
  if (this->__isset.rxSlot1End) {
    xfer += prot_->serializedFieldSize("rxSlot1End", apache::thrift::protocol::T_I64, 38);
    xfer += prot_->serializedSizeI64(this->rxSlot1End);
  }
  if (this->__isset.rxSlot2Start) {
    xfer += prot_->serializedFieldSize("rxSlot2Start", apache::thrift::protocol::T_I64, 39);
    xfer += prot_->serializedSizeI64(this->rxSlot2Start);
  }
  if (this->__isset.rxSlot2End) {
    xfer += prot_->serializedFieldSize("rxSlot2End", apache::thrift::protocol::T_I64, 40);
    xfer += prot_->serializedSizeI64(this->rxSlot2End);
  }
  if (this->__isset.gpsTimeout) {
    xfer += prot_->serializedFieldSize("gpsTimeout", apache::thrift::protocol::T_I64, 41);
    xfer += prot_->serializedSizeI64(this->gpsTimeout);
  }
  if (this->__isset.linkAgc) {
    xfer += prot_->serializedFieldSize("linkAgc", apache::thrift::protocol::T_I64, 42);
    xfer += prot_->serializedSizeI64(this->linkAgc);
  }
  if (this->__isset.respNodeType) {
    xfer += prot_->serializedFieldSize("respNodeType", apache::thrift::protocol::T_I64, 43);
    xfer += prot_->serializedSizeI64(this->respNodeType);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t FwOptParams::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("FwOptParams");
  if (this->__isset.antCodeBook) {
    xfer += prot_->writeFieldBegin("antCodeBook", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->writeI64(this->antCodeBook);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.polarity) {
    xfer += prot_->writeFieldBegin("polarity", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->polarity);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.frameConfig) {
    xfer += prot_->writeFieldBegin("frameConfig", apache::thrift::protocol::T_I64, 3);
    xfer += prot_->writeI64(this->frameConfig);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.numOfPeerSta) {
    xfer += prot_->writeFieldBegin("numOfPeerSta", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->writeI64(this->numOfPeerSta);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.logModules) {
    xfer += prot_->writeFieldBegin("logModules", apache::thrift::protocol::T_I64, 5);
    xfer += prot_->writeI64(this->logModules);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.logSeverity) {
    xfer += prot_->writeFieldBegin("logSeverity", apache::thrift::protocol::T_I64, 6);
    xfer += prot_->writeI64(this->logSeverity);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.gpioConfig) {
    xfer += prot_->writeFieldBegin("gpioConfig", apache::thrift::protocol::T_I64, 7);
    xfer += prot_->writeI64(this->gpioConfig);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.channel) {
    xfer += prot_->writeFieldBegin("channel", apache::thrift::protocol::T_I64, 8);
    xfer += prot_->writeI64(this->channel);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.swConfig) {
    xfer += prot_->writeFieldBegin("swConfig", apache::thrift::protocol::T_I64, 9);
    xfer += prot_->writeI64(this->swConfig);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.mcs) {
    xfer += prot_->writeFieldBegin("mcs", apache::thrift::protocol::T_I64, 10);
    xfer += prot_->writeI64(this->mcs);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txPower) {
    xfer += prot_->writeFieldBegin("txPower", apache::thrift::protocol::T_I64, 11);
    xfer += prot_->writeI64(this->txPower);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxBuffer) {
    xfer += prot_->writeFieldBegin("rxBuffer", apache::thrift::protocol::T_I64, 12);
    xfer += prot_->writeI64(this->rxBuffer);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.beamConfig) {
    xfer += prot_->writeFieldBegin("beamConfig", apache::thrift::protocol::T_I64, 13);
    xfer += prot_->writeI64(this->beamConfig);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txBeamIndex) {
    xfer += prot_->writeFieldBegin("txBeamIndex", apache::thrift::protocol::T_I64, 14);
    xfer += prot_->writeI64(this->txBeamIndex);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxBeamIndex) {
    xfer += prot_->writeFieldBegin("rxBeamIndex", apache::thrift::protocol::T_I64, 15);
    xfer += prot_->writeI64(this->rxBeamIndex);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.statsType) {
    xfer += prot_->writeFieldBegin("statsType", apache::thrift::protocol::T_I64, 16);
    xfer += prot_->writeI64(this->statsType);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.dataCollectionType) {
    xfer += prot_->writeFieldBegin("dataCollectionType", apache::thrift::protocol::T_I64, 17);
    xfer += prot_->writeI64(this->dataCollectionType);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.numOfHbLossToFail) {
    xfer += prot_->writeFieldBegin("numOfHbLossToFail", apache::thrift::protocol::T_I64, 18);
    xfer += prot_->writeI64(this->numOfHbLossToFail);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.statsLogInterval) {
    xfer += prot_->writeFieldBegin("statsLogInterval", apache::thrift::protocol::T_I64, 19);
    xfer += prot_->writeI64(this->statsLogInterval);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.statsPrintInterval) {
    xfer += prot_->writeFieldBegin("statsPrintInterval", apache::thrift::protocol::T_I64, 20);
    xfer += prot_->writeI64(this->statsPrintInterval);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.forceGpsDisable) {
    xfer += prot_->writeFieldBegin("forceGpsDisable", apache::thrift::protocol::T_I64, 21);
    xfer += prot_->writeI64(this->forceGpsDisable);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.lsmAssocRespTimeout) {
    xfer += prot_->writeFieldBegin("lsmAssocRespTimeout", apache::thrift::protocol::T_I64, 22);
    xfer += prot_->writeI64(this->lsmAssocRespTimeout);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.lsmSendAssocReqRetry) {
    xfer += prot_->writeFieldBegin("lsmSendAssocReqRetry", apache::thrift::protocol::T_I64, 23);
    xfer += prot_->writeI64(this->lsmSendAssocReqRetry);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.lsmAssocRespAckTimeout) {
    xfer += prot_->writeFieldBegin("lsmAssocRespAckTimeout", apache::thrift::protocol::T_I64, 24);
    xfer += prot_->writeI64(this->lsmAssocRespAckTimeout);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.lsmSendAssocRespRetry) {
    xfer += prot_->writeFieldBegin("lsmSendAssocRespRetry", apache::thrift::protocol::T_I64, 25);
    xfer += prot_->writeI64(this->lsmSendAssocRespRetry);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.lsmRepeatAckInterval) {
    xfer += prot_->writeFieldBegin("lsmRepeatAckInterval", apache::thrift::protocol::T_I64, 26);
    xfer += prot_->writeI64(this->lsmRepeatAckInterval);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.lsmRepeatAck) {
    xfer += prot_->writeFieldBegin("lsmRepeatAck", apache::thrift::protocol::T_I64, 27);
    xfer += prot_->writeI64(this->lsmRepeatAck);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.lsmFirstHeartbTimeout) {
    xfer += prot_->writeFieldBegin("lsmFirstHeartbTimeout", apache::thrift::protocol::T_I64, 28);
    xfer += prot_->writeI64(this->lsmFirstHeartbTimeout);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txSlot0Start) {
    xfer += prot_->writeFieldBegin("txSlot0Start", apache::thrift::protocol::T_I64, 29);
    xfer += prot_->writeI64(this->txSlot0Start);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txSlot0End) {
    xfer += prot_->writeFieldBegin("txSlot0End", apache::thrift::protocol::T_I64, 30);
    xfer += prot_->writeI64(this->txSlot0End);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txSlot1Start) {
    xfer += prot_->writeFieldBegin("txSlot1Start", apache::thrift::protocol::T_I64, 31);
    xfer += prot_->writeI64(this->txSlot1Start);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txSlot1End) {
    xfer += prot_->writeFieldBegin("txSlot1End", apache::thrift::protocol::T_I64, 32);
    xfer += prot_->writeI64(this->txSlot1End);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txSlot2Start) {
    xfer += prot_->writeFieldBegin("txSlot2Start", apache::thrift::protocol::T_I64, 33);
    xfer += prot_->writeI64(this->txSlot2Start);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.txSlot2End) {
    xfer += prot_->writeFieldBegin("txSlot2End", apache::thrift::protocol::T_I64, 34);
    xfer += prot_->writeI64(this->txSlot2End);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxSlot0Start) {
    xfer += prot_->writeFieldBegin("rxSlot0Start", apache::thrift::protocol::T_I64, 35);
    xfer += prot_->writeI64(this->rxSlot0Start);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxSlot0End) {
    xfer += prot_->writeFieldBegin("rxSlot0End", apache::thrift::protocol::T_I64, 36);
    xfer += prot_->writeI64(this->rxSlot0End);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxSlot1Start) {
    xfer += prot_->writeFieldBegin("rxSlot1Start", apache::thrift::protocol::T_I64, 37);
    xfer += prot_->writeI64(this->rxSlot1Start);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxSlot1End) {
    xfer += prot_->writeFieldBegin("rxSlot1End", apache::thrift::protocol::T_I64, 38);
    xfer += prot_->writeI64(this->rxSlot1End);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxSlot2Start) {
    xfer += prot_->writeFieldBegin("rxSlot2Start", apache::thrift::protocol::T_I64, 39);
    xfer += prot_->writeI64(this->rxSlot2Start);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.rxSlot2End) {
    xfer += prot_->writeFieldBegin("rxSlot2End", apache::thrift::protocol::T_I64, 40);
    xfer += prot_->writeI64(this->rxSlot2End);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.gpsTimeout) {
    xfer += prot_->writeFieldBegin("gpsTimeout", apache::thrift::protocol::T_I64, 41);
    xfer += prot_->writeI64(this->gpsTimeout);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.linkAgc) {
    xfer += prot_->writeFieldBegin("linkAgc", apache::thrift::protocol::T_I64, 42);
    xfer += prot_->writeI64(this->linkAgc);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.respNodeType) {
    xfer += prot_->writeFieldBegin("respNodeType", apache::thrift::protocol::T_I64, 43);
    xfer += prot_->writeI64(this->respNodeType);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_NodeFwParams_nodeInitOptParams_struct_setter>
 ::facebook::terragraph::thrift::FwOptParams& NodeFwParams::set_nodeInitOptParams(T_NodeFwParams_nodeInitOptParams_struct_setter&& nodeInitOptParams_) {
  nodeInitOptParams = std::forward<T_NodeFwParams_nodeInitOptParams_struct_setter>(nodeInitOptParams_);
  __isset.nodeInitOptParams = true;
  return nodeInitOptParams;
}

template <typename T_NodeFwParams_linkOptParams_struct_setter>
 ::facebook::terragraph::thrift::FwOptParams& NodeFwParams::set_linkOptParams(T_NodeFwParams_linkOptParams_struct_setter&& linkOptParams_) {
  linkOptParams = std::forward<T_NodeFwParams_linkOptParams_struct_setter>(linkOptParams_);
  __isset.linkOptParams = true;
  return linkOptParams;
}

template <class Protocol_>
uint32_t NodeFwParams::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "nodeInitOptParams") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "linkOptParams") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::read(iprot, &this->nodeInitOptParams);
          this->__isset.nodeInitOptParams = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::read(iprot, &this->linkOptParams);
          this->__isset.linkOptParams = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t NodeFwParams::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeFwParams");
  xfer += prot_->serializedFieldSize("nodeInitOptParams", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::serializedSize(prot_, &this->nodeInitOptParams);
  xfer += prot_->serializedFieldSize("linkOptParams", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::serializedSize(prot_, &this->linkOptParams);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeFwParams::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("NodeFwParams");
  xfer += prot_->serializedFieldSize("nodeInitOptParams", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::serializedSizeZC(prot_, &this->nodeInitOptParams);
  xfer += prot_->serializedFieldSize("linkOptParams", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::serializedSizeZC(prot_, &this->linkOptParams);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t NodeFwParams::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("NodeFwParams");
  xfer += prot_->writeFieldBegin("nodeInitOptParams", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::write(prot_, &this->nodeInitOptParams);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("linkOptParams", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::FwOptParams>::write(prot_, &this->linkOptParams);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t Message::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "mType") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->mType = ( ::facebook::terragraph::thrift::MessageType)ecast36;
          this->__isset.mType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Message::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Message");
  xfer += prot_->serializedFieldSize("mType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->mType);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Message::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Message");
  xfer += prot_->serializedFieldSize("mType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32((int32_t)this->mType);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Message::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Message");
  xfer += prot_->writeFieldBegin("mType", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32((int32_t)this->mType);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t Hello::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {}
    switch (fid) {
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Hello::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Hello");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Hello::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Hello");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Hello::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Hello");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t E2EAck::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "success") {
        fid = 1;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t E2EAck::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("E2EAck");
  xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->success);
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->message);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t E2EAck::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("E2EAck");
  xfer += prot_->serializedFieldSize("success", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->success);
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->message);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t E2EAck::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("E2EAck");
  xfer += prot_->writeFieldBegin("success", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->success);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->message);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
