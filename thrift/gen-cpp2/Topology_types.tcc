/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "Topology_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t Site::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "name") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "latitude") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "longitude") {
        fid = 3;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "altitude") {
        fid = 4;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Site::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Site");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("latitude", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->latitude);
  xfer += prot_->serializedFieldSize("longitude", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->longitude);
  xfer += prot_->serializedFieldSize("altitude", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->altitude);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Site::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Site");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("latitude", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->latitude);
  xfer += prot_->serializedFieldSize("longitude", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(this->longitude);
  xfer += prot_->serializedFieldSize("altitude", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->serializedSizeDouble(this->altitude);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Site::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Site");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("latitude", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->latitude);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("longitude", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(this->longitude);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("altitude", apache::thrift::protocol::T_DOUBLE, 4);
  xfer += prot_->writeDouble(this->altitude);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t Node::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "name") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "node_type") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "is_primary") {
        fid = 3;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "mac_addr") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "pop_node") {
        fid = 5;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "is_ignited") {
        fid = 6;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "polarity") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "site_name") {
        fid = 100;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ant_azimuth") {
        fid = 101;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "ant_elevation") {
        fid = 102;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->node_type = ( ::facebook::terragraph::thrift::NodeType)ecast0;
          this->__isset.node_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_primary);
          this->__isset.is_primary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_addr);
          this->__isset.mac_addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->pop_node);
          this->__isset.pop_node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_ignited);
          this->__isset.is_ignited = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->polarity = ( ::facebook::terragraph::thrift::PolarityType)ecast1;
          this->__isset.polarity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 100:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->site_name);
          this->__isset.site_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 101:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ant_azimuth);
          this->__isset.ant_azimuth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 102:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ant_elevation);
          this->__isset.ant_elevation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Node::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Node");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("node_type", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->node_type);
  if (this->__isset.is_primary) {
    xfer += prot_->serializedFieldSize("is_primary", apache::thrift::protocol::T_BOOL, 3);
    xfer += prot_->serializedSizeBool(this->is_primary);
  }
  xfer += prot_->serializedFieldSize("mac_addr", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->mac_addr);
  xfer += prot_->serializedFieldSize("pop_node", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->pop_node);
  if (this->__isset.is_ignited) {
    xfer += prot_->serializedFieldSize("is_ignited", apache::thrift::protocol::T_BOOL, 6);
    xfer += prot_->serializedSizeBool(this->is_ignited);
  }
  if (this->__isset.polarity) {
    xfer += prot_->serializedFieldSize("polarity", apache::thrift::protocol::T_I32, 7);
    xfer += prot_->serializedSizeI32((int32_t)this->polarity);
  }
  if (this->__isset.site_name) {
    xfer += prot_->serializedFieldSize("site_name", apache::thrift::protocol::T_STRING, 100);
    xfer += prot_->serializedSizeString(this->site_name);
  }
  if (this->__isset.ant_azimuth) {
    xfer += prot_->serializedFieldSize("ant_azimuth", apache::thrift::protocol::T_DOUBLE, 101);
    xfer += prot_->serializedSizeDouble(this->ant_azimuth);
  }
  if (this->__isset.ant_elevation) {
    xfer += prot_->serializedFieldSize("ant_elevation", apache::thrift::protocol::T_DOUBLE, 102);
    xfer += prot_->serializedSizeDouble(this->ant_elevation);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Node::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Node");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("node_type", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32((int32_t)this->node_type);
  if (this->__isset.is_primary) {
    xfer += prot_->serializedFieldSize("is_primary", apache::thrift::protocol::T_BOOL, 3);
    xfer += prot_->serializedSizeBool(this->is_primary);
  }
  xfer += prot_->serializedFieldSize("mac_addr", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->mac_addr);
  xfer += prot_->serializedFieldSize("pop_node", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->pop_node);
  if (this->__isset.is_ignited) {
    xfer += prot_->serializedFieldSize("is_ignited", apache::thrift::protocol::T_BOOL, 6);
    xfer += prot_->serializedSizeBool(this->is_ignited);
  }
  if (this->__isset.polarity) {
    xfer += prot_->serializedFieldSize("polarity", apache::thrift::protocol::T_I32, 7);
    xfer += prot_->serializedSizeI32((int32_t)this->polarity);
  }
  if (this->__isset.site_name) {
    xfer += prot_->serializedFieldSize("site_name", apache::thrift::protocol::T_STRING, 100);
    xfer += prot_->serializedSizeString(this->site_name);
  }
  if (this->__isset.ant_azimuth) {
    xfer += prot_->serializedFieldSize("ant_azimuth", apache::thrift::protocol::T_DOUBLE, 101);
    xfer += prot_->serializedSizeDouble(this->ant_azimuth);
  }
  if (this->__isset.ant_elevation) {
    xfer += prot_->serializedFieldSize("ant_elevation", apache::thrift::protocol::T_DOUBLE, 102);
    xfer += prot_->serializedSizeDouble(this->ant_elevation);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Node::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Node");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("node_type", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32((int32_t)this->node_type);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.is_primary) {
    xfer += prot_->writeFieldBegin("is_primary", apache::thrift::protocol::T_BOOL, 3);
    xfer += prot_->writeBool(this->is_primary);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("mac_addr", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeString(this->mac_addr);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("pop_node", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->writeBool(this->pop_node);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.is_ignited) {
    xfer += prot_->writeFieldBegin("is_ignited", apache::thrift::protocol::T_BOOL, 6);
    xfer += prot_->writeBool(this->is_ignited);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.polarity) {
    xfer += prot_->writeFieldBegin("polarity", apache::thrift::protocol::T_I32, 7);
    xfer += prot_->writeI32((int32_t)this->polarity);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.site_name) {
    xfer += prot_->writeFieldBegin("site_name", apache::thrift::protocol::T_STRING, 100);
    xfer += prot_->writeString(this->site_name);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.ant_azimuth) {
    xfer += prot_->writeFieldBegin("ant_azimuth", apache::thrift::protocol::T_DOUBLE, 101);
    xfer += prot_->writeDouble(this->ant_azimuth);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.ant_elevation) {
    xfer += prot_->writeFieldBegin("ant_elevation", apache::thrift::protocol::T_DOUBLE, 102);
    xfer += prot_->writeDouble(this->ant_elevation);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <class Protocol_>
uint32_t Link::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "name") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "a_node_name") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "z_node_name") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "link_type") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "is_alive") {
        fid = 5;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "linkup_attempts") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a_node_name);
          this->__isset.a_node_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->z_node_name);
          this->__isset.z_node_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->link_type = ( ::facebook::terragraph::thrift::LinkType)ecast2;
          this->__isset.link_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_alive);
          this->__isset.is_alive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->linkup_attempts);
          this->__isset.linkup_attempts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Link::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Link");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("a_node_name", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->a_node_name);
  xfer += prot_->serializedFieldSize("z_node_name", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->z_node_name);
  xfer += prot_->serializedFieldSize("link_type", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->link_type);
  if (this->__isset.is_alive) {
    xfer += prot_->serializedFieldSize("is_alive", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->serializedSizeBool(this->is_alive);
  }
  if (this->__isset.linkup_attempts) {
    xfer += prot_->serializedFieldSize("linkup_attempts", apache::thrift::protocol::T_I64, 6);
    xfer += prot_->serializedSizeI64(this->linkup_attempts);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Link::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Link");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("a_node_name", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->a_node_name);
  xfer += prot_->serializedFieldSize("z_node_name", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->z_node_name);
  xfer += prot_->serializedFieldSize("link_type", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)this->link_type);
  if (this->__isset.is_alive) {
    xfer += prot_->serializedFieldSize("is_alive", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->serializedSizeBool(this->is_alive);
  }
  if (this->__isset.linkup_attempts) {
    xfer += prot_->serializedFieldSize("linkup_attempts", apache::thrift::protocol::T_I64, 6);
    xfer += prot_->serializedSizeI64(this->linkup_attempts);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Link::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Link");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("a_node_name", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->a_node_name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("z_node_name", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->z_node_name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("link_type", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)this->link_type);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.is_alive) {
    xfer += prot_->writeFieldBegin("is_alive", apache::thrift::protocol::T_BOOL, 5);
    xfer += prot_->writeBool(this->is_alive);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.linkup_attempts) {
    xfer += prot_->writeFieldBegin("linkup_attempts", apache::thrift::protocol::T_I64, 6);
    xfer += prot_->writeI64(this->linkup_attempts);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

template <typename T_Topology_nodes_struct_setter>
std::vector< ::facebook::terragraph::thrift::Node>& Topology::set_nodes(T_Topology_nodes_struct_setter&& nodes_) {
  nodes = std::forward<T_Topology_nodes_struct_setter>(nodes_);
  __isset.nodes = true;
  return nodes;
}

template <typename T_Topology_links_struct_setter>
std::vector< ::facebook::terragraph::thrift::Link>& Topology::set_links(T_Topology_links_struct_setter&& links_) {
  links = std::forward<T_Topology_links_struct_setter>(links_);
  __isset.links = true;
  return links;
}

template <typename T_Topology_sites_struct_setter>
std::vector< ::facebook::terragraph::thrift::Site>& Topology::set_sites(T_Topology_sites_struct_setter&& sites_) {
  sites = std::forward<T_Topology_sites_struct_setter>(sites_);
  __isset.sites = true;
  return sites;
}

template <class Protocol_>
uint32_t Topology::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "name") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "nodes") {
        fid = 2;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "links") {
        fid = 3;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "sites") {
        fid = 4;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->nodes = std::vector< ::facebook::terragraph::thrift::Node>();
          uint32_t _size3;
          apache::thrift::protocol::TType _etype6;
          xfer += iprot->readListBegin(_etype6, _size3);
          uint32_t _i7;
          if (_size3 == std::numeric_limits<uint32_t>::max()) {
            for (_i7 = 0; iprot->peekList(); _i7++) {
              this->nodes.resize(_i7 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Node>::read(iprot, &this->nodes[_i7]);
            }
          }
          else {
            this->nodes.resize(_size3);
            for (_i7 = 0; _i7 < _size3; ++_i7) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Node>::read(iprot, &this->nodes[_i7]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->links = std::vector< ::facebook::terragraph::thrift::Link>();
          uint32_t _size8;
          apache::thrift::protocol::TType _etype11;
          xfer += iprot->readListBegin(_etype11, _size8);
          uint32_t _i12;
          if (_size8 == std::numeric_limits<uint32_t>::max()) {
            for (_i12 = 0; iprot->peekList(); _i12++) {
              this->links.resize(_i12 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Link>::read(iprot, &this->links[_i12]);
            }
          }
          else {
            this->links.resize(_size8);
            for (_i12 = 0; _i12 < _size8; ++_i12) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Link>::read(iprot, &this->links[_i12]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.links = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->sites = std::vector< ::facebook::terragraph::thrift::Site>();
          uint32_t _size13;
          apache::thrift::protocol::TType _etype16;
          xfer += iprot->readListBegin(_etype16, _size13);
          uint32_t _i17;
          if (_size13 == std::numeric_limits<uint32_t>::max()) {
            for (_i17 = 0; iprot->peekList(); _i17++) {
              this->sites.resize(_i17 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Site>::read(iprot, &this->sites[_i17]);
            }
          }
          else {
            this->sites.resize(_size13);
            for (_i17 = 0; _i17 < _size13; ++_i17) {
              xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Site>::read(iprot, &this->sites[_i17]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.sites = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Topology::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Topology");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("nodes", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->nodes.size());
  for (auto _iter18 = this->nodes.begin(); _iter18 != this->nodes.end(); ++_iter18) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Node>::serializedSize(prot_, &(*_iter18));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("links", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->links.size());
  for (auto _iter19 = this->links.begin(); _iter19 != this->links.end(); ++_iter19) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Link>::serializedSize(prot_, &(*_iter19));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("sites", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->sites.size());
  for (auto _iter20 = this->sites.begin(); _iter20 != this->sites.end(); ++_iter20) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Site>::serializedSize(prot_, &(*_iter20));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Topology::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Topology");
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->name);
  xfer += prot_->serializedFieldSize("nodes", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->nodes.size());
  for (auto _iter21 = this->nodes.begin(); _iter21 != this->nodes.end(); ++_iter21) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Node>::serializedSizeZC(prot_, &(*_iter21));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("links", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->links.size());
  for (auto _iter22 = this->links.begin(); _iter22 != this->links.end(); ++_iter22) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Link>::serializedSizeZC(prot_, &(*_iter22));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("sites", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->sites.size());
  for (auto _iter23 = this->sites.begin(); _iter23 != this->sites.end(); ++_iter23) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Site>::serializedSizeZC(prot_, &(*_iter23));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Topology::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Topology");
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("nodes", apache::thrift::protocol::T_LIST, 2);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->nodes.size());
  for (auto _iter24 = this->nodes.begin(); _iter24 != this->nodes.end(); ++_iter24) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Node>::write(prot_, &(*_iter24));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("links", apache::thrift::protocol::T_LIST, 3);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->links.size());
  for (auto _iter25 = this->links.begin(); _iter25 != this->links.end(); ++_iter25) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Link>::write(prot_, &(*_iter25));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sites", apache::thrift::protocol::T_LIST, 4);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->sites.size());
  for (auto _iter26 = this->sites.begin(); _iter26 != this->sites.end(); ++_iter26) {
    xfer += ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Site>::write(prot_, &(*_iter26));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
