/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NetworkConfig_types.h"

#include "NetworkConfig_types.tcc"


#include <algorithm>

namespace facebook { namespace terragraph { namespace thrift {

void NetworkConfig::__clear() {
  ::apache::thrift::Cpp2Ops<  ::facebook::terragraph::thrift::Topology>::clear(&topology);
  latitude = 0;
  longitude = 0;
  zoom_level = 0;
  controller_ip = std::string();
  __isset.__clear();
}

bool NetworkConfig::operator==(const NetworkConfig& rhs) const {
  if (!((topology == rhs.topology))) {
    return false;
  }
  if (!((latitude == rhs.latitude))) {
    return false;
  }
  if (!((longitude == rhs.longitude))) {
    return false;
  }
  if (!((zoom_level == rhs.zoom_level))) {
    return false;
  }
  if (!((controller_ip == rhs.controller_ip))) {
    return false;
  }
  return true;
}

const  ::facebook::terragraph::thrift::Topology& NetworkConfig::get_topology() const& {
  return topology;
}

 ::facebook::terragraph::thrift::Topology NetworkConfig::get_topology() && {
  return std::move(topology);
}

void swap(NetworkConfig& a, NetworkConfig& b) {
  using ::std::swap;
  swap(a.topology, b.topology);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.zoom_level, b.zoom_level);
  swap(a.controller_ip, b.controller_ip);
  swap(a.__isset, b.__isset);
}

template uint32_t NetworkConfig::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t NetworkConfig::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t NetworkConfig::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NetworkConfig::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NetworkConfig::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t NetworkConfig::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t NetworkConfig::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t NetworkConfig::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void NetworkConfigs::__clear() {
  topologies.clear();
  __isset.__clear();
}

bool NetworkConfigs::operator==(const NetworkConfigs& rhs) const {
  if (!((topologies == rhs.topologies))) {
    return false;
  }
  return true;
}

const std::vector< ::facebook::terragraph::thrift::NetworkConfig>& NetworkConfigs::get_topologies() const& {
  return topologies;
}

std::vector< ::facebook::terragraph::thrift::NetworkConfig> NetworkConfigs::get_topologies() && {
  return std::move(topologies);
}

void swap(NetworkConfigs& a, NetworkConfigs& b) {
  using ::std::swap;
  swap(a.topologies, b.topologies);
  swap(a.__isset, b.__isset);
}

template uint32_t NetworkConfigs::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t NetworkConfigs::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t NetworkConfigs::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NetworkConfigs::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t NetworkConfigs::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t NetworkConfigs::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t NetworkConfigs::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t NetworkConfigs::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
