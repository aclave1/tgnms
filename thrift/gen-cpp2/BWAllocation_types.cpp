/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BWAllocation_types.h"

#include "BWAllocation_types.tcc"


#include <algorithm>

namespace facebook { namespace terragraph { namespace thrift {

const typename apache::thrift::detail::TEnumMapFactory<SlotAttrib, SlotAttrib>::ValuesToNamesMapType _SlotAttrib_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<SlotAttrib, SlotAttrib>::makeValuesToNamesMap();
const typename apache::thrift::detail::TEnumMapFactory<SlotAttrib, SlotAttrib>::NamesToValuesMapType _SlotAttrib_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<SlotAttrib, SlotAttrib>::makeNamesToValuesMap();

}}} // facebook::terragraph::thrift
namespace std {

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::SlotAttrib, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::SlotAttrib>::enumerators() {
  static constexpr const std::pair< ::facebook::terragraph::thrift::SlotAttrib, folly::StringPiece> storage[3] = {
    { ::facebook::terragraph::thrift::SlotAttrib::UNRSVD_SLOT, "UNRSVD_SLOT"},
    { ::facebook::terragraph::thrift::SlotAttrib::BF_RSVD_SLOT, "BF_RSVD_SLOT"},
    { ::facebook::terragraph::thrift::SlotAttrib::MGMT_RSVD_SLOT, "MGMT_RSVD_SLOT"},
  };
  return folly::range(storage);
}

template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::SlotAttrib>::findName( ::facebook::terragraph::thrift::SlotAttrib value) {
  return findName( ::facebook::terragraph::thrift::_SlotAttrib_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::SlotAttrib>::findValue(const char* name,  ::facebook::terragraph::thrift::SlotAttrib* outValue) {
  return findValue( ::facebook::terragraph::thrift::_SlotAttrib_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void SlotInfo::__clear() {
  id = 0;
  attrib =  ::facebook::terragraph::thrift::SlotAttrib();
  __isset.__clear();
}

bool SlotInfo::operator==(const SlotInfo& rhs) const {
  if (!((id == rhs.id))) {
    return false;
  }
  if (!((attrib == rhs.attrib))) {
    return false;
  }
  return true;
}

void swap(SlotInfo& a, SlotInfo& b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.attrib, b.attrib);
  swap(a.__isset, b.__isset);
}

template uint32_t SlotInfo::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SlotInfo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SlotInfo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SlotInfo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SlotInfo::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t SlotInfo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SlotInfo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SlotInfo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void BwAllocationMap::__clear() {
  frmCfgType = 0;
  sframesPerBWGD = 0;
  slotsPerFrame = 0;
  macAddrList.clear();
  txSlotMap.clear();
  rxSlotMap.clear();
  __isset.__clear();
}

bool BwAllocationMap::operator==(const BwAllocationMap& rhs) const {
  if (!((frmCfgType == rhs.frmCfgType))) {
    return false;
  }
  if (!((sframesPerBWGD == rhs.sframesPerBWGD))) {
    return false;
  }
  if (!((slotsPerFrame == rhs.slotsPerFrame))) {
    return false;
  }
  if (!((macAddrList == rhs.macAddrList))) {
    return false;
  }
  if (!((txSlotMap == rhs.txSlotMap))) {
    return false;
  }
  if (!((rxSlotMap == rhs.rxSlotMap))) {
    return false;
  }
  return true;
}

const std::map< ::facebook::terragraph::thrift::LinkId, std::string>& BwAllocationMap::get_macAddrList() const& {
  return macAddrList;
}

std::map< ::facebook::terragraph::thrift::LinkId, std::string> BwAllocationMap::get_macAddrList() && {
  return std::move(macAddrList);
}

const std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& BwAllocationMap::get_txSlotMap() const& {
  return txSlotMap;
}

std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> BwAllocationMap::get_txSlotMap() && {
  return std::move(txSlotMap);
}

const std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo>& BwAllocationMap::get_rxSlotMap() const& {
  return rxSlotMap;
}

std::map< ::facebook::terragraph::thrift::SlotIdx,  ::facebook::terragraph::thrift::SlotInfo> BwAllocationMap::get_rxSlotMap() && {
  return std::move(rxSlotMap);
}

void swap(BwAllocationMap& a, BwAllocationMap& b) {
  using ::std::swap;
  swap(a.frmCfgType, b.frmCfgType);
  swap(a.sframesPerBWGD, b.sframesPerBWGD);
  swap(a.slotsPerFrame, b.slotsPerFrame);
  swap(a.macAddrList, b.macAddrList);
  swap(a.txSlotMap, b.txSlotMap);
  swap(a.rxSlotMap, b.rxSlotMap);
  swap(a.__isset, b.__isset);
}

template uint32_t BwAllocationMap::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BwAllocationMap::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BwAllocationMap::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BwAllocationMap::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BwAllocationMap::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t BwAllocationMap::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BwAllocationMap::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BwAllocationMap::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void BwAllocationMapConfigs::__clear() {
  nodeBwAllocationMaps.clear();
  __isset.__clear();
}

bool BwAllocationMapConfigs::operator==(const BwAllocationMapConfigs& rhs) const {
  if (!((nodeBwAllocationMaps == rhs.nodeBwAllocationMaps))) {
    return false;
  }
  return true;
}

const std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap>& BwAllocationMapConfigs::get_nodeBwAllocationMaps() const& {
  return nodeBwAllocationMaps;
}

std::map<std::string,  ::facebook::terragraph::thrift::BwAllocationMap> BwAllocationMapConfigs::get_nodeBwAllocationMaps() && {
  return std::move(nodeBwAllocationMaps);
}

void swap(BwAllocationMapConfigs& a, BwAllocationMapConfigs& b) {
  using ::std::swap;
  swap(a.nodeBwAllocationMaps, b.nodeBwAllocationMaps);
  swap(a.__isset, b.__isset);
}

template uint32_t BwAllocationMapConfigs::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BwAllocationMapConfigs::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BwAllocationMapConfigs::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BwAllocationMapConfigs::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BwAllocationMapConfigs::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t BwAllocationMapConfigs::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BwAllocationMapConfigs::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BwAllocationMapConfigs::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void LinkAirtime::__clear() {
  macAddress = std::string();
  txIdeal = 0;
  txMin = 0;
  txMax = 0;
  rxIdeal = 0;
  rxMin = 0;
  rxMax = 0;
  __isset.__clear();
}

bool LinkAirtime::operator==(const LinkAirtime& rhs) const {
  if (!((macAddress == rhs.macAddress))) {
    return false;
  }
  if (!((txIdeal == rhs.txIdeal))) {
    return false;
  }
  if (!((txMin == rhs.txMin))) {
    return false;
  }
  if (!((txMax == rhs.txMax))) {
    return false;
  }
  if (!((rxIdeal == rhs.rxIdeal))) {
    return false;
  }
  if (!((rxMin == rhs.rxMin))) {
    return false;
  }
  if (!((rxMax == rhs.rxMax))) {
    return false;
  }
  return true;
}

void swap(LinkAirtime& a, LinkAirtime& b) {
  using ::std::swap;
  swap(a.macAddress, b.macAddress);
  swap(a.txIdeal, b.txIdeal);
  swap(a.txMin, b.txMin);
  swap(a.txMax, b.txMax);
  swap(a.rxIdeal, b.rxIdeal);
  swap(a.rxMin, b.rxMin);
  swap(a.rxMax, b.rxMax);
  swap(a.__isset, b.__isset);
}

template uint32_t LinkAirtime::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LinkAirtime::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LinkAirtime::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LinkAirtime::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LinkAirtime::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t LinkAirtime::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LinkAirtime::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LinkAirtime::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

void BwAllocationAirtimeConfig::__clear() {
  airtimes.clear();
  __isset.__clear();
}

bool BwAllocationAirtimeConfig::operator==(const BwAllocationAirtimeConfig& rhs) const {
  if (!((airtimes == rhs.airtimes))) {
    return false;
  }
  return true;
}

const std::vector< ::facebook::terragraph::thrift::LinkAirtime>& BwAllocationAirtimeConfig::get_airtimes() const& {
  return airtimes;
}

std::vector< ::facebook::terragraph::thrift::LinkAirtime> BwAllocationAirtimeConfig::get_airtimes() && {
  return std::move(airtimes);
}

void swap(BwAllocationAirtimeConfig& a, BwAllocationAirtimeConfig& b) {
  using ::std::swap;
  swap(a.airtimes, b.airtimes);
  swap(a.__isset, b.__isset);
}

template uint32_t BwAllocationAirtimeConfig::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t BwAllocationAirtimeConfig::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t BwAllocationAirtimeConfig::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BwAllocationAirtimeConfig::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t BwAllocationAirtimeConfig::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t BwAllocationAirtimeConfig::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t BwAllocationAirtimeConfig::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t BwAllocationAirtimeConfig::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
