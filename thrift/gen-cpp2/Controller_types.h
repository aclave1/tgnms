/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include "BWAllocation_types.h"
#include "Topology_types.h"
#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>



namespace facebook { namespace terragraph { namespace thrift {

class ImageMeta;
class UpgradeStatus;
class UpgradeReq;
class GetStatusDump;
class StatusDump;
class NodeParams;
class StatusReport;
class GetIgnitionState;
class IgnitionParams;
class SetLinkStatusReq;
class IgnitionCandidate;
class IgnitionState;
class SetLinkStatus;
class LinkStatus;
class GetTopology;
class SetNodeStatusReq;
class SetNodeParamsReq;
class SetNodeMacReq;
class SetCtrlParams;
class FwOptParams;
class NodeFwParams;
class Message;
class Hello;
class E2EAck;

enum class MessageType {
  GET_STATUS_DUMP = 101,
  STATUS_DUMP = 121,
  SET_NODE_PARAMS = 141,
  STATUS_REPORT = 161,
  GET_IGNITION_STATE = 201,
  SET_IGNITION_PARAMS = 202,
  SET_LINK_STATUS_REQ = 203,
  IGNITION_STATE = 221,
  SET_LINK_STATUS = 241,
  LINK_STATUS = 261,
  GET_TOPOLOGY = 301,
  SET_NODE_STATUS_REQ = 302,
  SET_NODE_MAC_REQ = 303,
  SET_NODE_PARAMS_REQ = 304,
  TOPOLOGY = 321,
  UPGRADE_REQ = 401,
  SET_UPGRADE_STATUS = 421,
  SET_CTRL_PARAMS = 501,
  DR_SET_GPS_POS = 41,
  NODE_INIT = 51,
  NODE_INIT_NOTIFY = 52,
  DR_SET_LINK_STATUS = 55,
  DR_SET_LINK_STATUS_ACK = 56,
  DR_LINK_STATUS = 57,
  DISSOC_RESPONSE = 58,
  DISSOC_NOTIFY = 59,
  FW_SET_NODE_PARAMS = 60,
  DR_SET_NODE_PARAMS_ACK = 61,
  FW_SET_NODE_PARAMS_ACK = 62,
  FW_STATS = 63,
  FW_STATS_CONFIGURE_REQ = 64,
  FW_STATS_CONFIGURE_RESP = 65,
  FW_STATS_CONFIGURE_NOTIFY = 66,
  PHY_LA_LOOKUP_CONFIG_REQ = 67,
  PHY_LA_LOOKUP_CONFIG_RESP = 68,
  PHY_LA_LOOKUP_CONFIG_NOTIFY = 69,
  GPS_ENABLE_REQ = 70,
  GPS_ENABLE_RESP = 71,
  GPS_ENABLE_NOTIFY = 72,
  NONE = 1001,
  HELLO = 1002,
  E2E_ACK = 1003,
  TEST = 1004
};

extern const typename apache::thrift::detail::TEnumMapFactory<MessageType, MessageType>::ValuesToNamesMapType _MessageType_VALUES_TO_NAMES;
extern const typename apache::thrift::detail::TEnumMapFactory<MessageType, MessageType>::NamesToValuesMapType _MessageType_NAMES_TO_VALUES;

}}} // facebook::terragraph::thrift
namespace std {

template<> struct hash<typename  ::facebook::terragraph::thrift::MessageType> : public apache::thrift::detail::enum_hash<typename  ::facebook::terragraph::thrift::MessageType> {};
template<> struct equal_to<typename  ::facebook::terragraph::thrift::MessageType> : public apache::thrift::detail::enum_equal_to<typename  ::facebook::terragraph::thrift::MessageType> {};

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::MessageType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::MessageType>::enumerators();
template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::MessageType>::findName( ::facebook::terragraph::thrift::MessageType value);
template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::MessageType>::findValue(const char* name,  ::facebook::terragraph::thrift::MessageType* outValue);

template <> constexpr  ::facebook::terragraph::thrift::MessageType TEnumTraits< ::facebook::terragraph::thrift::MessageType>::min() {
  return  ::facebook::terragraph::thrift::MessageType::DR_SET_GPS_POS;
}

template <> constexpr  ::facebook::terragraph::thrift::MessageType TEnumTraits< ::facebook::terragraph::thrift::MessageType>::max() {
  return  ::facebook::terragraph::thrift::MessageType::TEST;
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

enum class LinkActionType {
  LINK_UP = 1,
  LINK_DOWN = 2,
  LINK_ADD = 3,
  LINK_DELETE = 4
};

extern const typename apache::thrift::detail::TEnumMapFactory<LinkActionType, LinkActionType>::ValuesToNamesMapType _LinkActionType_VALUES_TO_NAMES;
extern const typename apache::thrift::detail::TEnumMapFactory<LinkActionType, LinkActionType>::NamesToValuesMapType _LinkActionType_NAMES_TO_VALUES;

}}} // facebook::terragraph::thrift
namespace std {

template<> struct hash<typename  ::facebook::terragraph::thrift::LinkActionType> : public apache::thrift::detail::enum_hash<typename  ::facebook::terragraph::thrift::LinkActionType> {};
template<> struct equal_to<typename  ::facebook::terragraph::thrift::LinkActionType> : public apache::thrift::detail::enum_equal_to<typename  ::facebook::terragraph::thrift::LinkActionType> {};

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::LinkActionType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::LinkActionType>::enumerators();
template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::LinkActionType>::findName( ::facebook::terragraph::thrift::LinkActionType value);
template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::LinkActionType>::findValue(const char* name,  ::facebook::terragraph::thrift::LinkActionType* outValue);

template <> constexpr  ::facebook::terragraph::thrift::LinkActionType TEnumTraits< ::facebook::terragraph::thrift::LinkActionType>::min() {
  return  ::facebook::terragraph::thrift::LinkActionType::LINK_UP;
}

template <> constexpr  ::facebook::terragraph::thrift::LinkActionType TEnumTraits< ::facebook::terragraph::thrift::LinkActionType>::max() {
  return  ::facebook::terragraph::thrift::LinkActionType::LINK_DELETE;
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

enum class LinkStatusType {
  LINK_UP = 1,
  LINK_DOWN = 2
};

extern const typename apache::thrift::detail::TEnumMapFactory<LinkStatusType, LinkStatusType>::ValuesToNamesMapType _LinkStatusType_VALUES_TO_NAMES;
extern const typename apache::thrift::detail::TEnumMapFactory<LinkStatusType, LinkStatusType>::NamesToValuesMapType _LinkStatusType_NAMES_TO_VALUES;

}}} // facebook::terragraph::thrift
namespace std {

template<> struct hash<typename  ::facebook::terragraph::thrift::LinkStatusType> : public apache::thrift::detail::enum_hash<typename  ::facebook::terragraph::thrift::LinkStatusType> {};
template<> struct equal_to<typename  ::facebook::terragraph::thrift::LinkStatusType> : public apache::thrift::detail::enum_equal_to<typename  ::facebook::terragraph::thrift::LinkStatusType> {};

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::LinkStatusType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::LinkStatusType>::enumerators();
template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::LinkStatusType>::findName( ::facebook::terragraph::thrift::LinkStatusType value);
template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::LinkStatusType>::findValue(const char* name,  ::facebook::terragraph::thrift::LinkStatusType* outValue);

template <> constexpr  ::facebook::terragraph::thrift::LinkStatusType TEnumTraits< ::facebook::terragraph::thrift::LinkStatusType>::min() {
  return  ::facebook::terragraph::thrift::LinkStatusType::LINK_UP;
}

template <> constexpr  ::facebook::terragraph::thrift::LinkStatusType TEnumTraits< ::facebook::terragraph::thrift::LinkStatusType>::max() {
  return  ::facebook::terragraph::thrift::LinkStatusType::LINK_DOWN;
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

enum class UpgradeStatusType {
  NONE = 10,
  DOWNLOADING_IMAGE = 20,
  DOWNLOAD_FAILED = 30,
  FLASHING_IMAGE = 40,
  FLASH_FAILED = 50,
  READY_TO_REBOOT = 60
};

extern const typename apache::thrift::detail::TEnumMapFactory<UpgradeStatusType, UpgradeStatusType>::ValuesToNamesMapType _UpgradeStatusType_VALUES_TO_NAMES;
extern const typename apache::thrift::detail::TEnumMapFactory<UpgradeStatusType, UpgradeStatusType>::NamesToValuesMapType _UpgradeStatusType_NAMES_TO_VALUES;

}}} // facebook::terragraph::thrift
namespace std {

template<> struct hash<typename  ::facebook::terragraph::thrift::UpgradeStatusType> : public apache::thrift::detail::enum_hash<typename  ::facebook::terragraph::thrift::UpgradeStatusType> {};
template<> struct equal_to<typename  ::facebook::terragraph::thrift::UpgradeStatusType> : public apache::thrift::detail::enum_equal_to<typename  ::facebook::terragraph::thrift::UpgradeStatusType> {};

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::UpgradeStatusType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeStatusType>::enumerators();
template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeStatusType>::findName( ::facebook::terragraph::thrift::UpgradeStatusType value);
template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeStatusType>::findValue(const char* name,  ::facebook::terragraph::thrift::UpgradeStatusType* outValue);

template <> constexpr  ::facebook::terragraph::thrift::UpgradeStatusType TEnumTraits< ::facebook::terragraph::thrift::UpgradeStatusType>::min() {
  return  ::facebook::terragraph::thrift::UpgradeStatusType::NONE;
}

template <> constexpr  ::facebook::terragraph::thrift::UpgradeStatusType TEnumTraits< ::facebook::terragraph::thrift::UpgradeStatusType>::max() {
  return  ::facebook::terragraph::thrift::UpgradeStatusType::READY_TO_REBOOT;
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

enum class UpgradeReqType {
  PREPARE_UPGRADE = 10,
  COMMIT_UPGRADE = 20
};

extern const typename apache::thrift::detail::TEnumMapFactory<UpgradeReqType, UpgradeReqType>::ValuesToNamesMapType _UpgradeReqType_VALUES_TO_NAMES;
extern const typename apache::thrift::detail::TEnumMapFactory<UpgradeReqType, UpgradeReqType>::NamesToValuesMapType _UpgradeReqType_NAMES_TO_VALUES;

}}} // facebook::terragraph::thrift
namespace std {

template<> struct hash<typename  ::facebook::terragraph::thrift::UpgradeReqType> : public apache::thrift::detail::enum_hash<typename  ::facebook::terragraph::thrift::UpgradeReqType> {};
template<> struct equal_to<typename  ::facebook::terragraph::thrift::UpgradeReqType> : public apache::thrift::detail::enum_equal_to<typename  ::facebook::terragraph::thrift::UpgradeReqType> {};

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::facebook::terragraph::thrift::UpgradeReqType, folly::StringPiece>*> TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeReqType>::enumerators();
template <> const char* TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeReqType>::findName( ::facebook::terragraph::thrift::UpgradeReqType value);
template <> bool TEnumTraitsBase< ::facebook::terragraph::thrift::UpgradeReqType>::findValue(const char* name,  ::facebook::terragraph::thrift::UpgradeReqType* outValue);

template <> constexpr  ::facebook::terragraph::thrift::UpgradeReqType TEnumTraits< ::facebook::terragraph::thrift::UpgradeReqType>::min() {
  return  ::facebook::terragraph::thrift::UpgradeReqType::PREPARE_UPGRADE;
}

template <> constexpr  ::facebook::terragraph::thrift::UpgradeReqType TEnumTraits< ::facebook::terragraph::thrift::UpgradeReqType>::max() {
  return  ::facebook::terragraph::thrift::UpgradeReqType::COMMIT_UPGRADE;
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class ImageMeta : private apache::thrift::detail::st::ComparisonOperators<ImageMeta> {
 public:

  ImageMeta() {}
  // FragileConstructor for use in initialization lists only

  ImageMeta(apache::thrift::FragileConstructor, std::string md5__arg, std::string version__arg) :
      md5(std::move(md5__arg)),
      version(std::move(version__arg)) {
    __isset.md5 = true;
    __isset.version = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ImageMeta(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ImageMeta(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    md5 = arg.move();
    __isset.md5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  ImageMeta(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    ImageMeta(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    version = arg.move();
    __isset.version = true;
  }

  ImageMeta(ImageMeta&&) = default;

  ImageMeta(const ImageMeta&) = default;

  ImageMeta& operator=(ImageMeta&&) = default;

  ImageMeta& operator=(const ImageMeta&) = default;
  void __clear();

  virtual ~ImageMeta() throw() {}

  std::string md5;
  std::string version;

  struct __isset {
    void __clear() {
      md5 = false;
      version = false;
    }

    bool md5 = false;
    bool version = false;
  } __isset;
  bool operator==(const ImageMeta& rhs) const;

  bool operator < (const ImageMeta& rhs) const {
    if (!(md5 == rhs.md5)) {
      return md5 < rhs.md5;
    }
    if (!(version == rhs.version)) {
      return version < rhs.version;
    }
    return false;
  }

  const std::string& get_md5() const& {
    return md5;
  }

  std::string get_md5() && {
    return std::move(md5);
  }

  template <typename T_ImageMeta_md5_struct_setter>
  std::string& set_md5(T_ImageMeta_md5_struct_setter&& md5_) {
    md5 = std::forward<T_ImageMeta_md5_struct_setter>(md5_);
    __isset.md5 = true;
    return md5;
  }

  const std::string& get_version() const& {
    return version;
  }

  std::string get_version() && {
    return std::move(version);
  }

  template <typename T_ImageMeta_version_struct_setter>
  std::string& set_version(T_ImageMeta_version_struct_setter&& version_) {
    version = std::forward<T_ImageMeta_version_struct_setter>(version_);
    __isset.version = true;
    return version;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(ImageMeta& a, ImageMeta& b);
extern template uint32_t ImageMeta::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ImageMeta::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ImageMeta::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ImageMeta::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ImageMeta::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ImageMeta::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ImageMeta::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ImageMeta::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::ImageMeta>::clear( ::facebook::terragraph::thrift::ImageMeta* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::ImageMeta>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::ImageMeta>::write(Protocol* proto,  ::facebook::terragraph::thrift::ImageMeta const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::ImageMeta>::read(Protocol* proto,  ::facebook::terragraph::thrift::ImageMeta* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::ImageMeta>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::ImageMeta const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::ImageMeta>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::ImageMeta const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class UpgradeStatus : private apache::thrift::detail::st::ComparisonOperators<UpgradeStatus> {
 public:

  UpgradeStatus() :
      usType( ::facebook::terragraph::thrift::UpgradeStatusType()) {}
  // FragileConstructor for use in initialization lists only

  UpgradeStatus(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::UpgradeStatusType usType__arg,  ::facebook::terragraph::thrift::ImageMeta nextImage__arg, std::string reason__arg) :
      usType(std::move(usType__arg)),
      nextImage(std::move(nextImage__arg)),
      reason(std::move(reason__arg)) {
    __isset.usType = true;
    __isset.nextImage = true;
    __isset.reason = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  UpgradeStatus(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    UpgradeStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    usType = arg.move();
    __isset.usType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  UpgradeStatus(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    UpgradeStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    nextImage = arg.move();
    __isset.nextImage = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  UpgradeStatus(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    UpgradeStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    reason = arg.move();
    __isset.reason = true;
  }

  UpgradeStatus(UpgradeStatus&&) = default;

  UpgradeStatus(const UpgradeStatus&) = default;

  UpgradeStatus& operator=(UpgradeStatus&&) = default;

  UpgradeStatus& operator=(const UpgradeStatus&) = default;
  void __clear();

  virtual ~UpgradeStatus() throw() {}

   ::facebook::terragraph::thrift::UpgradeStatusType usType;
   ::facebook::terragraph::thrift::ImageMeta nextImage;
  std::string reason;

  struct __isset {
    void __clear() {
      usType = false;
      nextImage = false;
      reason = false;
    }

    bool usType = false;
    bool nextImage = false;
    bool reason = false;
  } __isset;
  bool operator==(const UpgradeStatus& rhs) const;

  bool operator < (const UpgradeStatus& rhs) const {
    if (!(usType == rhs.usType)) {
      return usType < rhs.usType;
    }
    if (!(nextImage == rhs.nextImage)) {
      return nextImage < rhs.nextImage;
    }
    if (!(reason == rhs.reason)) {
      return reason < rhs.reason;
    }
    return false;
  }

   ::facebook::terragraph::thrift::UpgradeStatusType get_usType() const {
    return usType;
  }

   ::facebook::terragraph::thrift::UpgradeStatusType& set_usType( ::facebook::terragraph::thrift::UpgradeStatusType usType_) {
    usType = usType_;
    __isset.usType = true;
    return usType;
  }
  const  ::facebook::terragraph::thrift::ImageMeta& get_nextImage() const&;
   ::facebook::terragraph::thrift::ImageMeta get_nextImage() &&;
  template <typename T_UpgradeStatus_nextImage_struct_setter>
   ::facebook::terragraph::thrift::ImageMeta& set_nextImage(T_UpgradeStatus_nextImage_struct_setter&& nextImage_);

  const std::string& get_reason() const& {
    return reason;
  }

  std::string get_reason() && {
    return std::move(reason);
  }

  template <typename T_UpgradeStatus_reason_struct_setter>
  std::string& set_reason(T_UpgradeStatus_reason_struct_setter&& reason_) {
    reason = std::forward<T_UpgradeStatus_reason_struct_setter>(reason_);
    __isset.reason = true;
    return reason;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(UpgradeStatus& a, UpgradeStatus& b);
extern template uint32_t UpgradeStatus::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t UpgradeStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t UpgradeStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t UpgradeStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t UpgradeStatus::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t UpgradeStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t UpgradeStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t UpgradeStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::UpgradeStatus>::clear( ::facebook::terragraph::thrift::UpgradeStatus* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::UpgradeStatus>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeStatus>::write(Protocol* proto,  ::facebook::terragraph::thrift::UpgradeStatus const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeStatus>::read(Protocol* proto,  ::facebook::terragraph::thrift::UpgradeStatus* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeStatus>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::UpgradeStatus const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeStatus>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::UpgradeStatus const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class UpgradeReq : private apache::thrift::detail::st::ComparisonOperators<UpgradeReq> {
 public:

  UpgradeReq() :
      urType( ::facebook::terragraph::thrift::UpgradeReqType()) {}
  // FragileConstructor for use in initialization lists only

  UpgradeReq(apache::thrift::FragileConstructor, std::string imageUrl__arg, std::string md5__arg,  ::facebook::terragraph::thrift::UpgradeReqType urType__arg) :
      imageUrl(std::move(imageUrl__arg)),
      md5(std::move(md5__arg)),
      urType(std::move(urType__arg)) {
    __isset.imageUrl = true;
    __isset.md5 = true;
    __isset.urType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  UpgradeReq(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    UpgradeReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    imageUrl = arg.move();
    __isset.imageUrl = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  UpgradeReq(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    UpgradeReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    md5 = arg.move();
    __isset.md5 = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  UpgradeReq(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    UpgradeReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    urType = arg.move();
    __isset.urType = true;
  }

  UpgradeReq(UpgradeReq&&) = default;

  UpgradeReq(const UpgradeReq&) = default;

  UpgradeReq& operator=(UpgradeReq&&) = default;

  UpgradeReq& operator=(const UpgradeReq&) = default;
  void __clear();

  virtual ~UpgradeReq() throw() {}

  std::string imageUrl;
  std::string md5;
   ::facebook::terragraph::thrift::UpgradeReqType urType;

  struct __isset {
    void __clear() {
      imageUrl = false;
      md5 = false;
      urType = false;
    }

    bool imageUrl = false;
    bool md5 = false;
    bool urType = false;
  } __isset;
  bool operator==(const UpgradeReq& rhs) const;

  bool operator < (const UpgradeReq& rhs) const {
    if (!(imageUrl == rhs.imageUrl)) {
      return imageUrl < rhs.imageUrl;
    }
    if (!(md5 == rhs.md5)) {
      return md5 < rhs.md5;
    }
    if (!(urType == rhs.urType)) {
      return urType < rhs.urType;
    }
    return false;
  }

  const std::string& get_imageUrl() const& {
    return imageUrl;
  }

  std::string get_imageUrl() && {
    return std::move(imageUrl);
  }

  template <typename T_UpgradeReq_imageUrl_struct_setter>
  std::string& set_imageUrl(T_UpgradeReq_imageUrl_struct_setter&& imageUrl_) {
    imageUrl = std::forward<T_UpgradeReq_imageUrl_struct_setter>(imageUrl_);
    __isset.imageUrl = true;
    return imageUrl;
  }

  const std::string& get_md5() const& {
    return md5;
  }

  std::string get_md5() && {
    return std::move(md5);
  }

  template <typename T_UpgradeReq_md5_struct_setter>
  std::string& set_md5(T_UpgradeReq_md5_struct_setter&& md5_) {
    md5 = std::forward<T_UpgradeReq_md5_struct_setter>(md5_);
    __isset.md5 = true;
    return md5;
  }

   ::facebook::terragraph::thrift::UpgradeReqType get_urType() const {
    return urType;
  }

   ::facebook::terragraph::thrift::UpgradeReqType& set_urType( ::facebook::terragraph::thrift::UpgradeReqType urType_) {
    urType = urType_;
    __isset.urType = true;
    return urType;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(UpgradeReq& a, UpgradeReq& b);
extern template uint32_t UpgradeReq::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t UpgradeReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t UpgradeReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t UpgradeReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t UpgradeReq::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t UpgradeReq::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t UpgradeReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t UpgradeReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::UpgradeReq>::clear( ::facebook::terragraph::thrift::UpgradeReq* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::UpgradeReq>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeReq>::write(Protocol* proto,  ::facebook::terragraph::thrift::UpgradeReq const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeReq>::read(Protocol* proto,  ::facebook::terragraph::thrift::UpgradeReq* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeReq>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::UpgradeReq const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::UpgradeReq>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::UpgradeReq const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class GetStatusDump : private apache::thrift::detail::st::ComparisonOperators<GetStatusDump> {
 public:

  GetStatusDump() {}
  // FragileConstructor for use in initialization lists only

  GetStatusDump(apache::thrift::FragileConstructor) {}

  GetStatusDump(GetStatusDump&&) = default;

  GetStatusDump(const GetStatusDump&) = default;

  GetStatusDump& operator=(GetStatusDump&&) = default;

  GetStatusDump& operator=(const GetStatusDump&) = default;

  virtual ~GetStatusDump() throw() {}

  bool operator==(const GetStatusDump& /* rhs */) const;

  bool operator < (const GetStatusDump& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(GetStatusDump& a, GetStatusDump& b);
extern template uint32_t GetStatusDump::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t GetStatusDump::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t GetStatusDump::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t GetStatusDump::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t GetStatusDump::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t GetStatusDump::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t GetStatusDump::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t GetStatusDump::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::GetStatusDump>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetStatusDump>::write(Protocol* proto,  ::facebook::terragraph::thrift::GetStatusDump const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetStatusDump>::read(Protocol* proto,  ::facebook::terragraph::thrift::GetStatusDump* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetStatusDump>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::GetStatusDump const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetStatusDump>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::GetStatusDump const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class StatusDump : private apache::thrift::detail::st::ComparisonOperators<StatusDump> {
 public:

  StatusDump() :
      timeStamp(0) {}
  // FragileConstructor for use in initialization lists only

  StatusDump(apache::thrift::FragileConstructor, int64_t timeStamp__arg, std::map<std::string,  ::facebook::terragraph::thrift::StatusReport> statusReports__arg) :
      timeStamp(std::move(timeStamp__arg)),
      statusReports(std::move(statusReports__arg)) {
    __isset.timeStamp = true;
    __isset.statusReports = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  StatusDump(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    StatusDump(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    timeStamp = arg.move();
    __isset.timeStamp = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  StatusDump(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    StatusDump(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    statusReports = arg.move();
    __isset.statusReports = true;
  }

  StatusDump(StatusDump&&) = default;

  StatusDump(const StatusDump&) = default;

  StatusDump& operator=(StatusDump&&) = default;

  StatusDump& operator=(const StatusDump&) = default;
  void __clear();

  virtual ~StatusDump() throw() {}

  int64_t timeStamp;
  std::map<std::string,  ::facebook::terragraph::thrift::StatusReport> statusReports;

  struct __isset {
    void __clear() {
      timeStamp = false;
      statusReports = false;
    }

    bool timeStamp = false;
    bool statusReports = false;
  } __isset;
  bool operator==(const StatusDump& rhs) const;
  bool operator < (const StatusDump& rhs) const;

  int64_t get_timeStamp() const {
    return timeStamp;
  }

  int64_t& set_timeStamp(int64_t timeStamp_) {
    timeStamp = timeStamp_;
    __isset.timeStamp = true;
    return timeStamp;
  }
  const std::map<std::string,  ::facebook::terragraph::thrift::StatusReport>& get_statusReports() const&;
  std::map<std::string,  ::facebook::terragraph::thrift::StatusReport> get_statusReports() &&;
  template <typename T_StatusDump_statusReports_struct_setter>
  std::map<std::string,  ::facebook::terragraph::thrift::StatusReport>& set_statusReports(T_StatusDump_statusReports_struct_setter&& statusReports_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(StatusDump& a, StatusDump& b);
extern template uint32_t StatusDump::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t StatusDump::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t StatusDump::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t StatusDump::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t StatusDump::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t StatusDump::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t StatusDump::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t StatusDump::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::StatusDump>::clear( ::facebook::terragraph::thrift::StatusDump* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::StatusDump>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusDump>::write(Protocol* proto,  ::facebook::terragraph::thrift::StatusDump const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusDump>::read(Protocol* proto,  ::facebook::terragraph::thrift::StatusDump* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusDump>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::StatusDump const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusDump>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::StatusDump const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class NodeParams : private apache::thrift::detail::st::ComparisonOperators<NodeParams> {
 public:

  NodeParams() {}
  // FragileConstructor for use in initialization lists only

  NodeParams(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::BwAllocationMap bwAllocMap__arg) :
      bwAllocMap(std::move(bwAllocMap__arg)) {
    __isset.bwAllocMap = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NodeParams(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NodeParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    bwAllocMap = arg.move();
    __isset.bwAllocMap = true;
  }

  NodeParams(NodeParams&&) = default;

  NodeParams(const NodeParams&) = default;

  NodeParams& operator=(NodeParams&&) = default;

  NodeParams& operator=(const NodeParams&) = default;
  void __clear();

  virtual ~NodeParams() throw() {}

   ::facebook::terragraph::thrift::BwAllocationMap bwAllocMap;

  struct __isset {
    void __clear() {
      bwAllocMap = false;
    }

    bool bwAllocMap = false;
  } __isset;
  bool operator==(const NodeParams& rhs) const;
  bool operator < (const NodeParams& rhs) const;
  const  ::facebook::terragraph::thrift::BwAllocationMap* get_bwAllocMap() const&;
   ::facebook::terragraph::thrift::BwAllocationMap* get_bwAllocMap() &;
   ::facebook::terragraph::thrift::BwAllocationMap* get_bwAllocMap() && = delete;
  template <typename T_NodeParams_bwAllocMap_struct_setter>
   ::facebook::terragraph::thrift::BwAllocationMap& set_bwAllocMap(T_NodeParams_bwAllocMap_struct_setter&& bwAllocMap_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(NodeParams& a, NodeParams& b);
extern template uint32_t NodeParams::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NodeParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NodeParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NodeParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NodeParams::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NodeParams::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NodeParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NodeParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::NodeParams>::clear( ::facebook::terragraph::thrift::NodeParams* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::NodeParams>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeParams>::write(Protocol* proto,  ::facebook::terragraph::thrift::NodeParams const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeParams>::read(Protocol* proto,  ::facebook::terragraph::thrift::NodeParams* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeParams>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::NodeParams const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeParams>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::NodeParams const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class StatusReport : private apache::thrift::detail::st::ComparisonOperators<StatusReport> {
 public:

  StatusReport() :
      timeStamp(0),
      isConnected(0) {}
  // FragileConstructor for use in initialization lists only

  StatusReport(apache::thrift::FragileConstructor, int64_t timeStamp__arg, std::string ipv6Address__arg, std::string version__arg, bool isConnected__arg,  ::facebook::terragraph::thrift::UpgradeStatus upgradeStatus__arg) :
      timeStamp(std::move(timeStamp__arg)),
      ipv6Address(std::move(ipv6Address__arg)),
      version(std::move(version__arg)),
      isConnected(std::move(isConnected__arg)),
      upgradeStatus(std::move(upgradeStatus__arg)) {
    __isset.timeStamp = true;
    __isset.ipv6Address = true;
    __isset.version = true;
    __isset.isConnected = true;
    __isset.upgradeStatus = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  StatusReport(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    StatusReport(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    timeStamp = arg.move();
    __isset.timeStamp = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  StatusReport(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    StatusReport(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    ipv6Address = arg.move();
    __isset.ipv6Address = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  StatusReport(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    StatusReport(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    version = arg.move();
    __isset.version = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  StatusReport(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    StatusReport(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    isConnected = arg.move();
    __isset.isConnected = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  StatusReport(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    StatusReport(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    upgradeStatus = arg.move();
    __isset.upgradeStatus = true;
  }

  StatusReport(StatusReport&&) = default;

  StatusReport(const StatusReport&) = default;

  StatusReport& operator=(StatusReport&&) = default;

  StatusReport& operator=(const StatusReport&) = default;
  void __clear();

  virtual ~StatusReport() throw() {}

  int64_t timeStamp;
  std::string ipv6Address;
  std::string version;
  bool isConnected;
   ::facebook::terragraph::thrift::UpgradeStatus upgradeStatus;

  struct __isset {
    void __clear() {
      timeStamp = false;
      ipv6Address = false;
      version = false;
      isConnected = false;
      upgradeStatus = false;
    }

    bool timeStamp = false;
    bool ipv6Address = false;
    bool version = false;
    bool isConnected = false;
    bool upgradeStatus = false;
  } __isset;
  bool operator==(const StatusReport& rhs) const;

  bool operator < (const StatusReport& rhs) const {
    if (!(timeStamp == rhs.timeStamp)) {
      return timeStamp < rhs.timeStamp;
    }
    if (!(ipv6Address == rhs.ipv6Address)) {
      return ipv6Address < rhs.ipv6Address;
    }
    if (!(version == rhs.version)) {
      return version < rhs.version;
    }
    if (!(isConnected == rhs.isConnected)) {
      return isConnected < rhs.isConnected;
    }
    if (!(upgradeStatus == rhs.upgradeStatus)) {
      return upgradeStatus < rhs.upgradeStatus;
    }
    return false;
  }

  int64_t get_timeStamp() const {
    return timeStamp;
  }

  int64_t& set_timeStamp(int64_t timeStamp_) {
    timeStamp = timeStamp_;
    __isset.timeStamp = true;
    return timeStamp;
  }

  const std::string& get_ipv6Address() const& {
    return ipv6Address;
  }

  std::string get_ipv6Address() && {
    return std::move(ipv6Address);
  }

  template <typename T_StatusReport_ipv6Address_struct_setter>
  std::string& set_ipv6Address(T_StatusReport_ipv6Address_struct_setter&& ipv6Address_) {
    ipv6Address = std::forward<T_StatusReport_ipv6Address_struct_setter>(ipv6Address_);
    __isset.ipv6Address = true;
    return ipv6Address;
  }

  const std::string& get_version() const& {
    return version;
  }

  std::string get_version() && {
    return std::move(version);
  }

  template <typename T_StatusReport_version_struct_setter>
  std::string& set_version(T_StatusReport_version_struct_setter&& version_) {
    version = std::forward<T_StatusReport_version_struct_setter>(version_);
    __isset.version = true;
    return version;
  }

  bool get_isConnected() const {
    return isConnected;
  }

  bool& set_isConnected(bool isConnected_) {
    isConnected = isConnected_;
    __isset.isConnected = true;
    return isConnected;
  }
  const  ::facebook::terragraph::thrift::UpgradeStatus& get_upgradeStatus() const&;
   ::facebook::terragraph::thrift::UpgradeStatus get_upgradeStatus() &&;
  template <typename T_StatusReport_upgradeStatus_struct_setter>
   ::facebook::terragraph::thrift::UpgradeStatus& set_upgradeStatus(T_StatusReport_upgradeStatus_struct_setter&& upgradeStatus_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(StatusReport& a, StatusReport& b);
extern template uint32_t StatusReport::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t StatusReport::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t StatusReport::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t StatusReport::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t StatusReport::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t StatusReport::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t StatusReport::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t StatusReport::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::StatusReport>::clear( ::facebook::terragraph::thrift::StatusReport* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::StatusReport>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusReport>::write(Protocol* proto,  ::facebook::terragraph::thrift::StatusReport const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusReport>::read(Protocol* proto,  ::facebook::terragraph::thrift::StatusReport* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusReport>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::StatusReport const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::StatusReport>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::StatusReport const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class GetIgnitionState : private apache::thrift::detail::st::ComparisonOperators<GetIgnitionState> {
 public:

  GetIgnitionState() {}
  // FragileConstructor for use in initialization lists only

  GetIgnitionState(apache::thrift::FragileConstructor) {}

  GetIgnitionState(GetIgnitionState&&) = default;

  GetIgnitionState(const GetIgnitionState&) = default;

  GetIgnitionState& operator=(GetIgnitionState&&) = default;

  GetIgnitionState& operator=(const GetIgnitionState&) = default;

  virtual ~GetIgnitionState() throw() {}

  bool operator==(const GetIgnitionState& /* rhs */) const;

  bool operator < (const GetIgnitionState& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(GetIgnitionState& a, GetIgnitionState& b);
extern template uint32_t GetIgnitionState::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t GetIgnitionState::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t GetIgnitionState::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t GetIgnitionState::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t GetIgnitionState::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t GetIgnitionState::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t GetIgnitionState::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t GetIgnitionState::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::GetIgnitionState>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetIgnitionState>::write(Protocol* proto,  ::facebook::terragraph::thrift::GetIgnitionState const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetIgnitionState>::read(Protocol* proto,  ::facebook::terragraph::thrift::GetIgnitionState* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetIgnitionState>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::GetIgnitionState const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetIgnitionState>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::GetIgnitionState const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class IgnitionParams : private apache::thrift::detail::st::ComparisonOperators<IgnitionParams> {
 public:

  IgnitionParams() :
      enable(0),
      linkUpInterval(0) {}
  // FragileConstructor for use in initialization lists only

  IgnitionParams(apache::thrift::FragileConstructor, bool enable__arg, int64_t linkUpInterval__arg) :
      enable(std::move(enable__arg)),
      linkUpInterval(std::move(linkUpInterval__arg)) {
    __isset.enable = true;
    __isset.linkUpInterval = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  IgnitionParams(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    IgnitionParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    enable = arg.move();
    __isset.enable = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  IgnitionParams(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    IgnitionParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    linkUpInterval = arg.move();
    __isset.linkUpInterval = true;
  }

  IgnitionParams(IgnitionParams&&) = default;

  IgnitionParams(const IgnitionParams&) = default;

  IgnitionParams& operator=(IgnitionParams&&) = default;

  IgnitionParams& operator=(const IgnitionParams&) = default;
  void __clear();

  virtual ~IgnitionParams() throw() {}

  bool enable;
  int64_t linkUpInterval;

  struct __isset {
    void __clear() {
      enable = false;
      linkUpInterval = false;
    }

    bool enable = false;
    bool linkUpInterval = false;
  } __isset;
  bool operator==(const IgnitionParams& rhs) const;
  bool operator < (const IgnitionParams& rhs) const;

  const bool* get_enable() const& {
    return __isset.enable ? std::addressof(enable) : nullptr;
  }

  bool* get_enable() & {
    return __isset.enable ? std::addressof(enable) : nullptr;
  }
  bool* get_enable() && = delete;

  bool& set_enable(bool enable_) {
    enable = enable_;
    __isset.enable = true;
    return enable;
  }

  const int64_t* get_linkUpInterval() const& {
    return __isset.linkUpInterval ? std::addressof(linkUpInterval) : nullptr;
  }

  int64_t* get_linkUpInterval() & {
    return __isset.linkUpInterval ? std::addressof(linkUpInterval) : nullptr;
  }
  int64_t* get_linkUpInterval() && = delete;

  int64_t& set_linkUpInterval(int64_t linkUpInterval_) {
    linkUpInterval = linkUpInterval_;
    __isset.linkUpInterval = true;
    return linkUpInterval;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(IgnitionParams& a, IgnitionParams& b);
extern template uint32_t IgnitionParams::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t IgnitionParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t IgnitionParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IgnitionParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IgnitionParams::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t IgnitionParams::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t IgnitionParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t IgnitionParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::IgnitionParams>::clear( ::facebook::terragraph::thrift::IgnitionParams* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::IgnitionParams>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionParams>::write(Protocol* proto,  ::facebook::terragraph::thrift::IgnitionParams const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionParams>::read(Protocol* proto,  ::facebook::terragraph::thrift::IgnitionParams* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionParams>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::IgnitionParams const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionParams>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::IgnitionParams const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class SetLinkStatusReq : private apache::thrift::detail::st::ComparisonOperators<SetLinkStatusReq> {
 public:

  SetLinkStatusReq() :
      action( ::facebook::terragraph::thrift::LinkActionType()) {}
  // FragileConstructor for use in initialization lists only

  SetLinkStatusReq(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::LinkActionType action__arg, std::string initiatorNodeName__arg, std::string responderNodeName__arg) :
      action(std::move(action__arg)),
      initiatorNodeName(std::move(initiatorNodeName__arg)),
      responderNodeName(std::move(responderNodeName__arg)) {
    __isset.action = true;
    __isset.initiatorNodeName = true;
    __isset.responderNodeName = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetLinkStatusReq(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetLinkStatusReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    action = arg.move();
    __isset.action = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetLinkStatusReq(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetLinkStatusReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    initiatorNodeName = arg.move();
    __isset.initiatorNodeName = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetLinkStatusReq(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetLinkStatusReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    responderNodeName = arg.move();
    __isset.responderNodeName = true;
  }

  SetLinkStatusReq(SetLinkStatusReq&&) = default;

  SetLinkStatusReq(const SetLinkStatusReq&) = default;

  SetLinkStatusReq& operator=(SetLinkStatusReq&&) = default;

  SetLinkStatusReq& operator=(const SetLinkStatusReq&) = default;
  void __clear();

  virtual ~SetLinkStatusReq() throw() {}

   ::facebook::terragraph::thrift::LinkActionType action;
  std::string initiatorNodeName;
  std::string responderNodeName;

  struct __isset {
    void __clear() {
      action = false;
      initiatorNodeName = false;
      responderNodeName = false;
    }

    bool action = false;
    bool initiatorNodeName = false;
    bool responderNodeName = false;
  } __isset;
  bool operator==(const SetLinkStatusReq& rhs) const;

  bool operator < (const SetLinkStatusReq& rhs) const {
    if (!(action == rhs.action)) {
      return action < rhs.action;
    }
    if (!(initiatorNodeName == rhs.initiatorNodeName)) {
      return initiatorNodeName < rhs.initiatorNodeName;
    }
    if (!(responderNodeName == rhs.responderNodeName)) {
      return responderNodeName < rhs.responderNodeName;
    }
    return false;
  }

   ::facebook::terragraph::thrift::LinkActionType get_action() const {
    return action;
  }

   ::facebook::terragraph::thrift::LinkActionType& set_action( ::facebook::terragraph::thrift::LinkActionType action_) {
    action = action_;
    __isset.action = true;
    return action;
  }

  const std::string& get_initiatorNodeName() const& {
    return initiatorNodeName;
  }

  std::string get_initiatorNodeName() && {
    return std::move(initiatorNodeName);
  }

  template <typename T_SetLinkStatusReq_initiatorNodeName_struct_setter>
  std::string& set_initiatorNodeName(T_SetLinkStatusReq_initiatorNodeName_struct_setter&& initiatorNodeName_) {
    initiatorNodeName = std::forward<T_SetLinkStatusReq_initiatorNodeName_struct_setter>(initiatorNodeName_);
    __isset.initiatorNodeName = true;
    return initiatorNodeName;
  }

  const std::string& get_responderNodeName() const& {
    return responderNodeName;
  }

  std::string get_responderNodeName() && {
    return std::move(responderNodeName);
  }

  template <typename T_SetLinkStatusReq_responderNodeName_struct_setter>
  std::string& set_responderNodeName(T_SetLinkStatusReq_responderNodeName_struct_setter&& responderNodeName_) {
    responderNodeName = std::forward<T_SetLinkStatusReq_responderNodeName_struct_setter>(responderNodeName_);
    __isset.responderNodeName = true;
    return responderNodeName;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SetLinkStatusReq& a, SetLinkStatusReq& b);
extern template uint32_t SetLinkStatusReq::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SetLinkStatusReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SetLinkStatusReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetLinkStatusReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetLinkStatusReq::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SetLinkStatusReq::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SetLinkStatusReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SetLinkStatusReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatusReq>::clear( ::facebook::terragraph::thrift::SetLinkStatusReq* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatusReq>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatusReq>::write(Protocol* proto,  ::facebook::terragraph::thrift::SetLinkStatusReq const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatusReq>::read(Protocol* proto,  ::facebook::terragraph::thrift::SetLinkStatusReq* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatusReq>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::SetLinkStatusReq const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatusReq>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::SetLinkStatusReq const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class IgnitionCandidate : private apache::thrift::detail::st::ComparisonOperators<IgnitionCandidate> {
 public:

  IgnitionCandidate() {}
  // FragileConstructor for use in initialization lists only

  IgnitionCandidate(apache::thrift::FragileConstructor, std::string initiatorNodeName__arg, std::string linkName__arg) :
      initiatorNodeName(std::move(initiatorNodeName__arg)),
      linkName(std::move(linkName__arg)) {
    __isset.initiatorNodeName = true;
    __isset.linkName = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  IgnitionCandidate(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    IgnitionCandidate(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    initiatorNodeName = arg.move();
    __isset.initiatorNodeName = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  IgnitionCandidate(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    IgnitionCandidate(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    linkName = arg.move();
    __isset.linkName = true;
  }

  IgnitionCandidate(IgnitionCandidate&&) = default;

  IgnitionCandidate(const IgnitionCandidate&) = default;

  IgnitionCandidate& operator=(IgnitionCandidate&&) = default;

  IgnitionCandidate& operator=(const IgnitionCandidate&) = default;
  void __clear();

  virtual ~IgnitionCandidate() throw() {}

  std::string initiatorNodeName;
  std::string linkName;

  struct __isset {
    void __clear() {
      initiatorNodeName = false;
      linkName = false;
    }

    bool initiatorNodeName = false;
    bool linkName = false;
  } __isset;
  bool operator==(const IgnitionCandidate& rhs) const;

  bool operator < (const IgnitionCandidate& rhs) const {
    if (!(initiatorNodeName == rhs.initiatorNodeName)) {
      return initiatorNodeName < rhs.initiatorNodeName;
    }
    if (!(linkName == rhs.linkName)) {
      return linkName < rhs.linkName;
    }
    return false;
  }

  const std::string& get_initiatorNodeName() const& {
    return initiatorNodeName;
  }

  std::string get_initiatorNodeName() && {
    return std::move(initiatorNodeName);
  }

  template <typename T_IgnitionCandidate_initiatorNodeName_struct_setter>
  std::string& set_initiatorNodeName(T_IgnitionCandidate_initiatorNodeName_struct_setter&& initiatorNodeName_) {
    initiatorNodeName = std::forward<T_IgnitionCandidate_initiatorNodeName_struct_setter>(initiatorNodeName_);
    __isset.initiatorNodeName = true;
    return initiatorNodeName;
  }

  const std::string& get_linkName() const& {
    return linkName;
  }

  std::string get_linkName() && {
    return std::move(linkName);
  }

  template <typename T_IgnitionCandidate_linkName_struct_setter>
  std::string& set_linkName(T_IgnitionCandidate_linkName_struct_setter&& linkName_) {
    linkName = std::forward<T_IgnitionCandidate_linkName_struct_setter>(linkName_);
    __isset.linkName = true;
    return linkName;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(IgnitionCandidate& a, IgnitionCandidate& b);
extern template uint32_t IgnitionCandidate::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t IgnitionCandidate::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t IgnitionCandidate::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IgnitionCandidate::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IgnitionCandidate::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t IgnitionCandidate::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t IgnitionCandidate::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t IgnitionCandidate::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::IgnitionCandidate>::clear( ::facebook::terragraph::thrift::IgnitionCandidate* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::IgnitionCandidate>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionCandidate>::write(Protocol* proto,  ::facebook::terragraph::thrift::IgnitionCandidate const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionCandidate>::read(Protocol* proto,  ::facebook::terragraph::thrift::IgnitionCandidate* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionCandidate>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::IgnitionCandidate const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionCandidate>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::IgnitionCandidate const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class IgnitionState : private apache::thrift::detail::st::ComparisonOperators<IgnitionState> {
 public:

  IgnitionState() {}
  // FragileConstructor for use in initialization lists only

  IgnitionState(apache::thrift::FragileConstructor, std::vector<std::string> visitedNodeNames__arg, std::vector< ::facebook::terragraph::thrift::IgnitionCandidate> igCandidates__arg,  ::facebook::terragraph::thrift::IgnitionCandidate lastIgCandidate__arg) :
      visitedNodeNames(std::move(visitedNodeNames__arg)),
      igCandidates(std::move(igCandidates__arg)),
      lastIgCandidate(std::move(lastIgCandidate__arg)) {
    __isset.visitedNodeNames = true;
    __isset.igCandidates = true;
    __isset.lastIgCandidate = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  IgnitionState(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    IgnitionState(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    visitedNodeNames = arg.move();
    __isset.visitedNodeNames = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  IgnitionState(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    IgnitionState(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    igCandidates = arg.move();
    __isset.igCandidates = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  IgnitionState(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    IgnitionState(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lastIgCandidate = arg.move();
    __isset.lastIgCandidate = true;
  }

  IgnitionState(IgnitionState&&) = default;

  IgnitionState(const IgnitionState&) = default;

  IgnitionState& operator=(IgnitionState&&) = default;

  IgnitionState& operator=(const IgnitionState&) = default;
  void __clear();

  virtual ~IgnitionState() throw() {}

  std::vector<std::string> visitedNodeNames;
  std::vector< ::facebook::terragraph::thrift::IgnitionCandidate> igCandidates;
   ::facebook::terragraph::thrift::IgnitionCandidate lastIgCandidate;

  struct __isset {
    void __clear() {
      visitedNodeNames = false;
      igCandidates = false;
      lastIgCandidate = false;
    }

    bool visitedNodeNames = false;
    bool igCandidates = false;
    bool lastIgCandidate = false;
  } __isset;
  bool operator==(const IgnitionState& rhs) const;

  bool operator < (const IgnitionState& rhs) const {
    if (!(visitedNodeNames == rhs.visitedNodeNames)) {
      return visitedNodeNames < rhs.visitedNodeNames;
    }
    if (!(igCandidates == rhs.igCandidates)) {
      return igCandidates < rhs.igCandidates;
    }
    if (!(lastIgCandidate == rhs.lastIgCandidate)) {
      return lastIgCandidate < rhs.lastIgCandidate;
    }
    return false;
  }
  const std::vector<std::string>& get_visitedNodeNames() const&;
  std::vector<std::string> get_visitedNodeNames() &&;
  template <typename T_IgnitionState_visitedNodeNames_struct_setter>
  std::vector<std::string>& set_visitedNodeNames(T_IgnitionState_visitedNodeNames_struct_setter&& visitedNodeNames_);
  const std::vector< ::facebook::terragraph::thrift::IgnitionCandidate>& get_igCandidates() const&;
  std::vector< ::facebook::terragraph::thrift::IgnitionCandidate> get_igCandidates() &&;
  template <typename T_IgnitionState_igCandidates_struct_setter>
  std::vector< ::facebook::terragraph::thrift::IgnitionCandidate>& set_igCandidates(T_IgnitionState_igCandidates_struct_setter&& igCandidates_);
  const  ::facebook::terragraph::thrift::IgnitionCandidate& get_lastIgCandidate() const&;
   ::facebook::terragraph::thrift::IgnitionCandidate get_lastIgCandidate() &&;
  template <typename T_IgnitionState_lastIgCandidate_struct_setter>
   ::facebook::terragraph::thrift::IgnitionCandidate& set_lastIgCandidate(T_IgnitionState_lastIgCandidate_struct_setter&& lastIgCandidate_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(IgnitionState& a, IgnitionState& b);
extern template uint32_t IgnitionState::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t IgnitionState::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t IgnitionState::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IgnitionState::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t IgnitionState::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t IgnitionState::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t IgnitionState::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t IgnitionState::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::IgnitionState>::clear( ::facebook::terragraph::thrift::IgnitionState* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::IgnitionState>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionState>::write(Protocol* proto,  ::facebook::terragraph::thrift::IgnitionState const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionState>::read(Protocol* proto,  ::facebook::terragraph::thrift::IgnitionState* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionState>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::IgnitionState const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::IgnitionState>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::IgnitionState const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class SetLinkStatus : private apache::thrift::detail::st::ComparisonOperators<SetLinkStatus> {
 public:

  SetLinkStatus() :
      linkStatusType( ::facebook::terragraph::thrift::LinkStatusType()),
      responderNodeType( ::facebook::terragraph::thrift::NodeType()) {}
  // FragileConstructor for use in initialization lists only

  SetLinkStatus(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::LinkStatusType linkStatusType__arg, std::string responderMac__arg,  ::facebook::terragraph::thrift::NodeType responderNodeType__arg) :
      linkStatusType(std::move(linkStatusType__arg)),
      responderMac(std::move(responderMac__arg)),
      responderNodeType(std::move(responderNodeType__arg)) {
    __isset.linkStatusType = true;
    __isset.responderMac = true;
    __isset.responderNodeType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetLinkStatus(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetLinkStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    linkStatusType = arg.move();
    __isset.linkStatusType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetLinkStatus(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetLinkStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    responderMac = arg.move();
    __isset.responderMac = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetLinkStatus(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetLinkStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    responderNodeType = arg.move();
    __isset.responderNodeType = true;
  }

  SetLinkStatus(SetLinkStatus&&) = default;

  SetLinkStatus(const SetLinkStatus&) = default;

  SetLinkStatus& operator=(SetLinkStatus&&) = default;

  SetLinkStatus& operator=(const SetLinkStatus&) = default;
  void __clear();

  virtual ~SetLinkStatus() throw() {}

   ::facebook::terragraph::thrift::LinkStatusType linkStatusType;
  std::string responderMac;
   ::facebook::terragraph::thrift::NodeType responderNodeType;

  struct __isset {
    void __clear() {
      linkStatusType = false;
      responderMac = false;
      responderNodeType = false;
    }

    bool linkStatusType = false;
    bool responderMac = false;
    bool responderNodeType = false;
  } __isset;
  bool operator==(const SetLinkStatus& rhs) const;

  bool operator < (const SetLinkStatus& rhs) const {
    if (!(linkStatusType == rhs.linkStatusType)) {
      return linkStatusType < rhs.linkStatusType;
    }
    if (!(responderMac == rhs.responderMac)) {
      return responderMac < rhs.responderMac;
    }
    if (!(responderNodeType == rhs.responderNodeType)) {
      return responderNodeType < rhs.responderNodeType;
    }
    return false;
  }

   ::facebook::terragraph::thrift::LinkStatusType get_linkStatusType() const {
    return linkStatusType;
  }

   ::facebook::terragraph::thrift::LinkStatusType& set_linkStatusType( ::facebook::terragraph::thrift::LinkStatusType linkStatusType_) {
    linkStatusType = linkStatusType_;
    __isset.linkStatusType = true;
    return linkStatusType;
  }

  const std::string& get_responderMac() const& {
    return responderMac;
  }

  std::string get_responderMac() && {
    return std::move(responderMac);
  }

  template <typename T_SetLinkStatus_responderMac_struct_setter>
  std::string& set_responderMac(T_SetLinkStatus_responderMac_struct_setter&& responderMac_) {
    responderMac = std::forward<T_SetLinkStatus_responderMac_struct_setter>(responderMac_);
    __isset.responderMac = true;
    return responderMac;
  }

   ::facebook::terragraph::thrift::NodeType get_responderNodeType() const {
    return responderNodeType;
  }

   ::facebook::terragraph::thrift::NodeType& set_responderNodeType( ::facebook::terragraph::thrift::NodeType responderNodeType_) {
    responderNodeType = responderNodeType_;
    __isset.responderNodeType = true;
    return responderNodeType;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SetLinkStatus& a, SetLinkStatus& b);
extern template uint32_t SetLinkStatus::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SetLinkStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SetLinkStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetLinkStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetLinkStatus::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SetLinkStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SetLinkStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SetLinkStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatus>::clear( ::facebook::terragraph::thrift::SetLinkStatus* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatus>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatus>::write(Protocol* proto,  ::facebook::terragraph::thrift::SetLinkStatus const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatus>::read(Protocol* proto,  ::facebook::terragraph::thrift::SetLinkStatus* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatus>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::SetLinkStatus const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetLinkStatus>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::SetLinkStatus const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class LinkStatus : private apache::thrift::detail::st::ComparisonOperators<LinkStatus> {
 public:

  LinkStatus() :
      linkStatusType( ::facebook::terragraph::thrift::LinkStatusType()) {}
  // FragileConstructor for use in initialization lists only

  LinkStatus(apache::thrift::FragileConstructor, std::string responderMac__arg,  ::facebook::terragraph::thrift::LinkStatusType linkStatusType__arg) :
      responderMac(std::move(responderMac__arg)),
      linkStatusType(std::move(linkStatusType__arg)) {
    __isset.responderMac = true;
    __isset.linkStatusType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkStatus(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    responderMac = arg.move();
    __isset.responderMac = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  LinkStatus(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    LinkStatus(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    linkStatusType = arg.move();
    __isset.linkStatusType = true;
  }

  LinkStatus(LinkStatus&&) = default;

  LinkStatus(const LinkStatus&) = default;

  LinkStatus& operator=(LinkStatus&&) = default;

  LinkStatus& operator=(const LinkStatus&) = default;
  void __clear();

  virtual ~LinkStatus() throw() {}

  std::string responderMac;
   ::facebook::terragraph::thrift::LinkStatusType linkStatusType;

  struct __isset {
    void __clear() {
      responderMac = false;
      linkStatusType = false;
    }

    bool responderMac = false;
    bool linkStatusType = false;
  } __isset;
  bool operator==(const LinkStatus& rhs) const;

  bool operator < (const LinkStatus& rhs) const {
    if (!(responderMac == rhs.responderMac)) {
      return responderMac < rhs.responderMac;
    }
    if (!(linkStatusType == rhs.linkStatusType)) {
      return linkStatusType < rhs.linkStatusType;
    }
    return false;
  }

  const std::string& get_responderMac() const& {
    return responderMac;
  }

  std::string get_responderMac() && {
    return std::move(responderMac);
  }

  template <typename T_LinkStatus_responderMac_struct_setter>
  std::string& set_responderMac(T_LinkStatus_responderMac_struct_setter&& responderMac_) {
    responderMac = std::forward<T_LinkStatus_responderMac_struct_setter>(responderMac_);
    __isset.responderMac = true;
    return responderMac;
  }

   ::facebook::terragraph::thrift::LinkStatusType get_linkStatusType() const {
    return linkStatusType;
  }

   ::facebook::terragraph::thrift::LinkStatusType& set_linkStatusType( ::facebook::terragraph::thrift::LinkStatusType linkStatusType_) {
    linkStatusType = linkStatusType_;
    __isset.linkStatusType = true;
    return linkStatusType;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(LinkStatus& a, LinkStatus& b);
extern template uint32_t LinkStatus::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t LinkStatus::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t LinkStatus::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t LinkStatus::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t LinkStatus::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t LinkStatus::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t LinkStatus::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t LinkStatus::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::LinkStatus>::clear( ::facebook::terragraph::thrift::LinkStatus* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::LinkStatus>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkStatus>::write(Protocol* proto,  ::facebook::terragraph::thrift::LinkStatus const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkStatus>::read(Protocol* proto,  ::facebook::terragraph::thrift::LinkStatus* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkStatus>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::LinkStatus const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::LinkStatus>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::LinkStatus const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class GetTopology : private apache::thrift::detail::st::ComparisonOperators<GetTopology> {
 public:

  GetTopology() {}
  // FragileConstructor for use in initialization lists only

  GetTopology(apache::thrift::FragileConstructor) {}

  GetTopology(GetTopology&&) = default;

  GetTopology(const GetTopology&) = default;

  GetTopology& operator=(GetTopology&&) = default;

  GetTopology& operator=(const GetTopology&) = default;

  virtual ~GetTopology() throw() {}

  bool operator==(const GetTopology& /* rhs */) const;

  bool operator < (const GetTopology& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(GetTopology& a, GetTopology& b);
extern template uint32_t GetTopology::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t GetTopology::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t GetTopology::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t GetTopology::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t GetTopology::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t GetTopology::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t GetTopology::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t GetTopology::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::GetTopology>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetTopology>::write(Protocol* proto,  ::facebook::terragraph::thrift::GetTopology const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetTopology>::read(Protocol* proto,  ::facebook::terragraph::thrift::GetTopology* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetTopology>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::GetTopology const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::GetTopology>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::GetTopology const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class SetNodeStatusReq : private apache::thrift::detail::st::ComparisonOperators<SetNodeStatusReq> {
 public:

  SetNodeStatusReq() :
      markAllLinksDown(0),
      markNodeDown(0) {}
  // FragileConstructor for use in initialization lists only

  SetNodeStatusReq(apache::thrift::FragileConstructor, std::string nodeMac__arg, bool markAllLinksDown__arg, bool markNodeDown__arg) :
      nodeMac(std::move(nodeMac__arg)),
      markAllLinksDown(std::move(markAllLinksDown__arg)),
      markNodeDown(std::move(markNodeDown__arg)) {
    __isset.nodeMac = true;
    __isset.markAllLinksDown = true;
    __isset.markNodeDown = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetNodeStatusReq(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetNodeStatusReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    nodeMac = arg.move();
    __isset.nodeMac = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetNodeStatusReq(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetNodeStatusReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    markAllLinksDown = arg.move();
    __isset.markAllLinksDown = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetNodeStatusReq(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetNodeStatusReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    markNodeDown = arg.move();
    __isset.markNodeDown = true;
  }

  SetNodeStatusReq(SetNodeStatusReq&&) = default;

  SetNodeStatusReq(const SetNodeStatusReq&) = default;

  SetNodeStatusReq& operator=(SetNodeStatusReq&&) = default;

  SetNodeStatusReq& operator=(const SetNodeStatusReq&) = default;
  void __clear();

  virtual ~SetNodeStatusReq() throw() {}

  std::string nodeMac;
  bool markAllLinksDown;
  bool markNodeDown;

  struct __isset {
    void __clear() {
      nodeMac = false;
      markAllLinksDown = false;
      markNodeDown = false;
    }

    bool nodeMac = false;
    bool markAllLinksDown = false;
    bool markNodeDown = false;
  } __isset;
  bool operator==(const SetNodeStatusReq& rhs) const;

  bool operator < (const SetNodeStatusReq& rhs) const {
    if (!(nodeMac == rhs.nodeMac)) {
      return nodeMac < rhs.nodeMac;
    }
    if (!(markAllLinksDown == rhs.markAllLinksDown)) {
      return markAllLinksDown < rhs.markAllLinksDown;
    }
    if (!(markNodeDown == rhs.markNodeDown)) {
      return markNodeDown < rhs.markNodeDown;
    }
    return false;
  }

  const std::string& get_nodeMac() const& {
    return nodeMac;
  }

  std::string get_nodeMac() && {
    return std::move(nodeMac);
  }

  template <typename T_SetNodeStatusReq_nodeMac_struct_setter>
  std::string& set_nodeMac(T_SetNodeStatusReq_nodeMac_struct_setter&& nodeMac_) {
    nodeMac = std::forward<T_SetNodeStatusReq_nodeMac_struct_setter>(nodeMac_);
    __isset.nodeMac = true;
    return nodeMac;
  }

  bool get_markAllLinksDown() const {
    return markAllLinksDown;
  }

  bool& set_markAllLinksDown(bool markAllLinksDown_) {
    markAllLinksDown = markAllLinksDown_;
    __isset.markAllLinksDown = true;
    return markAllLinksDown;
  }

  bool get_markNodeDown() const {
    return markNodeDown;
  }

  bool& set_markNodeDown(bool markNodeDown_) {
    markNodeDown = markNodeDown_;
    __isset.markNodeDown = true;
    return markNodeDown;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SetNodeStatusReq& a, SetNodeStatusReq& b);
extern template uint32_t SetNodeStatusReq::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SetNodeStatusReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SetNodeStatusReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetNodeStatusReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetNodeStatusReq::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SetNodeStatusReq::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SetNodeStatusReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SetNodeStatusReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::SetNodeStatusReq>::clear( ::facebook::terragraph::thrift::SetNodeStatusReq* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::SetNodeStatusReq>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeStatusReq>::write(Protocol* proto,  ::facebook::terragraph::thrift::SetNodeStatusReq const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeStatusReq>::read(Protocol* proto,  ::facebook::terragraph::thrift::SetNodeStatusReq* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeStatusReq>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::SetNodeStatusReq const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeStatusReq>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::SetNodeStatusReq const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class SetNodeParamsReq : private apache::thrift::detail::st::ComparisonOperators<SetNodeParamsReq> {
 public:

  SetNodeParamsReq() {}
  // FragileConstructor for use in initialization lists only

  SetNodeParamsReq(apache::thrift::FragileConstructor, std::string nodeMac__arg,  ::facebook::terragraph::thrift::NodeParams nodeParams__arg) :
      nodeMac(std::move(nodeMac__arg)),
      nodeParams(std::move(nodeParams__arg)) {
    __isset.nodeMac = true;
    __isset.nodeParams = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetNodeParamsReq(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetNodeParamsReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    nodeMac = arg.move();
    __isset.nodeMac = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetNodeParamsReq(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetNodeParamsReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    nodeParams = arg.move();
    __isset.nodeParams = true;
  }

  SetNodeParamsReq(SetNodeParamsReq&&) = default;

  SetNodeParamsReq(const SetNodeParamsReq&) = default;

  SetNodeParamsReq& operator=(SetNodeParamsReq&&) = default;

  SetNodeParamsReq& operator=(const SetNodeParamsReq&) = default;
  void __clear();

  virtual ~SetNodeParamsReq() throw() {}

  std::string nodeMac;
   ::facebook::terragraph::thrift::NodeParams nodeParams;

  struct __isset {
    void __clear() {
      nodeMac = false;
      nodeParams = false;
    }

    bool nodeMac = false;
    bool nodeParams = false;
  } __isset;
  bool operator==(const SetNodeParamsReq& rhs) const;
  bool operator < (const SetNodeParamsReq& rhs) const;

  const std::string& get_nodeMac() const& {
    return nodeMac;
  }

  std::string get_nodeMac() && {
    return std::move(nodeMac);
  }

  template <typename T_SetNodeParamsReq_nodeMac_struct_setter>
  std::string& set_nodeMac(T_SetNodeParamsReq_nodeMac_struct_setter&& nodeMac_) {
    nodeMac = std::forward<T_SetNodeParamsReq_nodeMac_struct_setter>(nodeMac_);
    __isset.nodeMac = true;
    return nodeMac;
  }
  const  ::facebook::terragraph::thrift::NodeParams* get_nodeParams() const&;
   ::facebook::terragraph::thrift::NodeParams* get_nodeParams() &;
   ::facebook::terragraph::thrift::NodeParams* get_nodeParams() && = delete;
  template <typename T_SetNodeParamsReq_nodeParams_struct_setter>
   ::facebook::terragraph::thrift::NodeParams& set_nodeParams(T_SetNodeParamsReq_nodeParams_struct_setter&& nodeParams_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SetNodeParamsReq& a, SetNodeParamsReq& b);
extern template uint32_t SetNodeParamsReq::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SetNodeParamsReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SetNodeParamsReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetNodeParamsReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetNodeParamsReq::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SetNodeParamsReq::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SetNodeParamsReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SetNodeParamsReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::SetNodeParamsReq>::clear( ::facebook::terragraph::thrift::SetNodeParamsReq* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::SetNodeParamsReq>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeParamsReq>::write(Protocol* proto,  ::facebook::terragraph::thrift::SetNodeParamsReq const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeParamsReq>::read(Protocol* proto,  ::facebook::terragraph::thrift::SetNodeParamsReq* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeParamsReq>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::SetNodeParamsReq const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeParamsReq>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::SetNodeParamsReq const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class SetNodeMacReq : private apache::thrift::detail::st::ComparisonOperators<SetNodeMacReq> {
 public:

  SetNodeMacReq() {}
  // FragileConstructor for use in initialization lists only

  SetNodeMacReq(apache::thrift::FragileConstructor, std::string nodeName__arg, std::string scannedBlob__arg) :
      nodeName(std::move(nodeName__arg)),
      scannedBlob(std::move(scannedBlob__arg)) {
    __isset.nodeName = true;
    __isset.scannedBlob = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetNodeMacReq(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetNodeMacReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    nodeName = arg.move();
    __isset.nodeName = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetNodeMacReq(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetNodeMacReq(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    scannedBlob = arg.move();
    __isset.scannedBlob = true;
  }

  SetNodeMacReq(SetNodeMacReq&&) = default;

  SetNodeMacReq(const SetNodeMacReq&) = default;

  SetNodeMacReq& operator=(SetNodeMacReq&&) = default;

  SetNodeMacReq& operator=(const SetNodeMacReq&) = default;
  void __clear();

  virtual ~SetNodeMacReq() throw() {}

  std::string nodeName;
  std::string scannedBlob;

  struct __isset {
    void __clear() {
      nodeName = false;
      scannedBlob = false;
    }

    bool nodeName = false;
    bool scannedBlob = false;
  } __isset;
  bool operator==(const SetNodeMacReq& rhs) const;

  bool operator < (const SetNodeMacReq& rhs) const {
    if (!(nodeName == rhs.nodeName)) {
      return nodeName < rhs.nodeName;
    }
    if (!(scannedBlob == rhs.scannedBlob)) {
      return scannedBlob < rhs.scannedBlob;
    }
    return false;
  }

  const std::string& get_nodeName() const& {
    return nodeName;
  }

  std::string get_nodeName() && {
    return std::move(nodeName);
  }

  template <typename T_SetNodeMacReq_nodeName_struct_setter>
  std::string& set_nodeName(T_SetNodeMacReq_nodeName_struct_setter&& nodeName_) {
    nodeName = std::forward<T_SetNodeMacReq_nodeName_struct_setter>(nodeName_);
    __isset.nodeName = true;
    return nodeName;
  }

  const std::string& get_scannedBlob() const& {
    return scannedBlob;
  }

  std::string get_scannedBlob() && {
    return std::move(scannedBlob);
  }

  template <typename T_SetNodeMacReq_scannedBlob_struct_setter>
  std::string& set_scannedBlob(T_SetNodeMacReq_scannedBlob_struct_setter&& scannedBlob_) {
    scannedBlob = std::forward<T_SetNodeMacReq_scannedBlob_struct_setter>(scannedBlob_);
    __isset.scannedBlob = true;
    return scannedBlob;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SetNodeMacReq& a, SetNodeMacReq& b);
extern template uint32_t SetNodeMacReq::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SetNodeMacReq::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SetNodeMacReq::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetNodeMacReq::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetNodeMacReq::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SetNodeMacReq::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SetNodeMacReq::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SetNodeMacReq::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::SetNodeMacReq>::clear( ::facebook::terragraph::thrift::SetNodeMacReq* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::SetNodeMacReq>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeMacReq>::write(Protocol* proto,  ::facebook::terragraph::thrift::SetNodeMacReq const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeMacReq>::read(Protocol* proto,  ::facebook::terragraph::thrift::SetNodeMacReq* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeMacReq>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::SetNodeMacReq const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetNodeMacReq>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::SetNodeMacReq const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class SetCtrlParams : private apache::thrift::detail::st::ComparisonOperators<SetCtrlParams> {
 public:

  SetCtrlParams() {}
  // FragileConstructor for use in initialization lists only

  SetCtrlParams(apache::thrift::FragileConstructor, std::string ctrlUrl__arg) :
      ctrlUrl(std::move(ctrlUrl__arg)) {
    __isset.ctrlUrl = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  SetCtrlParams(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    SetCtrlParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    ctrlUrl = arg.move();
    __isset.ctrlUrl = true;
  }

  SetCtrlParams(SetCtrlParams&&) = default;

  SetCtrlParams(const SetCtrlParams&) = default;

  SetCtrlParams& operator=(SetCtrlParams&&) = default;

  SetCtrlParams& operator=(const SetCtrlParams&) = default;
  void __clear();

  virtual ~SetCtrlParams() throw() {}

  std::string ctrlUrl;

  struct __isset {
    void __clear() {
      ctrlUrl = false;
    }

    bool ctrlUrl = false;
  } __isset;
  bool operator==(const SetCtrlParams& rhs) const;

  bool operator < (const SetCtrlParams& rhs) const {
    if (!(ctrlUrl == rhs.ctrlUrl)) {
      return ctrlUrl < rhs.ctrlUrl;
    }
    return false;
  }

  const std::string& get_ctrlUrl() const& {
    return ctrlUrl;
  }

  std::string get_ctrlUrl() && {
    return std::move(ctrlUrl);
  }

  template <typename T_SetCtrlParams_ctrlUrl_struct_setter>
  std::string& set_ctrlUrl(T_SetCtrlParams_ctrlUrl_struct_setter&& ctrlUrl_) {
    ctrlUrl = std::forward<T_SetCtrlParams_ctrlUrl_struct_setter>(ctrlUrl_);
    __isset.ctrlUrl = true;
    return ctrlUrl;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(SetCtrlParams& a, SetCtrlParams& b);
extern template uint32_t SetCtrlParams::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SetCtrlParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SetCtrlParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetCtrlParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SetCtrlParams::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SetCtrlParams::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SetCtrlParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SetCtrlParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::SetCtrlParams>::clear( ::facebook::terragraph::thrift::SetCtrlParams* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::SetCtrlParams>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetCtrlParams>::write(Protocol* proto,  ::facebook::terragraph::thrift::SetCtrlParams const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetCtrlParams>::read(Protocol* proto,  ::facebook::terragraph::thrift::SetCtrlParams* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetCtrlParams>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::SetCtrlParams const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::SetCtrlParams>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::SetCtrlParams const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class FwOptParams : private apache::thrift::detail::st::ComparisonOperators<FwOptParams> {
 public:

  FwOptParams() :
      antCodeBook(0),
      polarity(0),
      frameConfig(0),
      numOfPeerSta(0),
      logModules(0),
      logSeverity(0),
      gpioConfig(0),
      channel(0),
      swConfig(0),
      mcs(0),
      txPower(0),
      rxBuffer(0),
      beamConfig(0),
      txBeamIndex(0),
      rxBeamIndex(0),
      statsType(0),
      dataCollectionType(0),
      numOfHbLossToFail(0),
      statsLogInterval(0),
      statsPrintInterval(0),
      forceGpsDisable(0),
      lsmAssocRespTimeout(0),
      lsmSendAssocReqRetry(0),
      lsmAssocRespAckTimeout(0),
      lsmSendAssocRespRetry(0),
      lsmRepeatAckInterval(0),
      lsmRepeatAck(0),
      lsmFirstHeartbTimeout(0),
      txSlot0Start(0),
      txSlot0End(0),
      txSlot1Start(0),
      txSlot1End(0),
      txSlot2Start(0),
      txSlot2End(0),
      rxSlot0Start(0),
      rxSlot0End(0),
      rxSlot1Start(0),
      rxSlot1End(0),
      rxSlot2Start(0),
      rxSlot2End(0),
      gpsTimeout(0),
      linkAgc(0),
      respNodeType(0) {}
  // FragileConstructor for use in initialization lists only

  FwOptParams(apache::thrift::FragileConstructor, int64_t antCodeBook__arg, int64_t polarity__arg, int64_t frameConfig__arg, int64_t numOfPeerSta__arg, int64_t logModules__arg, int64_t logSeverity__arg, int64_t gpioConfig__arg, int64_t channel__arg, int64_t swConfig__arg, int64_t mcs__arg, int64_t txPower__arg, int64_t rxBuffer__arg, int64_t beamConfig__arg, int64_t txBeamIndex__arg, int64_t rxBeamIndex__arg, int64_t statsType__arg, int64_t dataCollectionType__arg, int64_t numOfHbLossToFail__arg, int64_t statsLogInterval__arg, int64_t statsPrintInterval__arg, int64_t forceGpsDisable__arg, int64_t lsmAssocRespTimeout__arg, int64_t lsmSendAssocReqRetry__arg, int64_t lsmAssocRespAckTimeout__arg, int64_t lsmSendAssocRespRetry__arg, int64_t lsmRepeatAckInterval__arg, int64_t lsmRepeatAck__arg, int64_t lsmFirstHeartbTimeout__arg, int64_t txSlot0Start__arg, int64_t txSlot0End__arg, int64_t txSlot1Start__arg, int64_t txSlot1End__arg, int64_t txSlot2Start__arg, int64_t txSlot2End__arg, int64_t rxSlot0Start__arg, int64_t rxSlot0End__arg, int64_t rxSlot1Start__arg, int64_t rxSlot1End__arg, int64_t rxSlot2Start__arg, int64_t rxSlot2End__arg, int64_t gpsTimeout__arg, int64_t linkAgc__arg, int64_t respNodeType__arg) :
      antCodeBook(std::move(antCodeBook__arg)),
      polarity(std::move(polarity__arg)),
      frameConfig(std::move(frameConfig__arg)),
      numOfPeerSta(std::move(numOfPeerSta__arg)),
      logModules(std::move(logModules__arg)),
      logSeverity(std::move(logSeverity__arg)),
      gpioConfig(std::move(gpioConfig__arg)),
      channel(std::move(channel__arg)),
      swConfig(std::move(swConfig__arg)),
      mcs(std::move(mcs__arg)),
      txPower(std::move(txPower__arg)),
      rxBuffer(std::move(rxBuffer__arg)),
      beamConfig(std::move(beamConfig__arg)),
      txBeamIndex(std::move(txBeamIndex__arg)),
      rxBeamIndex(std::move(rxBeamIndex__arg)),
      statsType(std::move(statsType__arg)),
      dataCollectionType(std::move(dataCollectionType__arg)),
      numOfHbLossToFail(std::move(numOfHbLossToFail__arg)),
      statsLogInterval(std::move(statsLogInterval__arg)),
      statsPrintInterval(std::move(statsPrintInterval__arg)),
      forceGpsDisable(std::move(forceGpsDisable__arg)),
      lsmAssocRespTimeout(std::move(lsmAssocRespTimeout__arg)),
      lsmSendAssocReqRetry(std::move(lsmSendAssocReqRetry__arg)),
      lsmAssocRespAckTimeout(std::move(lsmAssocRespAckTimeout__arg)),
      lsmSendAssocRespRetry(std::move(lsmSendAssocRespRetry__arg)),
      lsmRepeatAckInterval(std::move(lsmRepeatAckInterval__arg)),
      lsmRepeatAck(std::move(lsmRepeatAck__arg)),
      lsmFirstHeartbTimeout(std::move(lsmFirstHeartbTimeout__arg)),
      txSlot0Start(std::move(txSlot0Start__arg)),
      txSlot0End(std::move(txSlot0End__arg)),
      txSlot1Start(std::move(txSlot1Start__arg)),
      txSlot1End(std::move(txSlot1End__arg)),
      txSlot2Start(std::move(txSlot2Start__arg)),
      txSlot2End(std::move(txSlot2End__arg)),
      rxSlot0Start(std::move(rxSlot0Start__arg)),
      rxSlot0End(std::move(rxSlot0End__arg)),
      rxSlot1Start(std::move(rxSlot1Start__arg)),
      rxSlot1End(std::move(rxSlot1End__arg)),
      rxSlot2Start(std::move(rxSlot2Start__arg)),
      rxSlot2End(std::move(rxSlot2End__arg)),
      gpsTimeout(std::move(gpsTimeout__arg)),
      linkAgc(std::move(linkAgc__arg)),
      respNodeType(std::move(respNodeType__arg)) {
    __isset.antCodeBook = true;
    __isset.polarity = true;
    __isset.frameConfig = true;
    __isset.numOfPeerSta = true;
    __isset.logModules = true;
    __isset.logSeverity = true;
    __isset.gpioConfig = true;
    __isset.channel = true;
    __isset.swConfig = true;
    __isset.mcs = true;
    __isset.txPower = true;
    __isset.rxBuffer = true;
    __isset.beamConfig = true;
    __isset.txBeamIndex = true;
    __isset.rxBeamIndex = true;
    __isset.statsType = true;
    __isset.dataCollectionType = true;
    __isset.numOfHbLossToFail = true;
    __isset.statsLogInterval = true;
    __isset.statsPrintInterval = true;
    __isset.forceGpsDisable = true;
    __isset.lsmAssocRespTimeout = true;
    __isset.lsmSendAssocReqRetry = true;
    __isset.lsmAssocRespAckTimeout = true;
    __isset.lsmSendAssocRespRetry = true;
    __isset.lsmRepeatAckInterval = true;
    __isset.lsmRepeatAck = true;
    __isset.lsmFirstHeartbTimeout = true;
    __isset.txSlot0Start = true;
    __isset.txSlot0End = true;
    __isset.txSlot1Start = true;
    __isset.txSlot1End = true;
    __isset.txSlot2Start = true;
    __isset.txSlot2End = true;
    __isset.rxSlot0Start = true;
    __isset.rxSlot0End = true;
    __isset.rxSlot1Start = true;
    __isset.rxSlot1End = true;
    __isset.rxSlot2Start = true;
    __isset.rxSlot2End = true;
    __isset.gpsTimeout = true;
    __isset.linkAgc = true;
    __isset.respNodeType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    antCodeBook = arg.move();
    __isset.antCodeBook = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    polarity = arg.move();
    __isset.polarity = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    frameConfig = arg.move();
    __isset.frameConfig = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    numOfPeerSta = arg.move();
    __isset.numOfPeerSta = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    logModules = arg.move();
    __isset.logModules = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<6, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    logSeverity = arg.move();
    __isset.logSeverity = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<7, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    gpioConfig = arg.move();
    __isset.gpioConfig = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<8, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    channel = arg.move();
    __isset.channel = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<9, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    swConfig = arg.move();
    __isset.swConfig = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<10, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    mcs = arg.move();
    __isset.mcs = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<11, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txPower = arg.move();
    __isset.txPower = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<12, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxBuffer = arg.move();
    __isset.rxBuffer = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<13, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    beamConfig = arg.move();
    __isset.beamConfig = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<14, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txBeamIndex = arg.move();
    __isset.txBeamIndex = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<15, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxBeamIndex = arg.move();
    __isset.rxBeamIndex = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<16, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    statsType = arg.move();
    __isset.statsType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<17, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    dataCollectionType = arg.move();
    __isset.dataCollectionType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<18, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    numOfHbLossToFail = arg.move();
    __isset.numOfHbLossToFail = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<19, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    statsLogInterval = arg.move();
    __isset.statsLogInterval = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<20, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    statsPrintInterval = arg.move();
    __isset.statsPrintInterval = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<21, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    forceGpsDisable = arg.move();
    __isset.forceGpsDisable = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<22, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lsmAssocRespTimeout = arg.move();
    __isset.lsmAssocRespTimeout = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<23, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lsmSendAssocReqRetry = arg.move();
    __isset.lsmSendAssocReqRetry = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<24, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lsmAssocRespAckTimeout = arg.move();
    __isset.lsmAssocRespAckTimeout = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<25, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lsmSendAssocRespRetry = arg.move();
    __isset.lsmSendAssocRespRetry = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<26, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lsmRepeatAckInterval = arg.move();
    __isset.lsmRepeatAckInterval = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<27, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lsmRepeatAck = arg.move();
    __isset.lsmRepeatAck = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<28, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    lsmFirstHeartbTimeout = arg.move();
    __isset.lsmFirstHeartbTimeout = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<29, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txSlot0Start = arg.move();
    __isset.txSlot0Start = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<30, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txSlot0End = arg.move();
    __isset.txSlot0End = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<31, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txSlot1Start = arg.move();
    __isset.txSlot1Start = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<32, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txSlot1End = arg.move();
    __isset.txSlot1End = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<33, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txSlot2Start = arg.move();
    __isset.txSlot2Start = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<34, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    txSlot2End = arg.move();
    __isset.txSlot2End = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<35, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxSlot0Start = arg.move();
    __isset.rxSlot0Start = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<36, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxSlot0End = arg.move();
    __isset.rxSlot0End = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<37, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxSlot1Start = arg.move();
    __isset.rxSlot1Start = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<38, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxSlot1End = arg.move();
    __isset.rxSlot1End = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<39, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxSlot2Start = arg.move();
    __isset.rxSlot2Start = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<40, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    rxSlot2End = arg.move();
    __isset.rxSlot2End = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<41, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    gpsTimeout = arg.move();
    __isset.gpsTimeout = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<42, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    linkAgc = arg.move();
    __isset.linkAgc = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  FwOptParams(::apache::thrift::detail::argument_wrapper<43, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    FwOptParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    respNodeType = arg.move();
    __isset.respNodeType = true;
  }

  FwOptParams(FwOptParams&&) = default;

  FwOptParams(const FwOptParams&) = default;

  FwOptParams& operator=(FwOptParams&&) = default;

  FwOptParams& operator=(const FwOptParams&) = default;
  void __clear();

  virtual ~FwOptParams() throw() {}

  int64_t antCodeBook;
  int64_t polarity;
  int64_t frameConfig;
  int64_t numOfPeerSta;
  int64_t logModules;
  int64_t logSeverity;
  int64_t gpioConfig;
  int64_t channel;
  int64_t swConfig;
  int64_t mcs;
  int64_t txPower;
  int64_t rxBuffer;
  int64_t beamConfig;
  int64_t txBeamIndex;
  int64_t rxBeamIndex;
  int64_t statsType;
  int64_t dataCollectionType;
  int64_t numOfHbLossToFail;
  int64_t statsLogInterval;
  int64_t statsPrintInterval;
  int64_t forceGpsDisable;
  int64_t lsmAssocRespTimeout;
  int64_t lsmSendAssocReqRetry;
  int64_t lsmAssocRespAckTimeout;
  int64_t lsmSendAssocRespRetry;
  int64_t lsmRepeatAckInterval;
  int64_t lsmRepeatAck;
  int64_t lsmFirstHeartbTimeout;
  int64_t txSlot0Start;
  int64_t txSlot0End;
  int64_t txSlot1Start;
  int64_t txSlot1End;
  int64_t txSlot2Start;
  int64_t txSlot2End;
  int64_t rxSlot0Start;
  int64_t rxSlot0End;
  int64_t rxSlot1Start;
  int64_t rxSlot1End;
  int64_t rxSlot2Start;
  int64_t rxSlot2End;
  int64_t gpsTimeout;
  int64_t linkAgc;
  int64_t respNodeType;

  struct __isset {
    void __clear() {
      antCodeBook = false;
      polarity = false;
      frameConfig = false;
      numOfPeerSta = false;
      logModules = false;
      logSeverity = false;
      gpioConfig = false;
      channel = false;
      swConfig = false;
      mcs = false;
      txPower = false;
      rxBuffer = false;
      beamConfig = false;
      txBeamIndex = false;
      rxBeamIndex = false;
      statsType = false;
      dataCollectionType = false;
      numOfHbLossToFail = false;
      statsLogInterval = false;
      statsPrintInterval = false;
      forceGpsDisable = false;
      lsmAssocRespTimeout = false;
      lsmSendAssocReqRetry = false;
      lsmAssocRespAckTimeout = false;
      lsmSendAssocRespRetry = false;
      lsmRepeatAckInterval = false;
      lsmRepeatAck = false;
      lsmFirstHeartbTimeout = false;
      txSlot0Start = false;
      txSlot0End = false;
      txSlot1Start = false;
      txSlot1End = false;
      txSlot2Start = false;
      txSlot2End = false;
      rxSlot0Start = false;
      rxSlot0End = false;
      rxSlot1Start = false;
      rxSlot1End = false;
      rxSlot2Start = false;
      rxSlot2End = false;
      gpsTimeout = false;
      linkAgc = false;
      respNodeType = false;
    }

    bool antCodeBook = false;
    bool polarity = false;
    bool frameConfig = false;
    bool numOfPeerSta = false;
    bool logModules = false;
    bool logSeverity = false;
    bool gpioConfig = false;
    bool channel = false;
    bool swConfig = false;
    bool mcs = false;
    bool txPower = false;
    bool rxBuffer = false;
    bool beamConfig = false;
    bool txBeamIndex = false;
    bool rxBeamIndex = false;
    bool statsType = false;
    bool dataCollectionType = false;
    bool numOfHbLossToFail = false;
    bool statsLogInterval = false;
    bool statsPrintInterval = false;
    bool forceGpsDisable = false;
    bool lsmAssocRespTimeout = false;
    bool lsmSendAssocReqRetry = false;
    bool lsmAssocRespAckTimeout = false;
    bool lsmSendAssocRespRetry = false;
    bool lsmRepeatAckInterval = false;
    bool lsmRepeatAck = false;
    bool lsmFirstHeartbTimeout = false;
    bool txSlot0Start = false;
    bool txSlot0End = false;
    bool txSlot1Start = false;
    bool txSlot1End = false;
    bool txSlot2Start = false;
    bool txSlot2End = false;
    bool rxSlot0Start = false;
    bool rxSlot0End = false;
    bool rxSlot1Start = false;
    bool rxSlot1End = false;
    bool rxSlot2Start = false;
    bool rxSlot2End = false;
    bool gpsTimeout = false;
    bool linkAgc = false;
    bool respNodeType = false;
  } __isset;
  bool operator==(const FwOptParams& rhs) const;
  bool operator < (const FwOptParams& rhs) const;

  const int64_t* get_antCodeBook() const& {
    return __isset.antCodeBook ? std::addressof(antCodeBook) : nullptr;
  }

  int64_t* get_antCodeBook() & {
    return __isset.antCodeBook ? std::addressof(antCodeBook) : nullptr;
  }
  int64_t* get_antCodeBook() && = delete;

  int64_t& set_antCodeBook(int64_t antCodeBook_) {
    antCodeBook = antCodeBook_;
    __isset.antCodeBook = true;
    return antCodeBook;
  }

  const int64_t* get_polarity() const& {
    return __isset.polarity ? std::addressof(polarity) : nullptr;
  }

  int64_t* get_polarity() & {
    return __isset.polarity ? std::addressof(polarity) : nullptr;
  }
  int64_t* get_polarity() && = delete;

  int64_t& set_polarity(int64_t polarity_) {
    polarity = polarity_;
    __isset.polarity = true;
    return polarity;
  }

  const int64_t* get_frameConfig() const& {
    return __isset.frameConfig ? std::addressof(frameConfig) : nullptr;
  }

  int64_t* get_frameConfig() & {
    return __isset.frameConfig ? std::addressof(frameConfig) : nullptr;
  }
  int64_t* get_frameConfig() && = delete;

  int64_t& set_frameConfig(int64_t frameConfig_) {
    frameConfig = frameConfig_;
    __isset.frameConfig = true;
    return frameConfig;
  }

  const int64_t* get_numOfPeerSta() const& {
    return __isset.numOfPeerSta ? std::addressof(numOfPeerSta) : nullptr;
  }

  int64_t* get_numOfPeerSta() & {
    return __isset.numOfPeerSta ? std::addressof(numOfPeerSta) : nullptr;
  }
  int64_t* get_numOfPeerSta() && = delete;

  int64_t& set_numOfPeerSta(int64_t numOfPeerSta_) {
    numOfPeerSta = numOfPeerSta_;
    __isset.numOfPeerSta = true;
    return numOfPeerSta;
  }

  const int64_t* get_logModules() const& {
    return __isset.logModules ? std::addressof(logModules) : nullptr;
  }

  int64_t* get_logModules() & {
    return __isset.logModules ? std::addressof(logModules) : nullptr;
  }
  int64_t* get_logModules() && = delete;

  int64_t& set_logModules(int64_t logModules_) {
    logModules = logModules_;
    __isset.logModules = true;
    return logModules;
  }

  const int64_t* get_logSeverity() const& {
    return __isset.logSeverity ? std::addressof(logSeverity) : nullptr;
  }

  int64_t* get_logSeverity() & {
    return __isset.logSeverity ? std::addressof(logSeverity) : nullptr;
  }
  int64_t* get_logSeverity() && = delete;

  int64_t& set_logSeverity(int64_t logSeverity_) {
    logSeverity = logSeverity_;
    __isset.logSeverity = true;
    return logSeverity;
  }

  const int64_t* get_gpioConfig() const& {
    return __isset.gpioConfig ? std::addressof(gpioConfig) : nullptr;
  }

  int64_t* get_gpioConfig() & {
    return __isset.gpioConfig ? std::addressof(gpioConfig) : nullptr;
  }
  int64_t* get_gpioConfig() && = delete;

  int64_t& set_gpioConfig(int64_t gpioConfig_) {
    gpioConfig = gpioConfig_;
    __isset.gpioConfig = true;
    return gpioConfig;
  }

  const int64_t* get_channel() const& {
    return __isset.channel ? std::addressof(channel) : nullptr;
  }

  int64_t* get_channel() & {
    return __isset.channel ? std::addressof(channel) : nullptr;
  }
  int64_t* get_channel() && = delete;

  int64_t& set_channel(int64_t channel_) {
    channel = channel_;
    __isset.channel = true;
    return channel;
  }

  const int64_t* get_swConfig() const& {
    return __isset.swConfig ? std::addressof(swConfig) : nullptr;
  }

  int64_t* get_swConfig() & {
    return __isset.swConfig ? std::addressof(swConfig) : nullptr;
  }
  int64_t* get_swConfig() && = delete;

  int64_t& set_swConfig(int64_t swConfig_) {
    swConfig = swConfig_;
    __isset.swConfig = true;
    return swConfig;
  }

  const int64_t* get_mcs() const& {
    return __isset.mcs ? std::addressof(mcs) : nullptr;
  }

  int64_t* get_mcs() & {
    return __isset.mcs ? std::addressof(mcs) : nullptr;
  }
  int64_t* get_mcs() && = delete;

  int64_t& set_mcs(int64_t mcs_) {
    mcs = mcs_;
    __isset.mcs = true;
    return mcs;
  }

  const int64_t* get_txPower() const& {
    return __isset.txPower ? std::addressof(txPower) : nullptr;
  }

  int64_t* get_txPower() & {
    return __isset.txPower ? std::addressof(txPower) : nullptr;
  }
  int64_t* get_txPower() && = delete;

  int64_t& set_txPower(int64_t txPower_) {
    txPower = txPower_;
    __isset.txPower = true;
    return txPower;
  }

  const int64_t* get_rxBuffer() const& {
    return __isset.rxBuffer ? std::addressof(rxBuffer) : nullptr;
  }

  int64_t* get_rxBuffer() & {
    return __isset.rxBuffer ? std::addressof(rxBuffer) : nullptr;
  }
  int64_t* get_rxBuffer() && = delete;

  int64_t& set_rxBuffer(int64_t rxBuffer_) {
    rxBuffer = rxBuffer_;
    __isset.rxBuffer = true;
    return rxBuffer;
  }

  const int64_t* get_beamConfig() const& {
    return __isset.beamConfig ? std::addressof(beamConfig) : nullptr;
  }

  int64_t* get_beamConfig() & {
    return __isset.beamConfig ? std::addressof(beamConfig) : nullptr;
  }
  int64_t* get_beamConfig() && = delete;

  int64_t& set_beamConfig(int64_t beamConfig_) {
    beamConfig = beamConfig_;
    __isset.beamConfig = true;
    return beamConfig;
  }

  const int64_t* get_txBeamIndex() const& {
    return __isset.txBeamIndex ? std::addressof(txBeamIndex) : nullptr;
  }

  int64_t* get_txBeamIndex() & {
    return __isset.txBeamIndex ? std::addressof(txBeamIndex) : nullptr;
  }
  int64_t* get_txBeamIndex() && = delete;

  int64_t& set_txBeamIndex(int64_t txBeamIndex_) {
    txBeamIndex = txBeamIndex_;
    __isset.txBeamIndex = true;
    return txBeamIndex;
  }

  const int64_t* get_rxBeamIndex() const& {
    return __isset.rxBeamIndex ? std::addressof(rxBeamIndex) : nullptr;
  }

  int64_t* get_rxBeamIndex() & {
    return __isset.rxBeamIndex ? std::addressof(rxBeamIndex) : nullptr;
  }
  int64_t* get_rxBeamIndex() && = delete;

  int64_t& set_rxBeamIndex(int64_t rxBeamIndex_) {
    rxBeamIndex = rxBeamIndex_;
    __isset.rxBeamIndex = true;
    return rxBeamIndex;
  }

  const int64_t* get_statsType() const& {
    return __isset.statsType ? std::addressof(statsType) : nullptr;
  }

  int64_t* get_statsType() & {
    return __isset.statsType ? std::addressof(statsType) : nullptr;
  }
  int64_t* get_statsType() && = delete;

  int64_t& set_statsType(int64_t statsType_) {
    statsType = statsType_;
    __isset.statsType = true;
    return statsType;
  }

  const int64_t* get_dataCollectionType() const& {
    return __isset.dataCollectionType ? std::addressof(dataCollectionType) : nullptr;
  }

  int64_t* get_dataCollectionType() & {
    return __isset.dataCollectionType ? std::addressof(dataCollectionType) : nullptr;
  }
  int64_t* get_dataCollectionType() && = delete;

  int64_t& set_dataCollectionType(int64_t dataCollectionType_) {
    dataCollectionType = dataCollectionType_;
    __isset.dataCollectionType = true;
    return dataCollectionType;
  }

  const int64_t* get_numOfHbLossToFail() const& {
    return __isset.numOfHbLossToFail ? std::addressof(numOfHbLossToFail) : nullptr;
  }

  int64_t* get_numOfHbLossToFail() & {
    return __isset.numOfHbLossToFail ? std::addressof(numOfHbLossToFail) : nullptr;
  }
  int64_t* get_numOfHbLossToFail() && = delete;

  int64_t& set_numOfHbLossToFail(int64_t numOfHbLossToFail_) {
    numOfHbLossToFail = numOfHbLossToFail_;
    __isset.numOfHbLossToFail = true;
    return numOfHbLossToFail;
  }

  const int64_t* get_statsLogInterval() const& {
    return __isset.statsLogInterval ? std::addressof(statsLogInterval) : nullptr;
  }

  int64_t* get_statsLogInterval() & {
    return __isset.statsLogInterval ? std::addressof(statsLogInterval) : nullptr;
  }
  int64_t* get_statsLogInterval() && = delete;

  int64_t& set_statsLogInterval(int64_t statsLogInterval_) {
    statsLogInterval = statsLogInterval_;
    __isset.statsLogInterval = true;
    return statsLogInterval;
  }

  const int64_t* get_statsPrintInterval() const& {
    return __isset.statsPrintInterval ? std::addressof(statsPrintInterval) : nullptr;
  }

  int64_t* get_statsPrintInterval() & {
    return __isset.statsPrintInterval ? std::addressof(statsPrintInterval) : nullptr;
  }
  int64_t* get_statsPrintInterval() && = delete;

  int64_t& set_statsPrintInterval(int64_t statsPrintInterval_) {
    statsPrintInterval = statsPrintInterval_;
    __isset.statsPrintInterval = true;
    return statsPrintInterval;
  }

  const int64_t* get_forceGpsDisable() const& {
    return __isset.forceGpsDisable ? std::addressof(forceGpsDisable) : nullptr;
  }

  int64_t* get_forceGpsDisable() & {
    return __isset.forceGpsDisable ? std::addressof(forceGpsDisable) : nullptr;
  }
  int64_t* get_forceGpsDisable() && = delete;

  int64_t& set_forceGpsDisable(int64_t forceGpsDisable_) {
    forceGpsDisable = forceGpsDisable_;
    __isset.forceGpsDisable = true;
    return forceGpsDisable;
  }

  const int64_t* get_lsmAssocRespTimeout() const& {
    return __isset.lsmAssocRespTimeout ? std::addressof(lsmAssocRespTimeout) : nullptr;
  }

  int64_t* get_lsmAssocRespTimeout() & {
    return __isset.lsmAssocRespTimeout ? std::addressof(lsmAssocRespTimeout) : nullptr;
  }
  int64_t* get_lsmAssocRespTimeout() && = delete;

  int64_t& set_lsmAssocRespTimeout(int64_t lsmAssocRespTimeout_) {
    lsmAssocRespTimeout = lsmAssocRespTimeout_;
    __isset.lsmAssocRespTimeout = true;
    return lsmAssocRespTimeout;
  }

  const int64_t* get_lsmSendAssocReqRetry() const& {
    return __isset.lsmSendAssocReqRetry ? std::addressof(lsmSendAssocReqRetry) : nullptr;
  }

  int64_t* get_lsmSendAssocReqRetry() & {
    return __isset.lsmSendAssocReqRetry ? std::addressof(lsmSendAssocReqRetry) : nullptr;
  }
  int64_t* get_lsmSendAssocReqRetry() && = delete;

  int64_t& set_lsmSendAssocReqRetry(int64_t lsmSendAssocReqRetry_) {
    lsmSendAssocReqRetry = lsmSendAssocReqRetry_;
    __isset.lsmSendAssocReqRetry = true;
    return lsmSendAssocReqRetry;
  }

  const int64_t* get_lsmAssocRespAckTimeout() const& {
    return __isset.lsmAssocRespAckTimeout ? std::addressof(lsmAssocRespAckTimeout) : nullptr;
  }

  int64_t* get_lsmAssocRespAckTimeout() & {
    return __isset.lsmAssocRespAckTimeout ? std::addressof(lsmAssocRespAckTimeout) : nullptr;
  }
  int64_t* get_lsmAssocRespAckTimeout() && = delete;

  int64_t& set_lsmAssocRespAckTimeout(int64_t lsmAssocRespAckTimeout_) {
    lsmAssocRespAckTimeout = lsmAssocRespAckTimeout_;
    __isset.lsmAssocRespAckTimeout = true;
    return lsmAssocRespAckTimeout;
  }

  const int64_t* get_lsmSendAssocRespRetry() const& {
    return __isset.lsmSendAssocRespRetry ? std::addressof(lsmSendAssocRespRetry) : nullptr;
  }

  int64_t* get_lsmSendAssocRespRetry() & {
    return __isset.lsmSendAssocRespRetry ? std::addressof(lsmSendAssocRespRetry) : nullptr;
  }
  int64_t* get_lsmSendAssocRespRetry() && = delete;

  int64_t& set_lsmSendAssocRespRetry(int64_t lsmSendAssocRespRetry_) {
    lsmSendAssocRespRetry = lsmSendAssocRespRetry_;
    __isset.lsmSendAssocRespRetry = true;
    return lsmSendAssocRespRetry;
  }

  const int64_t* get_lsmRepeatAckInterval() const& {
    return __isset.lsmRepeatAckInterval ? std::addressof(lsmRepeatAckInterval) : nullptr;
  }

  int64_t* get_lsmRepeatAckInterval() & {
    return __isset.lsmRepeatAckInterval ? std::addressof(lsmRepeatAckInterval) : nullptr;
  }
  int64_t* get_lsmRepeatAckInterval() && = delete;

  int64_t& set_lsmRepeatAckInterval(int64_t lsmRepeatAckInterval_) {
    lsmRepeatAckInterval = lsmRepeatAckInterval_;
    __isset.lsmRepeatAckInterval = true;
    return lsmRepeatAckInterval;
  }

  const int64_t* get_lsmRepeatAck() const& {
    return __isset.lsmRepeatAck ? std::addressof(lsmRepeatAck) : nullptr;
  }

  int64_t* get_lsmRepeatAck() & {
    return __isset.lsmRepeatAck ? std::addressof(lsmRepeatAck) : nullptr;
  }
  int64_t* get_lsmRepeatAck() && = delete;

  int64_t& set_lsmRepeatAck(int64_t lsmRepeatAck_) {
    lsmRepeatAck = lsmRepeatAck_;
    __isset.lsmRepeatAck = true;
    return lsmRepeatAck;
  }

  const int64_t* get_lsmFirstHeartbTimeout() const& {
    return __isset.lsmFirstHeartbTimeout ? std::addressof(lsmFirstHeartbTimeout) : nullptr;
  }

  int64_t* get_lsmFirstHeartbTimeout() & {
    return __isset.lsmFirstHeartbTimeout ? std::addressof(lsmFirstHeartbTimeout) : nullptr;
  }
  int64_t* get_lsmFirstHeartbTimeout() && = delete;

  int64_t& set_lsmFirstHeartbTimeout(int64_t lsmFirstHeartbTimeout_) {
    lsmFirstHeartbTimeout = lsmFirstHeartbTimeout_;
    __isset.lsmFirstHeartbTimeout = true;
    return lsmFirstHeartbTimeout;
  }

  const int64_t* get_txSlot0Start() const& {
    return __isset.txSlot0Start ? std::addressof(txSlot0Start) : nullptr;
  }

  int64_t* get_txSlot0Start() & {
    return __isset.txSlot0Start ? std::addressof(txSlot0Start) : nullptr;
  }
  int64_t* get_txSlot0Start() && = delete;

  int64_t& set_txSlot0Start(int64_t txSlot0Start_) {
    txSlot0Start = txSlot0Start_;
    __isset.txSlot0Start = true;
    return txSlot0Start;
  }

  const int64_t* get_txSlot0End() const& {
    return __isset.txSlot0End ? std::addressof(txSlot0End) : nullptr;
  }

  int64_t* get_txSlot0End() & {
    return __isset.txSlot0End ? std::addressof(txSlot0End) : nullptr;
  }
  int64_t* get_txSlot0End() && = delete;

  int64_t& set_txSlot0End(int64_t txSlot0End_) {
    txSlot0End = txSlot0End_;
    __isset.txSlot0End = true;
    return txSlot0End;
  }

  const int64_t* get_txSlot1Start() const& {
    return __isset.txSlot1Start ? std::addressof(txSlot1Start) : nullptr;
  }

  int64_t* get_txSlot1Start() & {
    return __isset.txSlot1Start ? std::addressof(txSlot1Start) : nullptr;
  }
  int64_t* get_txSlot1Start() && = delete;

  int64_t& set_txSlot1Start(int64_t txSlot1Start_) {
    txSlot1Start = txSlot1Start_;
    __isset.txSlot1Start = true;
    return txSlot1Start;
  }

  const int64_t* get_txSlot1End() const& {
    return __isset.txSlot1End ? std::addressof(txSlot1End) : nullptr;
  }

  int64_t* get_txSlot1End() & {
    return __isset.txSlot1End ? std::addressof(txSlot1End) : nullptr;
  }
  int64_t* get_txSlot1End() && = delete;

  int64_t& set_txSlot1End(int64_t txSlot1End_) {
    txSlot1End = txSlot1End_;
    __isset.txSlot1End = true;
    return txSlot1End;
  }

  const int64_t* get_txSlot2Start() const& {
    return __isset.txSlot2Start ? std::addressof(txSlot2Start) : nullptr;
  }

  int64_t* get_txSlot2Start() & {
    return __isset.txSlot2Start ? std::addressof(txSlot2Start) : nullptr;
  }
  int64_t* get_txSlot2Start() && = delete;

  int64_t& set_txSlot2Start(int64_t txSlot2Start_) {
    txSlot2Start = txSlot2Start_;
    __isset.txSlot2Start = true;
    return txSlot2Start;
  }

  const int64_t* get_txSlot2End() const& {
    return __isset.txSlot2End ? std::addressof(txSlot2End) : nullptr;
  }

  int64_t* get_txSlot2End() & {
    return __isset.txSlot2End ? std::addressof(txSlot2End) : nullptr;
  }
  int64_t* get_txSlot2End() && = delete;

  int64_t& set_txSlot2End(int64_t txSlot2End_) {
    txSlot2End = txSlot2End_;
    __isset.txSlot2End = true;
    return txSlot2End;
  }

  const int64_t* get_rxSlot0Start() const& {
    return __isset.rxSlot0Start ? std::addressof(rxSlot0Start) : nullptr;
  }

  int64_t* get_rxSlot0Start() & {
    return __isset.rxSlot0Start ? std::addressof(rxSlot0Start) : nullptr;
  }
  int64_t* get_rxSlot0Start() && = delete;

  int64_t& set_rxSlot0Start(int64_t rxSlot0Start_) {
    rxSlot0Start = rxSlot0Start_;
    __isset.rxSlot0Start = true;
    return rxSlot0Start;
  }

  const int64_t* get_rxSlot0End() const& {
    return __isset.rxSlot0End ? std::addressof(rxSlot0End) : nullptr;
  }

  int64_t* get_rxSlot0End() & {
    return __isset.rxSlot0End ? std::addressof(rxSlot0End) : nullptr;
  }
  int64_t* get_rxSlot0End() && = delete;

  int64_t& set_rxSlot0End(int64_t rxSlot0End_) {
    rxSlot0End = rxSlot0End_;
    __isset.rxSlot0End = true;
    return rxSlot0End;
  }

  const int64_t* get_rxSlot1Start() const& {
    return __isset.rxSlot1Start ? std::addressof(rxSlot1Start) : nullptr;
  }

  int64_t* get_rxSlot1Start() & {
    return __isset.rxSlot1Start ? std::addressof(rxSlot1Start) : nullptr;
  }
  int64_t* get_rxSlot1Start() && = delete;

  int64_t& set_rxSlot1Start(int64_t rxSlot1Start_) {
    rxSlot1Start = rxSlot1Start_;
    __isset.rxSlot1Start = true;
    return rxSlot1Start;
  }

  const int64_t* get_rxSlot1End() const& {
    return __isset.rxSlot1End ? std::addressof(rxSlot1End) : nullptr;
  }

  int64_t* get_rxSlot1End() & {
    return __isset.rxSlot1End ? std::addressof(rxSlot1End) : nullptr;
  }
  int64_t* get_rxSlot1End() && = delete;

  int64_t& set_rxSlot1End(int64_t rxSlot1End_) {
    rxSlot1End = rxSlot1End_;
    __isset.rxSlot1End = true;
    return rxSlot1End;
  }

  const int64_t* get_rxSlot2Start() const& {
    return __isset.rxSlot2Start ? std::addressof(rxSlot2Start) : nullptr;
  }

  int64_t* get_rxSlot2Start() & {
    return __isset.rxSlot2Start ? std::addressof(rxSlot2Start) : nullptr;
  }
  int64_t* get_rxSlot2Start() && = delete;

  int64_t& set_rxSlot2Start(int64_t rxSlot2Start_) {
    rxSlot2Start = rxSlot2Start_;
    __isset.rxSlot2Start = true;
    return rxSlot2Start;
  }

  const int64_t* get_rxSlot2End() const& {
    return __isset.rxSlot2End ? std::addressof(rxSlot2End) : nullptr;
  }

  int64_t* get_rxSlot2End() & {
    return __isset.rxSlot2End ? std::addressof(rxSlot2End) : nullptr;
  }
  int64_t* get_rxSlot2End() && = delete;

  int64_t& set_rxSlot2End(int64_t rxSlot2End_) {
    rxSlot2End = rxSlot2End_;
    __isset.rxSlot2End = true;
    return rxSlot2End;
  }

  const int64_t* get_gpsTimeout() const& {
    return __isset.gpsTimeout ? std::addressof(gpsTimeout) : nullptr;
  }

  int64_t* get_gpsTimeout() & {
    return __isset.gpsTimeout ? std::addressof(gpsTimeout) : nullptr;
  }
  int64_t* get_gpsTimeout() && = delete;

  int64_t& set_gpsTimeout(int64_t gpsTimeout_) {
    gpsTimeout = gpsTimeout_;
    __isset.gpsTimeout = true;
    return gpsTimeout;
  }

  const int64_t* get_linkAgc() const& {
    return __isset.linkAgc ? std::addressof(linkAgc) : nullptr;
  }

  int64_t* get_linkAgc() & {
    return __isset.linkAgc ? std::addressof(linkAgc) : nullptr;
  }
  int64_t* get_linkAgc() && = delete;

  int64_t& set_linkAgc(int64_t linkAgc_) {
    linkAgc = linkAgc_;
    __isset.linkAgc = true;
    return linkAgc;
  }

  const int64_t* get_respNodeType() const& {
    return __isset.respNodeType ? std::addressof(respNodeType) : nullptr;
  }

  int64_t* get_respNodeType() & {
    return __isset.respNodeType ? std::addressof(respNodeType) : nullptr;
  }
  int64_t* get_respNodeType() && = delete;

  int64_t& set_respNodeType(int64_t respNodeType_) {
    respNodeType = respNodeType_;
    __isset.respNodeType = true;
    return respNodeType;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(FwOptParams& a, FwOptParams& b);
extern template uint32_t FwOptParams::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t FwOptParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t FwOptParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t FwOptParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t FwOptParams::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t FwOptParams::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t FwOptParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t FwOptParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::FwOptParams>::clear( ::facebook::terragraph::thrift::FwOptParams* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::FwOptParams>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::FwOptParams>::write(Protocol* proto,  ::facebook::terragraph::thrift::FwOptParams const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::FwOptParams>::read(Protocol* proto,  ::facebook::terragraph::thrift::FwOptParams* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::FwOptParams>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::FwOptParams const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::FwOptParams>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::FwOptParams const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class NodeFwParams : private apache::thrift::detail::st::ComparisonOperators<NodeFwParams> {
 public:

  NodeFwParams() {}
  // FragileConstructor for use in initialization lists only

  NodeFwParams(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::FwOptParams nodeInitOptParams__arg,  ::facebook::terragraph::thrift::FwOptParams linkOptParams__arg) :
      nodeInitOptParams(std::move(nodeInitOptParams__arg)),
      linkOptParams(std::move(linkOptParams__arg)) {
    __isset.nodeInitOptParams = true;
    __isset.linkOptParams = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NodeFwParams(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NodeFwParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    nodeInitOptParams = arg.move();
    __isset.nodeInitOptParams = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  NodeFwParams(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    NodeFwParams(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    linkOptParams = arg.move();
    __isset.linkOptParams = true;
  }

  NodeFwParams(NodeFwParams&&) = default;

  NodeFwParams(const NodeFwParams&) = default;

  NodeFwParams& operator=(NodeFwParams&&) = default;

  NodeFwParams& operator=(const NodeFwParams&) = default;
  void __clear();

  virtual ~NodeFwParams() throw() {}

   ::facebook::terragraph::thrift::FwOptParams nodeInitOptParams;
   ::facebook::terragraph::thrift::FwOptParams linkOptParams;

  struct __isset {
    void __clear() {
      nodeInitOptParams = false;
      linkOptParams = false;
    }

    bool nodeInitOptParams = false;
    bool linkOptParams = false;
  } __isset;
  bool operator==(const NodeFwParams& rhs) const;
  bool operator < (const NodeFwParams& rhs) const;
  const  ::facebook::terragraph::thrift::FwOptParams& get_nodeInitOptParams() const&;
   ::facebook::terragraph::thrift::FwOptParams get_nodeInitOptParams() &&;
  template <typename T_NodeFwParams_nodeInitOptParams_struct_setter>
   ::facebook::terragraph::thrift::FwOptParams& set_nodeInitOptParams(T_NodeFwParams_nodeInitOptParams_struct_setter&& nodeInitOptParams_);
  const  ::facebook::terragraph::thrift::FwOptParams& get_linkOptParams() const&;
   ::facebook::terragraph::thrift::FwOptParams get_linkOptParams() &&;
  template <typename T_NodeFwParams_linkOptParams_struct_setter>
   ::facebook::terragraph::thrift::FwOptParams& set_linkOptParams(T_NodeFwParams_linkOptParams_struct_setter&& linkOptParams_);

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(NodeFwParams& a, NodeFwParams& b);
extern template uint32_t NodeFwParams::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t NodeFwParams::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t NodeFwParams::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NodeFwParams::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t NodeFwParams::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t NodeFwParams::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t NodeFwParams::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t NodeFwParams::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::NodeFwParams>::clear( ::facebook::terragraph::thrift::NodeFwParams* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::NodeFwParams>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeFwParams>::write(Protocol* proto,  ::facebook::terragraph::thrift::NodeFwParams const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeFwParams>::read(Protocol* proto,  ::facebook::terragraph::thrift::NodeFwParams* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeFwParams>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::NodeFwParams const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::NodeFwParams>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::NodeFwParams const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class Message : private apache::thrift::detail::st::ComparisonOperators<Message> {
 public:

  Message() :
      mType( ::facebook::terragraph::thrift::MessageType()) {}
  // FragileConstructor for use in initialization lists only

  Message(apache::thrift::FragileConstructor,  ::facebook::terragraph::thrift::MessageType mType__arg, std::string value__arg) :
      mType(std::move(mType__arg)),
      value(std::move(value__arg)) {
    __isset.mType = true;
    __isset.value = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Message(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Message(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    mType = arg.move();
    __isset.mType = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  Message(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    Message(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    value = arg.move();
    __isset.value = true;
  }

  Message(Message&&) = default;

  Message(const Message&) = default;

  Message& operator=(Message&&) = default;

  Message& operator=(const Message&) = default;
  void __clear();

  virtual ~Message() throw() {}

   ::facebook::terragraph::thrift::MessageType mType;
  std::string value;

  struct __isset {
    void __clear() {
      mType = false;
      value = false;
    }

    bool mType = false;
    bool value = false;
  } __isset;
  bool operator==(const Message& rhs) const;

  bool operator < (const Message& rhs) const {
    if (!(mType == rhs.mType)) {
      return mType < rhs.mType;
    }
    if (!(value == rhs.value)) {
      return value < rhs.value;
    }
    return false;
  }

   ::facebook::terragraph::thrift::MessageType get_mType() const {
    return mType;
  }

   ::facebook::terragraph::thrift::MessageType& set_mType( ::facebook::terragraph::thrift::MessageType mType_) {
    mType = mType_;
    __isset.mType = true;
    return mType;
  }

  const std::string& get_value() const& {
    return value;
  }

  std::string get_value() && {
    return std::move(value);
  }

  template <typename T_Message_value_struct_setter>
  std::string& set_value(T_Message_value_struct_setter&& value_) {
    value = std::forward<T_Message_value_struct_setter>(value_);
    __isset.value = true;
    return value;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(Message& a, Message& b);
extern template uint32_t Message::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Message::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Message::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Message::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Message::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Message::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Message::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Message::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::Message>::clear( ::facebook::terragraph::thrift::Message* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::Message>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Message>::write(Protocol* proto,  ::facebook::terragraph::thrift::Message const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Message>::read(Protocol* proto,  ::facebook::terragraph::thrift::Message* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Message>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::Message const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Message>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::Message const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class Hello : private apache::thrift::detail::st::ComparisonOperators<Hello> {
 public:

  Hello() {}
  // FragileConstructor for use in initialization lists only

  Hello(apache::thrift::FragileConstructor) {}

  Hello(Hello&&) = default;

  Hello(const Hello&) = default;

  Hello& operator=(Hello&&) = default;

  Hello& operator=(const Hello&) = default;

  virtual ~Hello() throw() {}

  bool operator==(const Hello& /* rhs */) const;

  bool operator < (const Hello& rhs) const {
    return false;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(Hello& a, Hello& b);
extern template uint32_t Hello::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t Hello::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t Hello::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Hello::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t Hello::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t Hello::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t Hello::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t Hello::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::Hello>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Hello>::write(Protocol* proto,  ::facebook::terragraph::thrift::Hello const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Hello>::read(Protocol* proto,  ::facebook::terragraph::thrift::Hello* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Hello>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::Hello const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::Hello>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::Hello const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

class E2EAck : private apache::thrift::detail::st::ComparisonOperators<E2EAck> {
 public:

  E2EAck() :
      success(0) {}
  // FragileConstructor for use in initialization lists only

  E2EAck(apache::thrift::FragileConstructor, bool success__arg, std::string message__arg) :
      success(std::move(success__arg)),
      message(std::move(message__arg)) {
    __isset.success = true;
    __isset.message = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  E2EAck(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    E2EAck(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }
  template <typename T__ThriftWrappedArgument__Ctor, typename... Args__ThriftWrappedArgument__Ctor>
  E2EAck(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg, Args__ThriftWrappedArgument__Ctor&&... args):
    E2EAck(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    message = arg.move();
    __isset.message = true;
  }

  E2EAck(E2EAck&&) = default;

  E2EAck(const E2EAck&) = default;

  E2EAck& operator=(E2EAck&&) = default;

  E2EAck& operator=(const E2EAck&) = default;
  void __clear();

  virtual ~E2EAck() throw() {}

  bool success;
  std::string message;

  struct __isset {
    void __clear() {
      success = false;
      message = false;
    }

    bool success = false;
    bool message = false;
  } __isset;
  bool operator==(const E2EAck& rhs) const;

  bool operator < (const E2EAck& rhs) const {
    if (!(success == rhs.success)) {
      return success < rhs.success;
    }
    if (!(message == rhs.message)) {
      return message < rhs.message;
    }
    return false;
  }

  bool get_success() const {
    return success;
  }

  bool& set_success(bool success_) {
    success = success_;
    __isset.success = true;
    return success;
  }

  const std::string& get_message() const& {
    return message;
  }

  std::string get_message() && {
    return std::move(message);
  }

  template <typename T_E2EAck_message_struct_setter>
  std::string& set_message(T_E2EAck_message_struct_setter&& message_) {
    message = std::forward<T_E2EAck_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
};

void swap(E2EAck& a, E2EAck& b);
extern template uint32_t E2EAck::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t E2EAck::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t E2EAck::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t E2EAck::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t E2EAck::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t E2EAck::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t E2EAck::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t E2EAck::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

}}} // facebook::terragraph::thrift
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::facebook::terragraph::thrift::E2EAck>::clear( ::facebook::terragraph::thrift::E2EAck* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::facebook::terragraph::thrift::E2EAck>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::E2EAck>::write(Protocol* proto,  ::facebook::terragraph::thrift::E2EAck const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::E2EAck>::read(Protocol* proto,  ::facebook::terragraph::thrift::E2EAck* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::E2EAck>::serializedSize(Protocol const* proto,  ::facebook::terragraph::thrift::E2EAck const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::facebook::terragraph::thrift::E2EAck>::serializedSizeZC(Protocol const* proto,  ::facebook::terragraph::thrift::E2EAck const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace facebook { namespace terragraph { namespace thrift {

}}} // facebook::terragraph::thrift
