//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.MessageType = {
'GET_STATUS_DUMP' : 101,
'STATUS_DUMP' : 121,
'SET_NODE_PARAMS' : 141,
'STATUS_REPORT' : 161,
'GET_IGNITION_STATE' : 201,
'SET_IGNITION_PARAMS' : 202,
'SET_LINK_STATUS_REQ' : 203,
'IGNITION_STATE' : 221,
'SET_LINK_STATUS' : 241,
'LINK_STATUS' : 261,
'GET_TOPOLOGY' : 301,
'SET_NODE_STATUS' : 302,
'SET_NODE_MAC' : 303,
'SET_NODE_PARAMS_REQ' : 304,
'BUMP_LINKUP_ATTEMPTS' : 305,
'ADD_NODE' : 306,
'ADD_LINK' : 307,
'DEL_NODE' : 308,
'DEL_LINK' : 309,
'TOPOLOGY' : 321,
'UPGRADE_REQ' : 401,
'SET_UPGRADE_STATUS' : 421,
'SET_CTRL_PARAMS' : 501,
'DR_ACK' : 491,
'NODE_INIT' : 501,
'DR_SET_LINK_STATUS' : 502,
'FW_SET_NODE_PARAMS' : 503,
'FW_STATS_CONFIGURE_REQ' : 504,
'PHY_LA_LOOKUP_CONFIG_REQ' : 505,
'GPS_ENABLE_REQ' : 506,
'PHY_ANT_WGT_TBL_CONFIG_REQ' : 507,
'FW_DEBUG_REQ' : 508,
'NODE_INIT_NOTIFY' : 551,
'DR_LINK_STATUS' : 552,
'FW_STATS' : 553,
'FW_ACK' : 591,
'FW_HEALTHY' : 592,
'NONE' : 1001,
'HELLO' : 1002,
'E2E_ACK' : 1003,
'TEST' : 1004,
'DR_RESP' : 1005
};
ttypes.LinkActionType = {
'LINK_UP' : 1,
'LINK_DOWN' : 2,
'LINK_ADD' : 3,
'LINK_DELETE' : 4
};
ttypes.LinkStatusType = {
'LINK_UP' : 1,
'LINK_DOWN' : 2
};
ttypes.UpgradeStatusType = {
'NONE' : 10,
'DOWNLOADING_IMAGE' : 20,
'DOWNLOAD_FAILED' : 30,
'FLASHING_IMAGE' : 40,
'FLASH_FAILED' : 50,
'FLASHED' : 60,
'COMMIT_FAILED' : 70
};
ttypes.UpgradeReqType = {
'PREPARE_UPGRADE' : 10,
'COMMIT_UPGRADE' : 20,
'RESET_STATUS' : 30
};
ImageMeta = module.exports.ImageMeta = function(args) {
  this.md5 = null;
  this.version = null;
  if (args) {
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
ImageMeta.prototype = {};
ImageMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImageMeta.prototype.write = function(output) {
  output.writeStructBegin('ImageMeta');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeStatus = module.exports.UpgradeStatus = function(args) {
  this.usType = null;
  this.nextImage = null;
  this.reason = null;
  this.upgradeReqId = null;
  this.whenToCommit = null;
  if (args) {
    if (args.usType !== undefined) {
      this.usType = args.usType;
    }
    if (args.nextImage !== undefined) {
      this.nextImage = args.nextImage;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.upgradeReqId !== undefined) {
      this.upgradeReqId = args.upgradeReqId;
    }
    if (args.whenToCommit !== undefined) {
      this.whenToCommit = args.whenToCommit;
    }
  }
};
UpgradeStatus.prototype = {};
UpgradeStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.usType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nextImage = new ttypes.ImageMeta();
        this.nextImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.upgradeReqId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.whenToCommit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeStatus.prototype.write = function(output) {
  output.writeStructBegin('UpgradeStatus');
  if (this.usType !== null && this.usType !== undefined) {
    output.writeFieldBegin('usType', Thrift.Type.I32, 1);
    output.writeI32(this.usType);
    output.writeFieldEnd();
  }
  if (this.nextImage !== null && this.nextImage !== undefined) {
    output.writeFieldBegin('nextImage', Thrift.Type.STRUCT, 2);
    this.nextImage.write(output);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.upgradeReqId !== null && this.upgradeReqId !== undefined) {
    output.writeFieldBegin('upgradeReqId', Thrift.Type.STRING, 4);
    output.writeString(this.upgradeReqId);
    output.writeFieldEnd();
  }
  if (this.whenToCommit !== null && this.whenToCommit !== undefined) {
    output.writeFieldBegin('whenToCommit', Thrift.Type.I64, 5);
    output.writeI64(this.whenToCommit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeReq = module.exports.UpgradeReq = function(args) {
  this.urType = null;
  this.upgradeReqId = null;
  this.md5 = null;
  this.imageUrl = null;
  this.scheduleToCommit = null;
  if (args) {
    if (args.urType !== undefined) {
      this.urType = args.urType;
    }
    if (args.upgradeReqId !== undefined) {
      this.upgradeReqId = args.upgradeReqId;
    }
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.scheduleToCommit !== undefined) {
      this.scheduleToCommit = args.scheduleToCommit;
    }
  }
};
UpgradeReq.prototype = {};
UpgradeReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.urType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.upgradeReqId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.scheduleToCommit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeReq');
  if (this.urType !== null && this.urType !== undefined) {
    output.writeFieldBegin('urType', Thrift.Type.I32, 1);
    output.writeI32(this.urType);
    output.writeFieldEnd();
  }
  if (this.upgradeReqId !== null && this.upgradeReqId !== undefined) {
    output.writeFieldBegin('upgradeReqId', Thrift.Type.STRING, 2);
    output.writeString(this.upgradeReqId);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.scheduleToCommit !== null && this.scheduleToCommit !== undefined) {
    output.writeFieldBegin('scheduleToCommit', Thrift.Type.I64, 5);
    output.writeI64(this.scheduleToCommit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetStatusDump = module.exports.GetStatusDump = function(args) {
};
GetStatusDump.prototype = {};
GetStatusDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetStatusDump.prototype.write = function(output) {
  output.writeStructBegin('GetStatusDump');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatusDump = module.exports.StatusDump = function(args) {
  this.timeStamp = null;
  this.statusReports = null;
  if (args) {
    if (args.timeStamp !== undefined) {
      this.timeStamp = args.timeStamp;
    }
    if (args.statusReports !== undefined) {
      this.statusReports = args.statusReports;
    }
  }
};
StatusDump.prototype = {};
StatusDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.statusReports = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new ttypes.StatusReport();
          val7.read(input);
          this.statusReports[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatusDump.prototype.write = function(output) {
  output.writeStructBegin('StatusDump');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.statusReports !== null && this.statusReports !== undefined) {
    output.writeFieldBegin('statusReports', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.statusReports));
    for (var kiter8 in this.statusReports)
    {
      if (this.statusReports.hasOwnProperty(kiter8))
      {
        var viter9 = this.statusReports[kiter8];
        output.writeString(kiter8);
        viter9.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeParams = module.exports.NodeParams = function(args) {
  this.bwAllocMap = null;
  this.polarity = null;
  this.golayIdx = null;
  this.location = null;
  if (args) {
    if (args.bwAllocMap !== undefined) {
      this.bwAllocMap = args.bwAllocMap;
    }
    if (args.polarity !== undefined) {
      this.polarity = args.polarity;
    }
    if (args.golayIdx !== undefined) {
      this.golayIdx = args.golayIdx;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
  }
};
NodeParams.prototype = {};
NodeParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bwAllocMap = new BWAllocation_ttypes.BwAllocationMap();
        this.bwAllocMap.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.polarity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.golayIdx = new Topology_ttypes.GolayIdx();
        this.golayIdx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Topology_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeParams.prototype.write = function(output) {
  output.writeStructBegin('NodeParams');
  if (this.bwAllocMap !== null && this.bwAllocMap !== undefined) {
    output.writeFieldBegin('bwAllocMap', Thrift.Type.STRUCT, 1);
    this.bwAllocMap.write(output);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.I32, 2);
    output.writeI32(this.polarity);
    output.writeFieldEnd();
  }
  if (this.golayIdx !== null && this.golayIdx !== undefined) {
    output.writeFieldBegin('golayIdx', Thrift.Type.STRUCT, 3);
    this.golayIdx.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 4);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatusReport = module.exports.StatusReport = function(args) {
  this.timeStamp = null;
  this.ipv6Address = null;
  this.version = null;
  this.isConnected = null;
  this.upgradeStatus = null;
  if (args) {
    if (args.timeStamp !== undefined) {
      this.timeStamp = args.timeStamp;
    }
    if (args.ipv6Address !== undefined) {
      this.ipv6Address = args.ipv6Address;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.isConnected !== undefined) {
      this.isConnected = args.isConnected;
    }
    if (args.upgradeStatus !== undefined) {
      this.upgradeStatus = args.upgradeStatus;
    }
  }
};
StatusReport.prototype = {};
StatusReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipv6Address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isConnected = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.upgradeStatus = new ttypes.UpgradeStatus();
        this.upgradeStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatusReport.prototype.write = function(output) {
  output.writeStructBegin('StatusReport');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.ipv6Address !== null && this.ipv6Address !== undefined) {
    output.writeFieldBegin('ipv6Address', Thrift.Type.STRING, 2);
    output.writeString(this.ipv6Address);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.isConnected !== null && this.isConnected !== undefined) {
    output.writeFieldBegin('isConnected', Thrift.Type.BOOL, 4);
    output.writeBool(this.isConnected);
    output.writeFieldEnd();
  }
  if (this.upgradeStatus !== null && this.upgradeStatus !== undefined) {
    output.writeFieldBegin('upgradeStatus', Thrift.Type.STRUCT, 5);
    this.upgradeStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetIgnitionState = module.exports.GetIgnitionState = function(args) {
};
GetIgnitionState.prototype = {};
GetIgnitionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetIgnitionState.prototype.write = function(output) {
  output.writeStructBegin('GetIgnitionState');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionParams = module.exports.IgnitionParams = function(args) {
  this.enable = null;
  this.linkUpInterval = null;
  if (args) {
    if (args.enable !== undefined) {
      this.enable = args.enable;
    }
    if (args.linkUpInterval !== undefined) {
      this.linkUpInterval = args.linkUpInterval;
    }
  }
};
IgnitionParams.prototype = {};
IgnitionParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.linkUpInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionParams.prototype.write = function(output) {
  output.writeStructBegin('IgnitionParams');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  if (this.linkUpInterval !== null && this.linkUpInterval !== undefined) {
    output.writeFieldBegin('linkUpInterval', Thrift.Type.I64, 2);
    output.writeI64(this.linkUpInterval);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetLinkStatusReq = module.exports.SetLinkStatusReq = function(args) {
  this.action = null;
  this.initiatorNodeName = null;
  this.responderNodeName = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.initiatorNodeName !== undefined) {
      this.initiatorNodeName = args.initiatorNodeName;
    }
    if (args.responderNodeName !== undefined) {
      this.responderNodeName = args.responderNodeName;
    }
  }
};
SetLinkStatusReq.prototype = {};
SetLinkStatusReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.responderNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetLinkStatusReq.prototype.write = function(output) {
  output.writeStructBegin('SetLinkStatusReq');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.initiatorNodeName !== null && this.initiatorNodeName !== undefined) {
    output.writeFieldBegin('initiatorNodeName', Thrift.Type.STRING, 2);
    output.writeString(this.initiatorNodeName);
    output.writeFieldEnd();
  }
  if (this.responderNodeName !== null && this.responderNodeName !== undefined) {
    output.writeFieldBegin('responderNodeName', Thrift.Type.STRING, 3);
    output.writeString(this.responderNodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionCandidate = module.exports.IgnitionCandidate = function(args) {
  this.initiatorNodeName = null;
  this.linkName = null;
  if (args) {
    if (args.initiatorNodeName !== undefined) {
      this.initiatorNodeName = args.initiatorNodeName;
    }
    if (args.linkName !== undefined) {
      this.linkName = args.linkName;
    }
  }
};
IgnitionCandidate.prototype = {};
IgnitionCandidate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.linkName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionCandidate.prototype.write = function(output) {
  output.writeStructBegin('IgnitionCandidate');
  if (this.initiatorNodeName !== null && this.initiatorNodeName !== undefined) {
    output.writeFieldBegin('initiatorNodeName', Thrift.Type.STRING, 1);
    output.writeString(this.initiatorNodeName);
    output.writeFieldEnd();
  }
  if (this.linkName !== null && this.linkName !== undefined) {
    output.writeFieldBegin('linkName', Thrift.Type.STRING, 2);
    output.writeString(this.linkName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionState = module.exports.IgnitionState = function(args) {
  this.visitedNodeNames = null;
  this.igCandidates = null;
  this.lastIgCandidate = null;
  if (args) {
    if (args.visitedNodeNames !== undefined) {
      this.visitedNodeNames = args.visitedNodeNames;
    }
    if (args.igCandidates !== undefined) {
      this.igCandidates = args.igCandidates;
    }
    if (args.lastIgCandidate !== undefined) {
      this.lastIgCandidate = args.lastIgCandidate;
    }
  }
};
IgnitionState.prototype = {};
IgnitionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.visitedNodeNames = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString();
          this.visitedNodeNames.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size17 = 0;
        var _rtmp321;
        this.igCandidates = [];
        var _etype20 = 0;
        _rtmp321 = input.readListBegin();
        _etype20 = _rtmp321.etype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var elem23 = null;
          elem23 = new ttypes.IgnitionCandidate();
          elem23.read(input);
          this.igCandidates.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastIgCandidate = new ttypes.IgnitionCandidate();
        this.lastIgCandidate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionState.prototype.write = function(output) {
  output.writeStructBegin('IgnitionState');
  if (this.visitedNodeNames !== null && this.visitedNodeNames !== undefined) {
    output.writeFieldBegin('visitedNodeNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.visitedNodeNames.length);
    for (var iter24 in this.visitedNodeNames)
    {
      if (this.visitedNodeNames.hasOwnProperty(iter24))
      {
        iter24 = this.visitedNodeNames[iter24];
        output.writeString(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.igCandidates !== null && this.igCandidates !== undefined) {
    output.writeFieldBegin('igCandidates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.igCandidates.length);
    for (var iter25 in this.igCandidates)
    {
      if (this.igCandidates.hasOwnProperty(iter25))
      {
        iter25 = this.igCandidates[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lastIgCandidate !== null && this.lastIgCandidate !== undefined) {
    output.writeFieldBegin('lastIgCandidate', Thrift.Type.STRUCT, 3);
    this.lastIgCandidate.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetLinkStatus = module.exports.SetLinkStatus = function(args) {
  this.linkStatusType = null;
  this.responderMac = null;
  this.responderNodeType = null;
  this.golayIdx = null;
  if (args) {
    if (args.linkStatusType !== undefined) {
      this.linkStatusType = args.linkStatusType;
    }
    if (args.responderMac !== undefined) {
      this.responderMac = args.responderMac;
    }
    if (args.responderNodeType !== undefined) {
      this.responderNodeType = args.responderNodeType;
    }
    if (args.golayIdx !== undefined) {
      this.golayIdx = args.golayIdx;
    }
  }
};
SetLinkStatus.prototype = {};
SetLinkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.linkStatusType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.responderMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.responderNodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.golayIdx = new Topology_ttypes.GolayIdx();
        this.golayIdx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetLinkStatus.prototype.write = function(output) {
  output.writeStructBegin('SetLinkStatus');
  if (this.linkStatusType !== null && this.linkStatusType !== undefined) {
    output.writeFieldBegin('linkStatusType', Thrift.Type.I32, 1);
    output.writeI32(this.linkStatusType);
    output.writeFieldEnd();
  }
  if (this.responderMac !== null && this.responderMac !== undefined) {
    output.writeFieldBegin('responderMac', Thrift.Type.STRING, 2);
    output.writeString(this.responderMac);
    output.writeFieldEnd();
  }
  if (this.responderNodeType !== null && this.responderNodeType !== undefined) {
    output.writeFieldBegin('responderNodeType', Thrift.Type.I32, 3);
    output.writeI32(this.responderNodeType);
    output.writeFieldEnd();
  }
  if (this.golayIdx !== null && this.golayIdx !== undefined) {
    output.writeFieldBegin('golayIdx', Thrift.Type.STRUCT, 4);
    this.golayIdx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinkStatus = module.exports.LinkStatus = function(args) {
  this.responderMac = null;
  this.linkStatusType = null;
  if (args) {
    if (args.responderMac !== undefined) {
      this.responderMac = args.responderMac;
    }
    if (args.linkStatusType !== undefined) {
      this.linkStatusType = args.linkStatusType;
    }
  }
};
LinkStatus.prototype = {};
LinkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.responderMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.linkStatusType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkStatus.prototype.write = function(output) {
  output.writeStructBegin('LinkStatus');
  if (this.responderMac !== null && this.responderMac !== undefined) {
    output.writeFieldBegin('responderMac', Thrift.Type.STRING, 1);
    output.writeString(this.responderMac);
    output.writeFieldEnd();
  }
  if (this.linkStatusType !== null && this.linkStatusType !== undefined) {
    output.writeFieldBegin('linkStatusType', Thrift.Type.I32, 2);
    output.writeI32(this.linkStatusType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetTopology = module.exports.GetTopology = function(args) {
};
GetTopology.prototype = {};
GetTopology.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTopology.prototype.write = function(output) {
  output.writeStructBegin('GetTopology');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeStatus = module.exports.SetNodeStatus = function(args) {
  this.nodeMac = null;
  this.markAllLinksDown = null;
  this.markNodeDown = null;
  if (args) {
    if (args.nodeMac !== undefined) {
      this.nodeMac = args.nodeMac;
    }
    if (args.markAllLinksDown !== undefined) {
      this.markAllLinksDown = args.markAllLinksDown;
    }
    if (args.markNodeDown !== undefined) {
      this.markNodeDown = args.markNodeDown;
    }
  }
};
SetNodeStatus.prototype = {};
SetNodeStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.markAllLinksDown = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.markNodeDown = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeStatus.prototype.write = function(output) {
  output.writeStructBegin('SetNodeStatus');
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 1);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  if (this.markAllLinksDown !== null && this.markAllLinksDown !== undefined) {
    output.writeFieldBegin('markAllLinksDown', Thrift.Type.BOOL, 2);
    output.writeBool(this.markAllLinksDown);
    output.writeFieldEnd();
  }
  if (this.markNodeDown !== null && this.markNodeDown !== undefined) {
    output.writeFieldBegin('markNodeDown', Thrift.Type.BOOL, 3);
    output.writeBool(this.markNodeDown);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeParamsReq = module.exports.SetNodeParamsReq = function(args) {
  this.nodeMac = null;
  this.nodeParams = null;
  if (args) {
    if (args.nodeMac !== undefined) {
      this.nodeMac = args.nodeMac;
    }
    if (args.nodeParams !== undefined) {
      this.nodeParams = args.nodeParams;
    }
  }
};
SetNodeParamsReq.prototype = {};
SetNodeParamsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeParams = new ttypes.NodeParams();
        this.nodeParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeParamsReq.prototype.write = function(output) {
  output.writeStructBegin('SetNodeParamsReq');
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 1);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  if (this.nodeParams !== null && this.nodeParams !== undefined) {
    output.writeFieldBegin('nodeParams', Thrift.Type.STRUCT, 2);
    this.nodeParams.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeMac = module.exports.SetNodeMac = function(args) {
  this.nodeName = null;
  this.scannedBlob = null;
  if (args) {
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
    if (args.scannedBlob !== undefined) {
      this.scannedBlob = args.scannedBlob;
    }
  }
};
SetNodeMac.prototype = {};
SetNodeMac.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scannedBlob = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeMac.prototype.write = function(output) {
  output.writeStructBegin('SetNodeMac');
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 1);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  if (this.scannedBlob !== null && this.scannedBlob !== undefined) {
    output.writeFieldBegin('scannedBlob', Thrift.Type.STRING, 2);
    output.writeString(this.scannedBlob);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BumpLinkUpAttempts = module.exports.BumpLinkUpAttempts = function(args) {
  this.linkName = null;
  if (args) {
    if (args.linkName !== undefined) {
      this.linkName = args.linkName;
    }
  }
};
BumpLinkUpAttempts.prototype = {};
BumpLinkUpAttempts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.linkName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BumpLinkUpAttempts.prototype.write = function(output) {
  output.writeStructBegin('BumpLinkUpAttempts');
  if (this.linkName !== null && this.linkName !== undefined) {
    output.writeFieldBegin('linkName', Thrift.Type.STRING, 1);
    output.writeString(this.linkName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddNode = module.exports.AddNode = function(args) {
  this.node = null;
  if (args) {
    if (args.node !== undefined) {
      this.node = args.node;
    }
  }
};
AddNode.prototype = {};
AddNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new Topology_ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddNode.prototype.write = function(output) {
  output.writeStructBegin('AddNode');
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 1);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelNode = module.exports.DelNode = function(args) {
  this.nodeName = null;
  if (args) {
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
  }
};
DelNode.prototype = {};
DelNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelNode.prototype.write = function(output) {
  output.writeStructBegin('DelNode');
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 1);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddLink = module.exports.AddLink = function(args) {
  this.link = null;
  if (args) {
    if (args.link !== undefined) {
      this.link = args.link;
    }
  }
};
AddLink.prototype = {};
AddLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.link = new Topology_ttypes.Link();
        this.link.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddLink.prototype.write = function(output) {
  output.writeStructBegin('AddLink');
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRUCT, 1);
    this.link.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelLink = module.exports.DelLink = function(args) {
  this.a_node_name = null;
  this.z_node_name = null;
  if (args) {
    if (args.a_node_name !== undefined) {
      this.a_node_name = args.a_node_name;
    }
    if (args.z_node_name !== undefined) {
      this.z_node_name = args.z_node_name;
    }
  }
};
DelLink.prototype = {};
DelLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.a_node_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.z_node_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelLink.prototype.write = function(output) {
  output.writeStructBegin('DelLink');
  if (this.a_node_name !== null && this.a_node_name !== undefined) {
    output.writeFieldBegin('a_node_name', Thrift.Type.STRING, 1);
    output.writeString(this.a_node_name);
    output.writeFieldEnd();
  }
  if (this.z_node_name !== null && this.z_node_name !== undefined) {
    output.writeFieldBegin('z_node_name', Thrift.Type.STRING, 2);
    output.writeString(this.z_node_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetCtrlParams = module.exports.SetCtrlParams = function(args) {
  this.ctrlUrl = null;
  if (args) {
    if (args.ctrlUrl !== undefined) {
      this.ctrlUrl = args.ctrlUrl;
    }
  }
};
SetCtrlParams.prototype = {};
SetCtrlParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ctrlUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetCtrlParams.prototype.write = function(output) {
  output.writeStructBegin('SetCtrlParams');
  if (this.ctrlUrl !== null && this.ctrlUrl !== undefined) {
    output.writeFieldBegin('ctrlUrl', Thrift.Type.STRING, 1);
    output.writeString(this.ctrlUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FwOptParams = module.exports.FwOptParams = function(args) {
  this.antCodeBook = null;
  this.polarity = null;
  this.frameConfig = null;
  this.numOfPeerSta = null;
  this.gpioConfig = null;
  this.channel = null;
  this.swConfig = null;
  this.mcs = null;
  this.txPower = null;
  this.rxBuffer = null;
  this.beamConfig = null;
  this.txBeamIndex = null;
  this.rxBeamIndex = null;
  this.numOfHbLossToFail = null;
  this.statsLogInterval = null;
  this.statsPrintInterval = null;
  this.forceGpsDisable = null;
  this.lsmAssocRespTimeout = null;
  this.lsmSendAssocReqRetry = null;
  this.lsmAssocRespAckTimeout = null;
  this.lsmSendAssocRespRetry = null;
  this.lsmRepeatAckInterval = null;
  this.lsmRepeatAck = null;
  this.lsmFirstHeartbTimeout = null;
  this.txSlot0Start = null;
  this.txSlot0End = null;
  this.txSlot1Start = null;
  this.txSlot1End = null;
  this.txSlot2Start = null;
  this.txSlot2End = null;
  this.rxSlot0Start = null;
  this.rxSlot0End = null;
  this.rxSlot1Start = null;
  this.rxSlot1End = null;
  this.rxSlot2Start = null;
  this.rxSlot2End = null;
  this.gpsTimeout = null;
  this.linkAgc = null;
  this.respNodeType = null;
  this.txGolayIdx = null;
  this.rxGolayIdx = null;
  if (args) {
    if (args.antCodeBook !== undefined) {
      this.antCodeBook = args.antCodeBook;
    }
    if (args.polarity !== undefined) {
      this.polarity = args.polarity;
    }
    if (args.frameConfig !== undefined) {
      this.frameConfig = args.frameConfig;
    }
    if (args.numOfPeerSta !== undefined) {
      this.numOfPeerSta = args.numOfPeerSta;
    }
    if (args.gpioConfig !== undefined) {
      this.gpioConfig = args.gpioConfig;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.swConfig !== undefined) {
      this.swConfig = args.swConfig;
    }
    if (args.mcs !== undefined) {
      this.mcs = args.mcs;
    }
    if (args.txPower !== undefined) {
      this.txPower = args.txPower;
    }
    if (args.rxBuffer !== undefined) {
      this.rxBuffer = args.rxBuffer;
    }
    if (args.beamConfig !== undefined) {
      this.beamConfig = args.beamConfig;
    }
    if (args.txBeamIndex !== undefined) {
      this.txBeamIndex = args.txBeamIndex;
    }
    if (args.rxBeamIndex !== undefined) {
      this.rxBeamIndex = args.rxBeamIndex;
    }
    if (args.numOfHbLossToFail !== undefined) {
      this.numOfHbLossToFail = args.numOfHbLossToFail;
    }
    if (args.statsLogInterval !== undefined) {
      this.statsLogInterval = args.statsLogInterval;
    }
    if (args.statsPrintInterval !== undefined) {
      this.statsPrintInterval = args.statsPrintInterval;
    }
    if (args.forceGpsDisable !== undefined) {
      this.forceGpsDisable = args.forceGpsDisable;
    }
    if (args.lsmAssocRespTimeout !== undefined) {
      this.lsmAssocRespTimeout = args.lsmAssocRespTimeout;
    }
    if (args.lsmSendAssocReqRetry !== undefined) {
      this.lsmSendAssocReqRetry = args.lsmSendAssocReqRetry;
    }
    if (args.lsmAssocRespAckTimeout !== undefined) {
      this.lsmAssocRespAckTimeout = args.lsmAssocRespAckTimeout;
    }
    if (args.lsmSendAssocRespRetry !== undefined) {
      this.lsmSendAssocRespRetry = args.lsmSendAssocRespRetry;
    }
    if (args.lsmRepeatAckInterval !== undefined) {
      this.lsmRepeatAckInterval = args.lsmRepeatAckInterval;
    }
    if (args.lsmRepeatAck !== undefined) {
      this.lsmRepeatAck = args.lsmRepeatAck;
    }
    if (args.lsmFirstHeartbTimeout !== undefined) {
      this.lsmFirstHeartbTimeout = args.lsmFirstHeartbTimeout;
    }
    if (args.txSlot0Start !== undefined) {
      this.txSlot0Start = args.txSlot0Start;
    }
    if (args.txSlot0End !== undefined) {
      this.txSlot0End = args.txSlot0End;
    }
    if (args.txSlot1Start !== undefined) {
      this.txSlot1Start = args.txSlot1Start;
    }
    if (args.txSlot1End !== undefined) {
      this.txSlot1End = args.txSlot1End;
    }
    if (args.txSlot2Start !== undefined) {
      this.txSlot2Start = args.txSlot2Start;
    }
    if (args.txSlot2End !== undefined) {
      this.txSlot2End = args.txSlot2End;
    }
    if (args.rxSlot0Start !== undefined) {
      this.rxSlot0Start = args.rxSlot0Start;
    }
    if (args.rxSlot0End !== undefined) {
      this.rxSlot0End = args.rxSlot0End;
    }
    if (args.rxSlot1Start !== undefined) {
      this.rxSlot1Start = args.rxSlot1Start;
    }
    if (args.rxSlot1End !== undefined) {
      this.rxSlot1End = args.rxSlot1End;
    }
    if (args.rxSlot2Start !== undefined) {
      this.rxSlot2Start = args.rxSlot2Start;
    }
    if (args.rxSlot2End !== undefined) {
      this.rxSlot2End = args.rxSlot2End;
    }
    if (args.gpsTimeout !== undefined) {
      this.gpsTimeout = args.gpsTimeout;
    }
    if (args.linkAgc !== undefined) {
      this.linkAgc = args.linkAgc;
    }
    if (args.respNodeType !== undefined) {
      this.respNodeType = args.respNodeType;
    }
    if (args.txGolayIdx !== undefined) {
      this.txGolayIdx = args.txGolayIdx;
    }
    if (args.rxGolayIdx !== undefined) {
      this.rxGolayIdx = args.rxGolayIdx;
    }
  }
};
FwOptParams.prototype = {};
FwOptParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.antCodeBook = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.polarity = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.frameConfig = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numOfPeerSta = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.gpioConfig = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.channel = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.swConfig = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.mcs = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.txPower = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.rxBuffer = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.beamConfig = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.txBeamIndex = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.rxBeamIndex = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.numOfHbLossToFail = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.statsLogInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.statsPrintInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.forceGpsDisable = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I64) {
        this.lsmAssocRespTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I64) {
        this.lsmSendAssocReqRetry = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I64) {
        this.lsmAssocRespAckTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I64) {
        this.lsmSendAssocRespRetry = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I64) {
        this.lsmRepeatAckInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I64) {
        this.lsmRepeatAck = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.lsmFirstHeartbTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.I64) {
        this.txSlot0Start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.txSlot0End = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I64) {
        this.txSlot1Start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I64) {
        this.txSlot1End = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I64) {
        this.txSlot2Start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I64) {
        this.txSlot2End = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I64) {
        this.rxSlot0Start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I64) {
        this.rxSlot0End = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.I64) {
        this.rxSlot1Start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.I64) {
        this.rxSlot1End = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I64) {
        this.rxSlot2Start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.rxSlot2End = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.I64) {
        this.gpsTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I64) {
        this.linkAgc = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.I64) {
        this.respNodeType = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I64) {
        this.txGolayIdx = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.I64) {
        this.rxGolayIdx = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FwOptParams.prototype.write = function(output) {
  output.writeStructBegin('FwOptParams');
  if (this.antCodeBook !== null && this.antCodeBook !== undefined) {
    output.writeFieldBegin('antCodeBook', Thrift.Type.I64, 1);
    output.writeI64(this.antCodeBook);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.I64, 2);
    output.writeI64(this.polarity);
    output.writeFieldEnd();
  }
  if (this.frameConfig !== null && this.frameConfig !== undefined) {
    output.writeFieldBegin('frameConfig', Thrift.Type.I64, 3);
    output.writeI64(this.frameConfig);
    output.writeFieldEnd();
  }
  if (this.numOfPeerSta !== null && this.numOfPeerSta !== undefined) {
    output.writeFieldBegin('numOfPeerSta', Thrift.Type.I64, 4);
    output.writeI64(this.numOfPeerSta);
    output.writeFieldEnd();
  }
  if (this.gpioConfig !== null && this.gpioConfig !== undefined) {
    output.writeFieldBegin('gpioConfig', Thrift.Type.I64, 7);
    output.writeI64(this.gpioConfig);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.I64, 8);
    output.writeI64(this.channel);
    output.writeFieldEnd();
  }
  if (this.swConfig !== null && this.swConfig !== undefined) {
    output.writeFieldBegin('swConfig', Thrift.Type.I64, 9);
    output.writeI64(this.swConfig);
    output.writeFieldEnd();
  }
  if (this.mcs !== null && this.mcs !== undefined) {
    output.writeFieldBegin('mcs', Thrift.Type.I64, 10);
    output.writeI64(this.mcs);
    output.writeFieldEnd();
  }
  if (this.txPower !== null && this.txPower !== undefined) {
    output.writeFieldBegin('txPower', Thrift.Type.I64, 11);
    output.writeI64(this.txPower);
    output.writeFieldEnd();
  }
  if (this.rxBuffer !== null && this.rxBuffer !== undefined) {
    output.writeFieldBegin('rxBuffer', Thrift.Type.I64, 12);
    output.writeI64(this.rxBuffer);
    output.writeFieldEnd();
  }
  if (this.beamConfig !== null && this.beamConfig !== undefined) {
    output.writeFieldBegin('beamConfig', Thrift.Type.I64, 13);
    output.writeI64(this.beamConfig);
    output.writeFieldEnd();
  }
  if (this.txBeamIndex !== null && this.txBeamIndex !== undefined) {
    output.writeFieldBegin('txBeamIndex', Thrift.Type.I64, 14);
    output.writeI64(this.txBeamIndex);
    output.writeFieldEnd();
  }
  if (this.rxBeamIndex !== null && this.rxBeamIndex !== undefined) {
    output.writeFieldBegin('rxBeamIndex', Thrift.Type.I64, 15);
    output.writeI64(this.rxBeamIndex);
    output.writeFieldEnd();
  }
  if (this.numOfHbLossToFail !== null && this.numOfHbLossToFail !== undefined) {
    output.writeFieldBegin('numOfHbLossToFail', Thrift.Type.I64, 18);
    output.writeI64(this.numOfHbLossToFail);
    output.writeFieldEnd();
  }
  if (this.statsLogInterval !== null && this.statsLogInterval !== undefined) {
    output.writeFieldBegin('statsLogInterval', Thrift.Type.I64, 19);
    output.writeI64(this.statsLogInterval);
    output.writeFieldEnd();
  }
  if (this.statsPrintInterval !== null && this.statsPrintInterval !== undefined) {
    output.writeFieldBegin('statsPrintInterval', Thrift.Type.I64, 20);
    output.writeI64(this.statsPrintInterval);
    output.writeFieldEnd();
  }
  if (this.forceGpsDisable !== null && this.forceGpsDisable !== undefined) {
    output.writeFieldBegin('forceGpsDisable', Thrift.Type.I64, 21);
    output.writeI64(this.forceGpsDisable);
    output.writeFieldEnd();
  }
  if (this.lsmAssocRespTimeout !== null && this.lsmAssocRespTimeout !== undefined) {
    output.writeFieldBegin('lsmAssocRespTimeout', Thrift.Type.I64, 22);
    output.writeI64(this.lsmAssocRespTimeout);
    output.writeFieldEnd();
  }
  if (this.lsmSendAssocReqRetry !== null && this.lsmSendAssocReqRetry !== undefined) {
    output.writeFieldBegin('lsmSendAssocReqRetry', Thrift.Type.I64, 23);
    output.writeI64(this.lsmSendAssocReqRetry);
    output.writeFieldEnd();
  }
  if (this.lsmAssocRespAckTimeout !== null && this.lsmAssocRespAckTimeout !== undefined) {
    output.writeFieldBegin('lsmAssocRespAckTimeout', Thrift.Type.I64, 24);
    output.writeI64(this.lsmAssocRespAckTimeout);
    output.writeFieldEnd();
  }
  if (this.lsmSendAssocRespRetry !== null && this.lsmSendAssocRespRetry !== undefined) {
    output.writeFieldBegin('lsmSendAssocRespRetry', Thrift.Type.I64, 25);
    output.writeI64(this.lsmSendAssocRespRetry);
    output.writeFieldEnd();
  }
  if (this.lsmRepeatAckInterval !== null && this.lsmRepeatAckInterval !== undefined) {
    output.writeFieldBegin('lsmRepeatAckInterval', Thrift.Type.I64, 26);
    output.writeI64(this.lsmRepeatAckInterval);
    output.writeFieldEnd();
  }
  if (this.lsmRepeatAck !== null && this.lsmRepeatAck !== undefined) {
    output.writeFieldBegin('lsmRepeatAck', Thrift.Type.I64, 27);
    output.writeI64(this.lsmRepeatAck);
    output.writeFieldEnd();
  }
  if (this.lsmFirstHeartbTimeout !== null && this.lsmFirstHeartbTimeout !== undefined) {
    output.writeFieldBegin('lsmFirstHeartbTimeout', Thrift.Type.I64, 28);
    output.writeI64(this.lsmFirstHeartbTimeout);
    output.writeFieldEnd();
  }
  if (this.txSlot0Start !== null && this.txSlot0Start !== undefined) {
    output.writeFieldBegin('txSlot0Start', Thrift.Type.I64, 29);
    output.writeI64(this.txSlot0Start);
    output.writeFieldEnd();
  }
  if (this.txSlot0End !== null && this.txSlot0End !== undefined) {
    output.writeFieldBegin('txSlot0End', Thrift.Type.I64, 30);
    output.writeI64(this.txSlot0End);
    output.writeFieldEnd();
  }
  if (this.txSlot1Start !== null && this.txSlot1Start !== undefined) {
    output.writeFieldBegin('txSlot1Start', Thrift.Type.I64, 31);
    output.writeI64(this.txSlot1Start);
    output.writeFieldEnd();
  }
  if (this.txSlot1End !== null && this.txSlot1End !== undefined) {
    output.writeFieldBegin('txSlot1End', Thrift.Type.I64, 32);
    output.writeI64(this.txSlot1End);
    output.writeFieldEnd();
  }
  if (this.txSlot2Start !== null && this.txSlot2Start !== undefined) {
    output.writeFieldBegin('txSlot2Start', Thrift.Type.I64, 33);
    output.writeI64(this.txSlot2Start);
    output.writeFieldEnd();
  }
  if (this.txSlot2End !== null && this.txSlot2End !== undefined) {
    output.writeFieldBegin('txSlot2End', Thrift.Type.I64, 34);
    output.writeI64(this.txSlot2End);
    output.writeFieldEnd();
  }
  if (this.rxSlot0Start !== null && this.rxSlot0Start !== undefined) {
    output.writeFieldBegin('rxSlot0Start', Thrift.Type.I64, 35);
    output.writeI64(this.rxSlot0Start);
    output.writeFieldEnd();
  }
  if (this.rxSlot0End !== null && this.rxSlot0End !== undefined) {
    output.writeFieldBegin('rxSlot0End', Thrift.Type.I64, 36);
    output.writeI64(this.rxSlot0End);
    output.writeFieldEnd();
  }
  if (this.rxSlot1Start !== null && this.rxSlot1Start !== undefined) {
    output.writeFieldBegin('rxSlot1Start', Thrift.Type.I64, 37);
    output.writeI64(this.rxSlot1Start);
    output.writeFieldEnd();
  }
  if (this.rxSlot1End !== null && this.rxSlot1End !== undefined) {
    output.writeFieldBegin('rxSlot1End', Thrift.Type.I64, 38);
    output.writeI64(this.rxSlot1End);
    output.writeFieldEnd();
  }
  if (this.rxSlot2Start !== null && this.rxSlot2Start !== undefined) {
    output.writeFieldBegin('rxSlot2Start', Thrift.Type.I64, 39);
    output.writeI64(this.rxSlot2Start);
    output.writeFieldEnd();
  }
  if (this.rxSlot2End !== null && this.rxSlot2End !== undefined) {
    output.writeFieldBegin('rxSlot2End', Thrift.Type.I64, 40);
    output.writeI64(this.rxSlot2End);
    output.writeFieldEnd();
  }
  if (this.gpsTimeout !== null && this.gpsTimeout !== undefined) {
    output.writeFieldBegin('gpsTimeout', Thrift.Type.I64, 41);
    output.writeI64(this.gpsTimeout);
    output.writeFieldEnd();
  }
  if (this.linkAgc !== null && this.linkAgc !== undefined) {
    output.writeFieldBegin('linkAgc', Thrift.Type.I64, 42);
    output.writeI64(this.linkAgc);
    output.writeFieldEnd();
  }
  if (this.respNodeType !== null && this.respNodeType !== undefined) {
    output.writeFieldBegin('respNodeType', Thrift.Type.I64, 43);
    output.writeI64(this.respNodeType);
    output.writeFieldEnd();
  }
  if (this.txGolayIdx !== null && this.txGolayIdx !== undefined) {
    output.writeFieldBegin('txGolayIdx', Thrift.Type.I64, 44);
    output.writeI64(this.txGolayIdx);
    output.writeFieldEnd();
  }
  if (this.rxGolayIdx !== null && this.rxGolayIdx !== undefined) {
    output.writeFieldBegin('rxGolayIdx', Thrift.Type.I64, 45);
    output.writeI64(this.rxGolayIdx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeFwParams = module.exports.NodeFwParams = function(args) {
  this.nodeInitOptParams = null;
  this.linkOptParams = null;
  if (args) {
    if (args.nodeInitOptParams !== undefined) {
      this.nodeInitOptParams = args.nodeInitOptParams;
    }
    if (args.linkOptParams !== undefined) {
      this.linkOptParams = args.linkOptParams;
    }
  }
};
NodeFwParams.prototype = {};
NodeFwParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeInitOptParams = new ttypes.FwOptParams();
        this.nodeInitOptParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.linkOptParams = new ttypes.FwOptParams();
        this.linkOptParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeFwParams.prototype.write = function(output) {
  output.writeStructBegin('NodeFwParams');
  if (this.nodeInitOptParams !== null && this.nodeInitOptParams !== undefined) {
    output.writeFieldBegin('nodeInitOptParams', Thrift.Type.STRUCT, 1);
    this.nodeInitOptParams.write(output);
    output.writeFieldEnd();
  }
  if (this.linkOptParams !== null && this.linkOptParams !== undefined) {
    output.writeFieldBegin('linkOptParams', Thrift.Type.STRUCT, 2);
    this.linkOptParams.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = module.exports.Message = function(args) {
  this.mType = null;
  this.value = null;
  if (args) {
    if (args.mType !== undefined) {
      this.mType = args.mType;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.mType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.mType !== null && this.mType !== undefined) {
    output.writeFieldBegin('mType', Thrift.Type.I32, 1);
    output.writeI32(this.mType);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hello = module.exports.Hello = function(args) {
};
Hello.prototype = {};
Hello.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hello.prototype.write = function(output) {
  output.writeStructBegin('Hello');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

E2EAck = module.exports.E2EAck = function(args) {
  this.success = null;
  this.message = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
E2EAck.prototype = {};
E2EAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EAck.prototype.write = function(output) {
  output.writeStructBegin('E2EAck');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

