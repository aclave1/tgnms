//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.fb_status = {
'DEAD' : 0,
'STARTING' : 1,
'ALIVE' : 2,
'STOPPING' : 3,
'STOPPED' : 4,
'WARNING' : 5
};
CountersInformation = module.exports.CountersInformation = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
CountersInformation.prototype = {};
CountersInformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.data = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readI64();
          this.data[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CountersInformation.prototype.write = function(output) {
  output.writeStructBegin('CountersInformation');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.data));
    for (var kiter8 in this.data)
    {
      if (this.data.hasOwnProperty(kiter8))
      {
        var viter9 = this.data[kiter8];
        output.writeString(kiter8);
        output.writeI64(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CpuProfileOptions = module.exports.CpuProfileOptions = function(args) {
  this.durationSecs = null;
  this.selective = null;
  if (args) {
    if (args.durationSecs !== undefined) {
      this.durationSecs = args.durationSecs;
    }
    if (args.selective !== undefined) {
      this.selective = args.selective;
    }
  }
};
CpuProfileOptions.prototype = {};
CpuProfileOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.durationSecs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.selective = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CpuProfileOptions.prototype.write = function(output) {
  output.writeStructBegin('CpuProfileOptions');
  if (this.durationSecs !== null && this.durationSecs !== undefined) {
    output.writeFieldBegin('durationSecs', Thrift.Type.I32, 1);
    output.writeI32(this.durationSecs);
    output.writeFieldEnd();
  }
  if (this.selective !== null && this.selective !== undefined) {
    output.writeFieldBegin('selective', Thrift.Type.BOOL, 2);
    output.writeBool(this.selective);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PcapLoggingConfig = module.exports.PcapLoggingConfig = function(args) {
  this.enabled = null;
  this.prefix = null;
  this.timeoutMs = null;
  this.snaplen = null;
  this.numMessagesConnStart = null;
  this.numMessagesConnEnd = null;
  this.sampleConnectionPct = null;
  this.rotateAfterMB = null;
  if (args) {
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
    if (args.prefix !== undefined) {
      this.prefix = args.prefix;
    }
    if (args.timeoutMs !== undefined) {
      this.timeoutMs = args.timeoutMs;
    }
    if (args.snaplen !== undefined) {
      this.snaplen = args.snaplen;
    }
    if (args.numMessagesConnStart !== undefined) {
      this.numMessagesConnStart = args.numMessagesConnStart;
    }
    if (args.numMessagesConnEnd !== undefined) {
      this.numMessagesConnEnd = args.numMessagesConnEnd;
    }
    if (args.sampleConnectionPct !== undefined) {
      this.sampleConnectionPct = args.sampleConnectionPct;
    }
    if (args.rotateAfterMB !== undefined) {
      this.rotateAfterMB = args.rotateAfterMB;
    }
  }
};
PcapLoggingConfig.prototype = {};
PcapLoggingConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.timeoutMs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.snaplen = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numMessagesConnStart = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.numMessagesConnEnd = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.sampleConnectionPct = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.rotateAfterMB = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PcapLoggingConfig.prototype.write = function(output) {
  output.writeStructBegin('PcapLoggingConfig');
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 1);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 2);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  if (this.timeoutMs !== null && this.timeoutMs !== undefined) {
    output.writeFieldBegin('timeoutMs', Thrift.Type.I32, 3);
    output.writeI32(this.timeoutMs);
    output.writeFieldEnd();
  }
  if (this.snaplen !== null && this.snaplen !== undefined) {
    output.writeFieldBegin('snaplen', Thrift.Type.I32, 4);
    output.writeI32(this.snaplen);
    output.writeFieldEnd();
  }
  if (this.numMessagesConnStart !== null && this.numMessagesConnStart !== undefined) {
    output.writeFieldBegin('numMessagesConnStart', Thrift.Type.I32, 5);
    output.writeI32(this.numMessagesConnStart);
    output.writeFieldEnd();
  }
  if (this.numMessagesConnEnd !== null && this.numMessagesConnEnd !== undefined) {
    output.writeFieldBegin('numMessagesConnEnd', Thrift.Type.I32, 6);
    output.writeI32(this.numMessagesConnEnd);
    output.writeFieldEnd();
  }
  if (this.sampleConnectionPct !== null && this.sampleConnectionPct !== undefined) {
    output.writeFieldBegin('sampleConnectionPct', Thrift.Type.I32, 7);
    output.writeI32(this.sampleConnectionPct);
    output.writeFieldEnd();
  }
  if (this.rotateAfterMB !== null && this.rotateAfterMB !== undefined) {
    output.writeFieldBegin('rotateAfterMB', Thrift.Type.I32, 8);
    output.writeI32(this.rotateAfterMB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PcapLoggingConfigException = module.exports.PcapLoggingConfigException = function(args) {
  Thrift.TException.call(this, "PcapLoggingConfigException")
  this.name = "PcapLoggingConfigException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(PcapLoggingConfigException, Thrift.TException);
PcapLoggingConfigException.prototype.name = 'PcapLoggingConfigException';
PcapLoggingConfigException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PcapLoggingConfigException.prototype.write = function(output) {
  output.writeStructBegin('PcapLoggingConfigException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

