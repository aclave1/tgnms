//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./fb303_types');
//HELPER FUNCTIONS AND STRUCTURES

FacebookService_getName_args = function(args) {
};
FacebookService_getName_args.prototype = {};
FacebookService_getName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getName_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getName_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getName_result.prototype = {};
FacebookService_getName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getName_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getName_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getVersion_args = function(args) {
};
FacebookService_getVersion_args.prototype = {};
FacebookService_getVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getVersion_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getVersion_result.prototype = {};
FacebookService_getVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getVersion_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getStatus_args = function(args) {
};
FacebookService_getStatus_args.prototype = {};
FacebookService_getStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getStatus_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getStatus_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getStatus_result.prototype = {};
FacebookService_getStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getStatus_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getStatusDetails_args = function(args) {
};
FacebookService_getStatusDetails_args.prototype = {};
FacebookService_getStatusDetails_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getStatusDetails_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getStatusDetails_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getStatusDetails_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getStatusDetails_result.prototype = {};
FacebookService_getStatusDetails_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getStatusDetails_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getStatusDetails_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCounters_args = function(args) {
};
FacebookService_getCounters_args.prototype = {};
FacebookService_getCounters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCounters_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCounters_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCounters_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getCounters_result.prototype = {};
FacebookService_getCounters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.success = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readI64();
          this.success[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCounters_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCounters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter18 in this.success)
    {
      if (this.success.hasOwnProperty(kiter18))
      {
        var viter19 = this.success[kiter18];
        output.writeString(kiter18);
        output.writeI64(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getRegexCounters_args = function(args) {
  this.regex = null;
  if (args) {
    if (args.regex !== undefined) {
      this.regex = args.regex;
    }
  }
};
FacebookService_getRegexCounters_args.prototype = {};
FacebookService_getRegexCounters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.regex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getRegexCounters_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getRegexCounters_args');
  if (this.regex !== null && this.regex !== undefined) {
    output.writeFieldBegin('regex', Thrift.Type.STRING, 1);
    output.writeString(this.regex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getRegexCounters_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getRegexCounters_result.prototype = {};
FacebookService_getRegexCounters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size20 = 0;
        var _rtmp324;
        this.success = {};
        var _ktype21 = 0;
        var _vtype22 = 0;
        _rtmp324 = input.readMapBegin();
        _ktype21 = _rtmp324.ktype;
        _vtype22 = _rtmp324.vtype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var key26 = null;
          var val27 = null;
          key26 = input.readString();
          val27 = input.readI64();
          this.success[key26] = val27;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getRegexCounters_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getRegexCounters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter28 in this.success)
    {
      if (this.success.hasOwnProperty(kiter28))
      {
        var viter29 = this.success[kiter28];
        output.writeString(kiter28);
        output.writeI64(viter29);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getRegexCountersCompressed_args = function(args) {
  this.regex = null;
  if (args) {
    if (args.regex !== undefined) {
      this.regex = args.regex;
    }
  }
};
FacebookService_getRegexCountersCompressed_args.prototype = {};
FacebookService_getRegexCountersCompressed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.regex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getRegexCountersCompressed_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getRegexCountersCompressed_args');
  if (this.regex !== null && this.regex !== undefined) {
    output.writeFieldBegin('regex', Thrift.Type.STRING, 1);
    output.writeString(this.regex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getRegexCountersCompressed_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getRegexCountersCompressed_result.prototype = {};
FacebookService_getRegexCountersCompressed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getRegexCountersCompressed_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getRegexCountersCompressed_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCountersCompressed_args = function(args) {
};
FacebookService_getCountersCompressed_args.prototype = {};
FacebookService_getCountersCompressed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCountersCompressed_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCountersCompressed_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCountersCompressed_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getCountersCompressed_result.prototype = {};
FacebookService_getCountersCompressed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCountersCompressed_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCountersCompressed_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getSelectedCounters_args = function(args) {
  this.keys = null;
  if (args) {
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
  }
};
FacebookService_getSelectedCounters_args.prototype = {};
FacebookService_getSelectedCounters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.keys = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = input.readString();
          this.keys.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getSelectedCounters_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getSelectedCounters_args');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter37 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter37))
      {
        iter37 = this.keys[iter37];
        output.writeString(iter37);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getSelectedCounters_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getSelectedCounters_result.prototype = {};
FacebookService_getSelectedCounters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size38 = 0;
        var _rtmp342;
        this.success = {};
        var _ktype39 = 0;
        var _vtype40 = 0;
        _rtmp342 = input.readMapBegin();
        _ktype39 = _rtmp342.ktype;
        _vtype40 = _rtmp342.vtype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var key44 = null;
          var val45 = null;
          key44 = input.readString();
          val45 = input.readI64();
          this.success[key44] = val45;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getSelectedCounters_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getSelectedCounters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.success));
    for (var kiter46 in this.success)
    {
      if (this.success.hasOwnProperty(kiter46))
      {
        var viter47 = this.success[kiter46];
        output.writeString(kiter46);
        output.writeI64(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCounter_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
FacebookService_getCounter_args.prototype = {};
FacebookService_getCounter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCounter_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCounter_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCounter_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getCounter_result.prototype = {};
FacebookService_getCounter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCounter_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCounter_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getExportedValues_args = function(args) {
};
FacebookService_getExportedValues_args.prototype = {};
FacebookService_getExportedValues_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getExportedValues_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getExportedValues_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getExportedValues_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getExportedValues_result.prototype = {};
FacebookService_getExportedValues_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size48 = 0;
        var _rtmp352;
        this.success = {};
        var _ktype49 = 0;
        var _vtype50 = 0;
        _rtmp352 = input.readMapBegin();
        _ktype49 = _rtmp352.ktype;
        _vtype50 = _rtmp352.vtype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var key54 = null;
          var val55 = null;
          key54 = input.readString();
          val55 = input.readString();
          this.success[key54] = val55;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getExportedValues_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getExportedValues_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter56 in this.success)
    {
      if (this.success.hasOwnProperty(kiter56))
      {
        var viter57 = this.success[kiter56];
        output.writeString(kiter56);
        output.writeString(viter57);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getSelectedExportedValues_args = function(args) {
  this.keys = null;
  if (args) {
    if (args.keys !== undefined) {
      this.keys = args.keys;
    }
  }
};
FacebookService_getSelectedExportedValues_args.prototype = {};
FacebookService_getSelectedExportedValues_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.keys = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readString();
          this.keys.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getSelectedExportedValues_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getSelectedExportedValues_args');
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter65 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter65))
      {
        iter65 = this.keys[iter65];
        output.writeString(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getSelectedExportedValues_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getSelectedExportedValues_result.prototype = {};
FacebookService_getSelectedExportedValues_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size66 = 0;
        var _rtmp370;
        this.success = {};
        var _ktype67 = 0;
        var _vtype68 = 0;
        _rtmp370 = input.readMapBegin();
        _ktype67 = _rtmp370.ktype;
        _vtype68 = _rtmp370.vtype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var key72 = null;
          var val73 = null;
          key72 = input.readString();
          val73 = input.readString();
          this.success[key72] = val73;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getSelectedExportedValues_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getSelectedExportedValues_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter74 in this.success)
    {
      if (this.success.hasOwnProperty(kiter74))
      {
        var viter75 = this.success[kiter74];
        output.writeString(kiter74);
        output.writeString(viter75);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getRegexExportedValues_args = function(args) {
  this.regex = null;
  if (args) {
    if (args.regex !== undefined) {
      this.regex = args.regex;
    }
  }
};
FacebookService_getRegexExportedValues_args.prototype = {};
FacebookService_getRegexExportedValues_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.regex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getRegexExportedValues_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getRegexExportedValues_args');
  if (this.regex !== null && this.regex !== undefined) {
    output.writeFieldBegin('regex', Thrift.Type.STRING, 1);
    output.writeString(this.regex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getRegexExportedValues_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getRegexExportedValues_result.prototype = {};
FacebookService_getRegexExportedValues_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size76 = 0;
        var _rtmp380;
        this.success = {};
        var _ktype77 = 0;
        var _vtype78 = 0;
        _rtmp380 = input.readMapBegin();
        _ktype77 = _rtmp380.ktype;
        _vtype78 = _rtmp380.vtype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var key82 = null;
          var val83 = null;
          key82 = input.readString();
          val83 = input.readString();
          this.success[key82] = val83;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getRegexExportedValues_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getRegexExportedValues_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter84 in this.success)
    {
      if (this.success.hasOwnProperty(kiter84))
      {
        var viter85 = this.success[kiter84];
        output.writeString(kiter84);
        output.writeString(viter85);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getExportedValue_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
FacebookService_getExportedValue_args.prototype = {};
FacebookService_getExportedValue_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getExportedValue_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getExportedValue_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getExportedValue_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getExportedValue_result.prototype = {};
FacebookService_getExportedValue_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getExportedValue_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getExportedValue_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_setOption_args = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
FacebookService_setOption_args.prototype = {};
FacebookService_setOption_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_setOption_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_setOption_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_setOption_result = function(args) {
};
FacebookService_setOption_result.prototype = {};
FacebookService_setOption_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_setOption_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_setOption_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getOption_args = function(args) {
  this.key = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
FacebookService_getOption_args.prototype = {};
FacebookService_getOption_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getOption_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getOption_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getOption_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getOption_result.prototype = {};
FacebookService_getOption_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getOption_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getOption_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getOptions_args = function(args) {
};
FacebookService_getOptions_args.prototype = {};
FacebookService_getOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getOptions_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getOptions_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getOptions_result.prototype = {};
FacebookService_getOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size86 = 0;
        var _rtmp390;
        this.success = {};
        var _ktype87 = 0;
        var _vtype88 = 0;
        _rtmp390 = input.readMapBegin();
        _ktype87 = _rtmp390.ktype;
        _vtype88 = _rtmp390.vtype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var key92 = null;
          var val93 = null;
          key92 = input.readString();
          val93 = input.readString();
          this.success[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getOptions_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter94 in this.success)
    {
      if (this.success.hasOwnProperty(kiter94))
      {
        var viter95 = this.success[kiter94];
        output.writeString(kiter94);
        output.writeString(viter95);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCpuProfile_args = function(args) {
  this.profileDurationInSec = null;
  if (args) {
    if (args.profileDurationInSec !== undefined) {
      this.profileDurationInSec = args.profileDurationInSec;
    }
  }
};
FacebookService_getCpuProfile_args.prototype = {};
FacebookService_getCpuProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.profileDurationInSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCpuProfile_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCpuProfile_args');
  if (this.profileDurationInSec !== null && this.profileDurationInSec !== undefined) {
    output.writeFieldBegin('profileDurationInSec', Thrift.Type.I32, 1);
    output.writeI32(this.profileDurationInSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCpuProfile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getCpuProfile_result.prototype = {};
FacebookService_getCpuProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCpuProfile_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCpuProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCpuProfileWithOptions_args = function(args) {
  this.options = null;
  if (args) {
    if (args.options !== undefined) {
      this.options = args.options;
    }
  }
};
FacebookService_getCpuProfileWithOptions_args.prototype = {};
FacebookService_getCpuProfileWithOptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.CpuProfileOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCpuProfileWithOptions_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCpuProfileWithOptions_args');
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 1);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCpuProfileWithOptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getCpuProfileWithOptions_result.prototype = {};
FacebookService_getCpuProfileWithOptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCpuProfileWithOptions_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCpuProfileWithOptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getHeapProfile_args = function(args) {
  this.profileDurationInSec = null;
  if (args) {
    if (args.profileDurationInSec !== undefined) {
      this.profileDurationInSec = args.profileDurationInSec;
    }
  }
};
FacebookService_getHeapProfile_args.prototype = {};
FacebookService_getHeapProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.profileDurationInSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getHeapProfile_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getHeapProfile_args');
  if (this.profileDurationInSec !== null && this.profileDurationInSec !== undefined) {
    output.writeFieldBegin('profileDurationInSec', Thrift.Type.I32, 1);
    output.writeI32(this.profileDurationInSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getHeapProfile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getHeapProfile_result.prototype = {};
FacebookService_getHeapProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getHeapProfile_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getHeapProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getContentionProfile_args = function(args) {
  this.profileDurationInSec = null;
  if (args) {
    if (args.profileDurationInSec !== undefined) {
      this.profileDurationInSec = args.profileDurationInSec;
    }
  }
};
FacebookService_getContentionProfile_args.prototype = {};
FacebookService_getContentionProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.profileDurationInSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getContentionProfile_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getContentionProfile_args');
  if (this.profileDurationInSec !== null && this.profileDurationInSec !== undefined) {
    output.writeFieldBegin('profileDurationInSec', Thrift.Type.I32, 1);
    output.writeI32(this.profileDurationInSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getContentionProfile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getContentionProfile_result.prototype = {};
FacebookService_getContentionProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getContentionProfile_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getContentionProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getWallTimeProfile_args = function(args) {
  this.profileDurationInSec = null;
  if (args) {
    if (args.profileDurationInSec !== undefined) {
      this.profileDurationInSec = args.profileDurationInSec;
    }
  }
};
FacebookService_getWallTimeProfile_args.prototype = {};
FacebookService_getWallTimeProfile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.profileDurationInSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getWallTimeProfile_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getWallTimeProfile_args');
  if (this.profileDurationInSec !== null && this.profileDurationInSec !== undefined) {
    output.writeFieldBegin('profileDurationInSec', Thrift.Type.I32, 1);
    output.writeI32(this.profileDurationInSec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getWallTimeProfile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getWallTimeProfile_result.prototype = {};
FacebookService_getWallTimeProfile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getWallTimeProfile_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getWallTimeProfile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getMemoryUsage_args = function(args) {
};
FacebookService_getMemoryUsage_args.prototype = {};
FacebookService_getMemoryUsage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getMemoryUsage_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getMemoryUsage_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getMemoryUsage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getMemoryUsage_result.prototype = {};
FacebookService_getMemoryUsage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getMemoryUsage_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getMemoryUsage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getLoad_args = function(args) {
};
FacebookService_getLoad_args.prototype = {};
FacebookService_getLoad_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getLoad_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getLoad_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getLoad_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getLoad_result.prototype = {};
FacebookService_getLoad_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getLoad_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getLoad_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getPid_args = function(args) {
};
FacebookService_getPid_args.prototype = {};
FacebookService_getPid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getPid_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getPid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getPid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getPid_result.prototype = {};
FacebookService_getPid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getPid_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getPid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCommandLine_args = function(args) {
};
FacebookService_getCommandLine_args.prototype = {};
FacebookService_getCommandLine_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCommandLine_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCommandLine_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getCommandLine_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getCommandLine_result.prototype = {};
FacebookService_getCommandLine_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getCommandLine_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getCommandLine_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_aliveSince_args = function(args) {
};
FacebookService_aliveSince_args.prototype = {};
FacebookService_aliveSince_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_aliveSince_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_aliveSince_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_aliveSince_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_aliveSince_result.prototype = {};
FacebookService_aliveSince_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_aliveSince_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_aliveSince_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_reinitialize_args = function(args) {
};
FacebookService_reinitialize_args.prototype = {};
FacebookService_reinitialize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_reinitialize_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_reinitialize_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_reinitialize_result = function(args) {
};
FacebookService_reinitialize_result.prototype = {};
FacebookService_reinitialize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_reinitialize_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_reinitialize_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_shutdown_args = function(args) {
};
FacebookService_shutdown_args.prototype = {};
FacebookService_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_shutdown_result = function(args) {
};
FacebookService_shutdown_result.prototype = {};
FacebookService_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_shutdown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_translateFrames_args = function(args) {
  this.pointers = null;
  if (args) {
    if (args.pointers !== undefined) {
      this.pointers = args.pointers;
    }
  }
};
FacebookService_translateFrames_args.prototype = {};
FacebookService_translateFrames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.pointers = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readI64();
          this.pointers.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_translateFrames_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_translateFrames_args');
  if (this.pointers !== null && this.pointers !== undefined) {
    output.writeFieldBegin('pointers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.pointers.length);
    for (var iter103 in this.pointers)
    {
      if (this.pointers.hasOwnProperty(iter103))
      {
        iter103 = this.pointers[iter103];
        output.writeI64(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_translateFrames_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_translateFrames_result.prototype = {};
FacebookService_translateFrames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString();
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_translateFrames_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_translateFrames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getPcapLoggingConfig_args = function(args) {
};
FacebookService_getPcapLoggingConfig_args.prototype = {};
FacebookService_getPcapLoggingConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getPcapLoggingConfig_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getPcapLoggingConfig_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_getPcapLoggingConfig_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FacebookService_getPcapLoggingConfig_result.prototype = {};
FacebookService_getPcapLoggingConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PcapLoggingConfig();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_getPcapLoggingConfig_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_getPcapLoggingConfig_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_setPcapLoggingConfig_args = function(args) {
  this.config = null;
  if (args) {
    if (args.config !== undefined) {
      this.config = args.config;
    }
  }
};
FacebookService_setPcapLoggingConfig_args.prototype = {};
FacebookService_setPcapLoggingConfig_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.config = new ttypes.PcapLoggingConfig();
        this.config.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_setPcapLoggingConfig_args.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_setPcapLoggingConfig_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRUCT, 1);
    this.config.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookService_setPcapLoggingConfig_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.PcapLoggingConfigException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
FacebookService_setPcapLoggingConfig_result.prototype = {};
FacebookService_setPcapLoggingConfig_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.PcapLoggingConfigException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FacebookService_setPcapLoggingConfig_result.prototype.write = function(output) {
  output.writeStructBegin('FacebookService_setPcapLoggingConfig_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FacebookServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
FacebookServiceClient.prototype = {};
FacebookServiceClient.prototype.getName = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getName();
};

FacebookServiceClient.prototype.send_getName = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getName', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getName_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getName failed: unknown result');
};
FacebookServiceClient.prototype.getVersion = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getVersion();
};

FacebookServiceClient.prototype.send_getVersion = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVersion', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getVersion_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVersion failed: unknown result');
};
FacebookServiceClient.prototype.getStatus = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStatus();
};

FacebookServiceClient.prototype.send_getStatus = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getStatus_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStatus failed: unknown result');
};
FacebookServiceClient.prototype.getStatusDetails = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStatusDetails();
};

FacebookServiceClient.prototype.send_getStatusDetails = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStatusDetails', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getStatusDetails_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getStatusDetails = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getStatusDetails_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStatusDetails failed: unknown result');
};
FacebookServiceClient.prototype.getCounters = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCounters();
};

FacebookServiceClient.prototype.send_getCounters = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCounters', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getCounters_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getCounters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getCounters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCounters failed: unknown result');
};
FacebookServiceClient.prototype.getRegexCounters = function(regex, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRegexCounters(regex);
};

FacebookServiceClient.prototype.send_getRegexCounters = function(regex) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegexCounters', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getRegexCounters_args();
  args.regex = regex;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getRegexCounters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getRegexCounters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegexCounters failed: unknown result');
};
FacebookServiceClient.prototype.getRegexCountersCompressed = function(regex, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRegexCountersCompressed(regex);
};

FacebookServiceClient.prototype.send_getRegexCountersCompressed = function(regex) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegexCountersCompressed', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getRegexCountersCompressed_args();
  args.regex = regex;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getRegexCountersCompressed = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getRegexCountersCompressed_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegexCountersCompressed failed: unknown result');
};
FacebookServiceClient.prototype.getCountersCompressed = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCountersCompressed();
};

FacebookServiceClient.prototype.send_getCountersCompressed = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCountersCompressed', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getCountersCompressed_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getCountersCompressed = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getCountersCompressed_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCountersCompressed failed: unknown result');
};
FacebookServiceClient.prototype.getSelectedCounters = function(keys, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSelectedCounters(keys);
};

FacebookServiceClient.prototype.send_getSelectedCounters = function(keys) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSelectedCounters', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getSelectedCounters_args();
  args.keys = keys;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getSelectedCounters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getSelectedCounters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSelectedCounters failed: unknown result');
};
FacebookServiceClient.prototype.getCounter = function(key, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCounter(key);
};

FacebookServiceClient.prototype.send_getCounter = function(key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCounter', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getCounter_args();
  args.key = key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getCounter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getCounter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCounter failed: unknown result');
};
FacebookServiceClient.prototype.getExportedValues = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getExportedValues();
};

FacebookServiceClient.prototype.send_getExportedValues = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getExportedValues', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getExportedValues_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getExportedValues = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getExportedValues_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getExportedValues failed: unknown result');
};
FacebookServiceClient.prototype.getSelectedExportedValues = function(keys, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getSelectedExportedValues(keys);
};

FacebookServiceClient.prototype.send_getSelectedExportedValues = function(keys) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSelectedExportedValues', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getSelectedExportedValues_args();
  args.keys = keys;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getSelectedExportedValues = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getSelectedExportedValues_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSelectedExportedValues failed: unknown result');
};
FacebookServiceClient.prototype.getRegexExportedValues = function(regex, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRegexExportedValues(regex);
};

FacebookServiceClient.prototype.send_getRegexExportedValues = function(regex) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegexExportedValues', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getRegexExportedValues_args();
  args.regex = regex;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getRegexExportedValues = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getRegexExportedValues_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegexExportedValues failed: unknown result');
};
FacebookServiceClient.prototype.getExportedValue = function(key, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getExportedValue(key);
};

FacebookServiceClient.prototype.send_getExportedValue = function(key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getExportedValue', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getExportedValue_args();
  args.key = key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getExportedValue = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getExportedValue_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getExportedValue failed: unknown result');
};
FacebookServiceClient.prototype.setOption = function(key, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setOption(key, value);
};

FacebookServiceClient.prototype.send_setOption = function(key, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setOption', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_setOption_args();
  args.key = key;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_setOption = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_setOption_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
FacebookServiceClient.prototype.getOption = function(key, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getOption(key);
};

FacebookServiceClient.prototype.send_getOption = function(key) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getOption', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getOption_args();
  args.key = key;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getOption = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getOption_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOption failed: unknown result');
};
FacebookServiceClient.prototype.getOptions = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getOptions();
};

FacebookServiceClient.prototype.send_getOptions = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getOptions_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOptions failed: unknown result');
};
FacebookServiceClient.prototype.getCpuProfile = function(profileDurationInSec, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCpuProfile(profileDurationInSec);
};

FacebookServiceClient.prototype.send_getCpuProfile = function(profileDurationInSec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCpuProfile', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getCpuProfile_args();
  args.profileDurationInSec = profileDurationInSec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getCpuProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getCpuProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCpuProfile failed: unknown result');
};
FacebookServiceClient.prototype.getCpuProfileWithOptions = function(options, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCpuProfileWithOptions(options);
};

FacebookServiceClient.prototype.send_getCpuProfileWithOptions = function(options) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCpuProfileWithOptions', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getCpuProfileWithOptions_args();
  args.options = options;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getCpuProfileWithOptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getCpuProfileWithOptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCpuProfileWithOptions failed: unknown result');
};
FacebookServiceClient.prototype.getHeapProfile = function(profileDurationInSec, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getHeapProfile(profileDurationInSec);
};

FacebookServiceClient.prototype.send_getHeapProfile = function(profileDurationInSec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getHeapProfile', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getHeapProfile_args();
  args.profileDurationInSec = profileDurationInSec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getHeapProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getHeapProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getHeapProfile failed: unknown result');
};
FacebookServiceClient.prototype.getContentionProfile = function(profileDurationInSec, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getContentionProfile(profileDurationInSec);
};

FacebookServiceClient.prototype.send_getContentionProfile = function(profileDurationInSec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContentionProfile', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getContentionProfile_args();
  args.profileDurationInSec = profileDurationInSec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getContentionProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getContentionProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContentionProfile failed: unknown result');
};
FacebookServiceClient.prototype.getWallTimeProfile = function(profileDurationInSec, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getWallTimeProfile(profileDurationInSec);
};

FacebookServiceClient.prototype.send_getWallTimeProfile = function(profileDurationInSec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getWallTimeProfile', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getWallTimeProfile_args();
  args.profileDurationInSec = profileDurationInSec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getWallTimeProfile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getWallTimeProfile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getWallTimeProfile failed: unknown result');
};
FacebookServiceClient.prototype.getMemoryUsage = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getMemoryUsage();
};

FacebookServiceClient.prototype.send_getMemoryUsage = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMemoryUsage', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getMemoryUsage_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getMemoryUsage = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getMemoryUsage_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMemoryUsage failed: unknown result');
};
FacebookServiceClient.prototype.getLoad = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getLoad();
};

FacebookServiceClient.prototype.send_getLoad = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLoad', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getLoad_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getLoad = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getLoad_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLoad failed: unknown result');
};
FacebookServiceClient.prototype.getPid = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPid();
};

FacebookServiceClient.prototype.send_getPid = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPid', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getPid_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getPid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getPid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPid failed: unknown result');
};
FacebookServiceClient.prototype.getCommandLine = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getCommandLine();
};

FacebookServiceClient.prototype.send_getCommandLine = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCommandLine', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getCommandLine_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getCommandLine = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getCommandLine_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCommandLine failed: unknown result');
};
FacebookServiceClient.prototype.aliveSince = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_aliveSince();
};

FacebookServiceClient.prototype.send_aliveSince = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('aliveSince', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_aliveSince_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_aliveSince = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_aliveSince_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('aliveSince failed: unknown result');
};
FacebookServiceClient.prototype.reinitialize = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_reinitialize();
};

FacebookServiceClient.prototype.send_reinitialize = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reinitialize', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_reinitialize_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
FacebookServiceClient.prototype.shutdown = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_shutdown();
};

FacebookServiceClient.prototype.send_shutdown = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_shutdown_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
FacebookServiceClient.prototype.translateFrames = function(pointers, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_translateFrames(pointers);
};

FacebookServiceClient.prototype.send_translateFrames = function(pointers) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('translateFrames', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_translateFrames_args();
  args.pointers = pointers;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_translateFrames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_translateFrames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('translateFrames failed: unknown result');
};
FacebookServiceClient.prototype.getPcapLoggingConfig = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPcapLoggingConfig();
};

FacebookServiceClient.prototype.send_getPcapLoggingConfig = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPcapLoggingConfig', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_getPcapLoggingConfig_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_getPcapLoggingConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_getPcapLoggingConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPcapLoggingConfig failed: unknown result');
};
FacebookServiceClient.prototype.setPcapLoggingConfig = function(config, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setPcapLoggingConfig(config);
};

FacebookServiceClient.prototype.send_setPcapLoggingConfig = function(config) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPcapLoggingConfig', Thrift.MessageType.CALL, this.seqid);
  var args = new FacebookService_setPcapLoggingConfig_args();
  args.config = config;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FacebookServiceClient.prototype.recv_setPcapLoggingConfig = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FacebookService_setPcapLoggingConfig_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
FacebookServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FacebookServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FacebookServiceProcessor.prototype.process_getName = function(seqid, input, output) {
  var args = new FacebookService_getName_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getName(function (err, result) {
    var result = new FacebookService_getName_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getName", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getVersion = function(seqid, input, output) {
  var args = new FacebookService_getVersion_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getVersion(function (err, result) {
    var result = new FacebookService_getVersion_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getVersion", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getStatus = function(seqid, input, output) {
  var args = new FacebookService_getStatus_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getStatus(function (err, result) {
    var result = new FacebookService_getStatus_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getStatusDetails = function(seqid, input, output) {
  var args = new FacebookService_getStatusDetails_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getStatusDetails(function (err, result) {
    var result = new FacebookService_getStatusDetails_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getStatusDetails", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getCounters = function(seqid, input, output) {
  var args = new FacebookService_getCounters_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCounters(function (err, result) {
    var result = new FacebookService_getCounters_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCounters", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getRegexCounters = function(seqid, input, output) {
  var args = new FacebookService_getRegexCounters_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRegexCounters(args.regex, function (err, result) {
    var result = new FacebookService_getRegexCounters_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRegexCounters", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getRegexCountersCompressed = function(seqid, input, output) {
  var args = new FacebookService_getRegexCountersCompressed_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRegexCountersCompressed(args.regex, function (err, result) {
    var result = new FacebookService_getRegexCountersCompressed_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRegexCountersCompressed", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getCountersCompressed = function(seqid, input, output) {
  var args = new FacebookService_getCountersCompressed_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCountersCompressed(function (err, result) {
    var result = new FacebookService_getCountersCompressed_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCountersCompressed", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getSelectedCounters = function(seqid, input, output) {
  var args = new FacebookService_getSelectedCounters_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getSelectedCounters(args.keys, function (err, result) {
    var result = new FacebookService_getSelectedCounters_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getSelectedCounters", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getCounter = function(seqid, input, output) {
  var args = new FacebookService_getCounter_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCounter(args.key, function (err, result) {
    var result = new FacebookService_getCounter_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCounter", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getExportedValues = function(seqid, input, output) {
  var args = new FacebookService_getExportedValues_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getExportedValues(function (err, result) {
    var result = new FacebookService_getExportedValues_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getExportedValues", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getSelectedExportedValues = function(seqid, input, output) {
  var args = new FacebookService_getSelectedExportedValues_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getSelectedExportedValues(args.keys, function (err, result) {
    var result = new FacebookService_getSelectedExportedValues_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getSelectedExportedValues", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getRegexExportedValues = function(seqid, input, output) {
  var args = new FacebookService_getRegexExportedValues_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRegexExportedValues(args.regex, function (err, result) {
    var result = new FacebookService_getRegexExportedValues_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRegexExportedValues", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getExportedValue = function(seqid, input, output) {
  var args = new FacebookService_getExportedValue_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getExportedValue(args.key, function (err, result) {
    var result = new FacebookService_getExportedValue_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getExportedValue", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_setOption = function(seqid, input, output) {
  var args = new FacebookService_setOption_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setOption(args.key, args.value, function (err, result) {
    var result = new FacebookService_setOption_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setOption", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getOption = function(seqid, input, output) {
  var args = new FacebookService_getOption_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getOption(args.key, function (err, result) {
    var result = new FacebookService_getOption_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getOption", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getOptions = function(seqid, input, output) {
  var args = new FacebookService_getOptions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getOptions(function (err, result) {
    var result = new FacebookService_getOptions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getOptions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getCpuProfile = function(seqid, input, output) {
  var args = new FacebookService_getCpuProfile_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCpuProfile(args.profileDurationInSec, function (err, result) {
    var result = new FacebookService_getCpuProfile_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCpuProfile", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getCpuProfileWithOptions = function(seqid, input, output) {
  var args = new FacebookService_getCpuProfileWithOptions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCpuProfileWithOptions(args.options, function (err, result) {
    var result = new FacebookService_getCpuProfileWithOptions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCpuProfileWithOptions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getHeapProfile = function(seqid, input, output) {
  var args = new FacebookService_getHeapProfile_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getHeapProfile(args.profileDurationInSec, function (err, result) {
    var result = new FacebookService_getHeapProfile_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getHeapProfile", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getContentionProfile = function(seqid, input, output) {
  var args = new FacebookService_getContentionProfile_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getContentionProfile(args.profileDurationInSec, function (err, result) {
    var result = new FacebookService_getContentionProfile_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getContentionProfile", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getWallTimeProfile = function(seqid, input, output) {
  var args = new FacebookService_getWallTimeProfile_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getWallTimeProfile(args.profileDurationInSec, function (err, result) {
    var result = new FacebookService_getWallTimeProfile_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getWallTimeProfile", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getMemoryUsage = function(seqid, input, output) {
  var args = new FacebookService_getMemoryUsage_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getMemoryUsage(function (err, result) {
    var result = new FacebookService_getMemoryUsage_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getMemoryUsage", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getLoad = function(seqid, input, output) {
  var args = new FacebookService_getLoad_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getLoad(function (err, result) {
    var result = new FacebookService_getLoad_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getLoad", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getPid = function(seqid, input, output) {
  var args = new FacebookService_getPid_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getPid(function (err, result) {
    var result = new FacebookService_getPid_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getPid", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getCommandLine = function(seqid, input, output) {
  var args = new FacebookService_getCommandLine_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getCommandLine(function (err, result) {
    var result = new FacebookService_getCommandLine_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getCommandLine", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_aliveSince = function(seqid, input, output) {
  var args = new FacebookService_aliveSince_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.aliveSince(function (err, result) {
    var result = new FacebookService_aliveSince_result((err != null ? err : {success: result}));
    output.writeMessageBegin("aliveSince", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_reinitialize = function(seqid, input, output) {
  var args = new FacebookService_reinitialize_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.reinitialize()
}

FacebookServiceProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new FacebookService_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.shutdown()
}

FacebookServiceProcessor.prototype.process_translateFrames = function(seqid, input, output) {
  var args = new FacebookService_translateFrames_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.translateFrames(args.pointers, function (err, result) {
    var result = new FacebookService_translateFrames_result((err != null ? err : {success: result}));
    output.writeMessageBegin("translateFrames", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_getPcapLoggingConfig = function(seqid, input, output) {
  var args = new FacebookService_getPcapLoggingConfig_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getPcapLoggingConfig(function (err, result) {
    var result = new FacebookService_getPcapLoggingConfig_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getPcapLoggingConfig", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FacebookServiceProcessor.prototype.process_setPcapLoggingConfig = function(seqid, input, output) {
  var args = new FacebookService_setPcapLoggingConfig_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setPcapLoggingConfig(args.config, function (err, result) {
    var result = new FacebookService_setPcapLoggingConfig_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setPcapLoggingConfig", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

