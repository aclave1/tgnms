//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var fb303_ttypes = require('./fb303_types')
var NetworkConfig_ttypes = require('./NetworkConfig_types')
var Topology_ttypes = require('./Topology_types')


var FacebookService = require('./FacebookService')
var FacebookServiceClient = FacebookService.Client
var FacebookServiceProcessor = FacebookService.Processor
var ttypes = require('./ControllerProxy_types');
//HELPER FUNCTIONS AND STRUCTURES

ControllerProxyService_getControllerStatus_args = function(args) {
};
ControllerProxyService_getControllerStatus_args.prototype = {};
ControllerProxyService_getControllerStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControllerProxyService_getControllerStatus_args.prototype.write = function(output) {
  output.writeStructBegin('ControllerProxyService_getControllerStatus_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControllerProxyService_getControllerStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ControllerProxyService_getControllerStatus_result.prototype = {};
ControllerProxyService_getControllerStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ControllerStatus();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControllerProxyService_getControllerStatus_result.prototype.write = function(output) {
  output.writeStructBegin('ControllerProxyService_getControllerStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControllerProxyService_getNetworkState_args = function(args) {
  this.network_name = null;
  if (args) {
    if (args.network_name !== undefined) {
      this.network_name = args.network_name;
    }
  }
};
ControllerProxyService_getNetworkState_args.prototype = {};
ControllerProxyService_getNetworkState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.network_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControllerProxyService_getNetworkState_args.prototype.write = function(output) {
  output.writeStructBegin('ControllerProxyService_getNetworkState_args');
  if (this.network_name !== null && this.network_name !== undefined) {
    output.writeFieldBegin('network_name', Thrift.Type.STRING, 1);
    output.writeString(this.network_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControllerProxyService_getNetworkState_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ControllerProxyService_getNetworkState_result.prototype = {};
ControllerProxyService_getNetworkState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new NetworkConfig_ttypes.NetworkConfig();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ControllerProxyService_getNetworkState_result.prototype.write = function(output) {
  output.writeStructBegin('ControllerProxyService_getNetworkState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ControllerProxyServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(ControllerProxyServiceClient, FacebookServiceClient)
ControllerProxyServiceClient.prototype.getControllerStatus = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getControllerStatus();
};

ControllerProxyServiceClient.prototype.send_getControllerStatus = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getControllerStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new ControllerProxyService_getControllerStatus_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControllerProxyServiceClient.prototype.recv_getControllerStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControllerProxyService_getControllerStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getControllerStatus failed: unknown result');
};
ControllerProxyServiceClient.prototype.getNetworkState = function(network_name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getNetworkState(network_name);
};

ControllerProxyServiceClient.prototype.send_getNetworkState = function(network_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNetworkState', Thrift.MessageType.CALL, this.seqid);
  var args = new ControllerProxyService_getNetworkState_args();
  args.network_name = network_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ControllerProxyServiceClient.prototype.recv_getNetworkState = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ControllerProxyService_getNetworkState_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNetworkState failed: unknown result');
};
ControllerProxyServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(ControllerProxyServiceProcessor, FacebookServiceProcessor)
ControllerProxyServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ControllerProxyServiceProcessor.prototype.process_getControllerStatus = function(seqid, input, output) {
  var args = new ControllerProxyService_getControllerStatus_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getControllerStatus(function (err, result) {
    var result = new ControllerProxyService_getControllerStatus_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getControllerStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ControllerProxyServiceProcessor.prototype.process_getNetworkState = function(seqid, input, output) {
  var args = new ControllerProxyService_getNetworkState_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getNetworkState(args.network_name, function (err, result) {
    var result = new ControllerProxyService_getNetworkState_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getNetworkState", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}
