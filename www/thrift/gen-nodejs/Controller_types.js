//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};

var BWAllocation_ttypes = require('./BWAllocation_types')
var Topology_ttypes = require('./Topology_types')

ttypes.MessageType = {
'GET_STATUS_DUMP' : 101,
'STATUS_DUMP' : 121,
'SET_NODE_PARAMS' : 141,
'REBOOT_NODE' : 142,
'STATUS_REPORT' : 161,
'GET_IGNITION_STATE' : 201,
'SET_IGNITION_PARAMS' : 202,
'SET_LINK_STATUS_REQ' : 203,
'IGNITION_STATE' : 221,
'SET_LINK_STATUS' : 241,
'LINK_STATUS' : 261,
'GET_TOPOLOGY' : 301,
'SET_NODE_STATUS' : 302,
'SET_NODE_MAC' : 303,
'SET_NODE_PARAMS_REQ' : 304,
'BUMP_LINKUP_ATTEMPTS' : 305,
'ADD_NODE' : 306,
'ADD_LINK' : 307,
'DEL_NODE' : 308,
'DEL_LINK' : 309,
'ADD_SITE' : 310,
'DEL_SITE' : 311,
'SET_NETWORK_PARAMS_REQ' : 312,
'RESET_TOPOLOGY_STATE' : 313,
'TOPOLOGY' : 321,
'UPGRADE_REQ' : 401,
'SET_UPGRADE_STATUS' : 421,
'SCAN_REQ' : 601,
'SCAN_RESP' : 621,
'START_SCAN' : 641,
'GET_SCAN_STATUS' : 642,
'RESET_SCAN_STATUS' : 643,
'SCAN_STATUS' : 661,
'DR_ACK' : 491,
'GPS_GET_POS_RESP' : 492,
'GPS_GET_POS_REQ' : 495,
'NODE_INIT' : 501,
'DR_SET_LINK_STATUS' : 502,
'FW_SET_NODE_PARAMS' : 503,
'FW_STATS_CONFIGURE_REQ' : 504,
'PHY_LA_CONFIG_REQ' : 505,
'GPS_ENABLE_REQ' : 506,
'PHY_ANT_WGT_TBL_CONFIG_REQ' : 507,
'FW_DEBUG_REQ' : 508,
'NODE_INIT_NOTIFY' : 551,
'DR_LINK_STATUS' : 552,
'FW_STATS' : 553,
'FW_ACK' : 591,
'FW_HEALTHY' : 592,
'NONE' : 1001,
'HELLO' : 1002,
'E2E_ACK' : 1003,
'TEST' : 1004,
'DR_RESP' : 1005,
'DR_STAT_PUSH' : 1006
};
ttypes.LinkActionType = {
'LINK_UP' : 1,
'LINK_DOWN' : 2,
'LINK_ADD' : 3,
'LINK_DELETE' : 4
};
ttypes.LinkStatusType = {
'LINK_UP' : 1,
'LINK_DOWN' : 2
};
ttypes.UpgradeStatusType = {
'NONE' : 10,
'DOWNLOADING_IMAGE' : 20,
'DOWNLOAD_FAILED' : 30,
'FLASHING_IMAGE' : 40,
'FLASH_FAILED' : 50,
'FLASHED' : 60,
'COMMIT_FAILED' : 70
};
ttypes.UpgradeReqType = {
'PREPARE_UPGRADE' : 10,
'COMMIT_UPGRADE' : 20,
'RESET_STATUS' : 30
};
ttypes.ScanMode = {
'COARSE' : 1,
'FINE' : 2,
'SELECTIVE' : 3
};
ImageMeta = module.exports.ImageMeta = function(args) {
  this.md5 = null;
  this.version = null;
  if (args) {
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
ImageMeta.prototype = {};
ImageMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImageMeta.prototype.write = function(output) {
  output.writeStructBegin('ImageMeta');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeStatus = module.exports.UpgradeStatus = function(args) {
  this.usType = null;
  this.nextImage = null;
  this.reason = null;
  this.upgradeReqId = null;
  this.whenToCommit = null;
  if (args) {
    if (args.usType !== undefined) {
      this.usType = args.usType;
    }
    if (args.nextImage !== undefined) {
      this.nextImage = args.nextImage;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.upgradeReqId !== undefined) {
      this.upgradeReqId = args.upgradeReqId;
    }
    if (args.whenToCommit !== undefined) {
      this.whenToCommit = args.whenToCommit;
    }
  }
};
UpgradeStatus.prototype = {};
UpgradeStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.usType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nextImage = new ttypes.ImageMeta();
        this.nextImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.upgradeReqId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.whenToCommit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeStatus.prototype.write = function(output) {
  output.writeStructBegin('UpgradeStatus');
  if (this.usType !== null && this.usType !== undefined) {
    output.writeFieldBegin('usType', Thrift.Type.I32, 1);
    output.writeI32(this.usType);
    output.writeFieldEnd();
  }
  if (this.nextImage !== null && this.nextImage !== undefined) {
    output.writeFieldBegin('nextImage', Thrift.Type.STRUCT, 2);
    this.nextImage.write(output);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.upgradeReqId !== null && this.upgradeReqId !== undefined) {
    output.writeFieldBegin('upgradeReqId', Thrift.Type.STRING, 4);
    output.writeString(this.upgradeReqId);
    output.writeFieldEnd();
  }
  if (this.whenToCommit !== null && this.whenToCommit !== undefined) {
    output.writeFieldBegin('whenToCommit', Thrift.Type.I64, 5);
    output.writeI64(this.whenToCommit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeReq = module.exports.UpgradeReq = function(args) {
  this.urType = null;
  this.upgradeReqId = null;
  this.md5 = null;
  this.imageUrl = null;
  this.scheduleToCommit = null;
  this.downloadAttempts = null;
  if (args) {
    if (args.urType !== undefined) {
      this.urType = args.urType;
    }
    if (args.upgradeReqId !== undefined) {
      this.upgradeReqId = args.upgradeReqId;
    }
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.scheduleToCommit !== undefined) {
      this.scheduleToCommit = args.scheduleToCommit;
    }
    if (args.downloadAttempts !== undefined) {
      this.downloadAttempts = args.downloadAttempts;
    }
  }
};
UpgradeReq.prototype = {};
UpgradeReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.urType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.upgradeReqId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.scheduleToCommit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.downloadAttempts = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeReq');
  if (this.urType !== null && this.urType !== undefined) {
    output.writeFieldBegin('urType', Thrift.Type.I32, 1);
    output.writeI32(this.urType);
    output.writeFieldEnd();
  }
  if (this.upgradeReqId !== null && this.upgradeReqId !== undefined) {
    output.writeFieldBegin('upgradeReqId', Thrift.Type.STRING, 2);
    output.writeString(this.upgradeReqId);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.scheduleToCommit !== null && this.scheduleToCommit !== undefined) {
    output.writeFieldBegin('scheduleToCommit', Thrift.Type.I64, 5);
    output.writeI64(this.scheduleToCommit);
    output.writeFieldEnd();
  }
  if (this.downloadAttempts !== null && this.downloadAttempts !== undefined) {
    output.writeFieldBegin('downloadAttempts', Thrift.Type.I64, 6);
    output.writeI64(this.downloadAttempts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetStatusDump = module.exports.GetStatusDump = function(args) {
};
GetStatusDump.prototype = {};
GetStatusDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetStatusDump.prototype.write = function(output) {
  output.writeStructBegin('GetStatusDump');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RebootNode = module.exports.RebootNode = function(args) {
  this.forced = null;
  if (args) {
    if (args.forced !== undefined) {
      this.forced = args.forced;
    }
  }
};
RebootNode.prototype = {};
RebootNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.forced = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RebootNode.prototype.write = function(output) {
  output.writeStructBegin('RebootNode');
  if (this.forced !== null && this.forced !== undefined) {
    output.writeFieldBegin('forced', Thrift.Type.BOOL, 1);
    output.writeBool(this.forced);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatusDump = module.exports.StatusDump = function(args) {
  this.timeStamp = null;
  this.statusReports = null;
  if (args) {
    if (args.timeStamp !== undefined) {
      this.timeStamp = args.timeStamp;
    }
    if (args.statusReports !== undefined) {
      this.statusReports = args.statusReports;
    }
  }
};
StatusDump.prototype = {};
StatusDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.statusReports = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new ttypes.StatusReport();
          val7.read(input);
          this.statusReports[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatusDump.prototype.write = function(output) {
  output.writeStructBegin('StatusDump');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.statusReports !== null && this.statusReports !== undefined) {
    output.writeFieldBegin('statusReports', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.statusReports));
    for (var kiter8 in this.statusReports)
    {
      if (this.statusReports.hasOwnProperty(kiter8))
      {
        var viter9 = this.statusReports[kiter8];
        output.writeString(kiter8);
        viter9.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeParams = module.exports.NodeParams = function(args) {
  this.bwAllocMap = null;
  this.polarity = null;
  this.golayIdx = null;
  this.location = null;
  this.airtimeAllocMap = null;
  this.enableGps = null;
  if (args) {
    if (args.bwAllocMap !== undefined) {
      this.bwAllocMap = args.bwAllocMap;
    }
    if (args.polarity !== undefined) {
      this.polarity = args.polarity;
    }
    if (args.golayIdx !== undefined) {
      this.golayIdx = args.golayIdx;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.airtimeAllocMap !== undefined) {
      this.airtimeAllocMap = args.airtimeAllocMap;
    }
    if (args.enableGps !== undefined) {
      this.enableGps = args.enableGps;
    }
  }
};
NodeParams.prototype = {};
NodeParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bwAllocMap = new BWAllocation_ttypes.NodeBwAlloc();
        this.bwAllocMap.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.polarity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.golayIdx = new Topology_ttypes.GolayIdx();
        this.golayIdx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Topology_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.airtimeAllocMap = new BWAllocation_ttypes.NodeAirtime();
        this.airtimeAllocMap.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enableGps = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeParams.prototype.write = function(output) {
  output.writeStructBegin('NodeParams');
  if (this.bwAllocMap !== null && this.bwAllocMap !== undefined) {
    output.writeFieldBegin('bwAllocMap', Thrift.Type.STRUCT, 1);
    this.bwAllocMap.write(output);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.I32, 2);
    output.writeI32(this.polarity);
    output.writeFieldEnd();
  }
  if (this.golayIdx !== null && this.golayIdx !== undefined) {
    output.writeFieldBegin('golayIdx', Thrift.Type.STRUCT, 3);
    this.golayIdx.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 4);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.airtimeAllocMap !== null && this.airtimeAllocMap !== undefined) {
    output.writeFieldBegin('airtimeAllocMap', Thrift.Type.STRUCT, 5);
    this.airtimeAllocMap.write(output);
    output.writeFieldEnd();
  }
  if (this.enableGps !== null && this.enableGps !== undefined) {
    output.writeFieldBegin('enableGps', Thrift.Type.BOOL, 6);
    output.writeBool(this.enableGps);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatusReport = module.exports.StatusReport = function(args) {
  this.timeStamp = null;
  this.ipv6Address = null;
  this.version = null;
  this.uboot_version = null;
  this.status = null;
  this.upgradeStatus = null;
  if (args) {
    if (args.timeStamp !== undefined) {
      this.timeStamp = args.timeStamp;
    }
    if (args.ipv6Address !== undefined) {
      this.ipv6Address = args.ipv6Address;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.uboot_version !== undefined) {
      this.uboot_version = args.uboot_version;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.upgradeStatus !== undefined) {
      this.upgradeStatus = args.upgradeStatus;
    }
  }
};
StatusReport.prototype = {};
StatusReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipv6Address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.uboot_version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.upgradeStatus = new ttypes.UpgradeStatus();
        this.upgradeStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatusReport.prototype.write = function(output) {
  output.writeStructBegin('StatusReport');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.ipv6Address !== null && this.ipv6Address !== undefined) {
    output.writeFieldBegin('ipv6Address', Thrift.Type.STRING, 2);
    output.writeString(this.ipv6Address);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.uboot_version !== null && this.uboot_version !== undefined) {
    output.writeFieldBegin('uboot_version', Thrift.Type.STRING, 6);
    output.writeString(this.uboot_version);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.upgradeStatus !== null && this.upgradeStatus !== undefined) {
    output.writeFieldBegin('upgradeStatus', Thrift.Type.STRUCT, 5);
    this.upgradeStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetIgnitionState = module.exports.GetIgnitionState = function(args) {
};
GetIgnitionState.prototype = {};
GetIgnitionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetIgnitionState.prototype.write = function(output) {
  output.writeStructBegin('GetIgnitionState');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionParams = module.exports.IgnitionParams = function(args) {
  this.enable = null;
  this.linkUpInterval = null;
  this.linkUpDampenInterval = null;
  if (args) {
    if (args.enable !== undefined) {
      this.enable = args.enable;
    }
    if (args.linkUpInterval !== undefined) {
      this.linkUpInterval = args.linkUpInterval;
    }
    if (args.linkUpDampenInterval !== undefined) {
      this.linkUpDampenInterval = args.linkUpDampenInterval;
    }
  }
};
IgnitionParams.prototype = {};
IgnitionParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.linkUpInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.linkUpDampenInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionParams.prototype.write = function(output) {
  output.writeStructBegin('IgnitionParams');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  if (this.linkUpInterval !== null && this.linkUpInterval !== undefined) {
    output.writeFieldBegin('linkUpInterval', Thrift.Type.I64, 2);
    output.writeI64(this.linkUpInterval);
    output.writeFieldEnd();
  }
  if (this.linkUpDampenInterval !== null && this.linkUpDampenInterval !== undefined) {
    output.writeFieldBegin('linkUpDampenInterval', Thrift.Type.I64, 3);
    output.writeI64(this.linkUpDampenInterval);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetLinkStatusReq = module.exports.SetLinkStatusReq = function(args) {
  this.action = null;
  this.initiatorNodeName = null;
  this.responderNodeName = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.initiatorNodeName !== undefined) {
      this.initiatorNodeName = args.initiatorNodeName;
    }
    if (args.responderNodeName !== undefined) {
      this.responderNodeName = args.responderNodeName;
    }
  }
};
SetLinkStatusReq.prototype = {};
SetLinkStatusReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.responderNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetLinkStatusReq.prototype.write = function(output) {
  output.writeStructBegin('SetLinkStatusReq');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.initiatorNodeName !== null && this.initiatorNodeName !== undefined) {
    output.writeFieldBegin('initiatorNodeName', Thrift.Type.STRING, 2);
    output.writeString(this.initiatorNodeName);
    output.writeFieldEnd();
  }
  if (this.responderNodeName !== null && this.responderNodeName !== undefined) {
    output.writeFieldBegin('responderNodeName', Thrift.Type.STRING, 3);
    output.writeString(this.responderNodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionCandidate = module.exports.IgnitionCandidate = function(args) {
  this.initiatorNodeName = null;
  this.linkName = null;
  if (args) {
    if (args.initiatorNodeName !== undefined) {
      this.initiatorNodeName = args.initiatorNodeName;
    }
    if (args.linkName !== undefined) {
      this.linkName = args.linkName;
    }
  }
};
IgnitionCandidate.prototype = {};
IgnitionCandidate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.linkName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionCandidate.prototype.write = function(output) {
  output.writeStructBegin('IgnitionCandidate');
  if (this.initiatorNodeName !== null && this.initiatorNodeName !== undefined) {
    output.writeFieldBegin('initiatorNodeName', Thrift.Type.STRING, 1);
    output.writeString(this.initiatorNodeName);
    output.writeFieldEnd();
  }
  if (this.linkName !== null && this.linkName !== undefined) {
    output.writeFieldBegin('linkName', Thrift.Type.STRING, 2);
    output.writeString(this.linkName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionState = module.exports.IgnitionState = function(args) {
  this.visitedNodeNames = null;
  this.igCandidates = null;
  this.lastIgCandidate = null;
  this.igParams = null;
  if (args) {
    if (args.visitedNodeNames !== undefined) {
      this.visitedNodeNames = args.visitedNodeNames;
    }
    if (args.igCandidates !== undefined) {
      this.igCandidates = args.igCandidates;
    }
    if (args.lastIgCandidate !== undefined) {
      this.lastIgCandidate = args.lastIgCandidate;
    }
    if (args.igParams !== undefined) {
      this.igParams = args.igParams;
    }
  }
};
IgnitionState.prototype = {};
IgnitionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.visitedNodeNames = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = input.readString();
          this.visitedNodeNames.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size17 = 0;
        var _rtmp321;
        this.igCandidates = [];
        var _etype20 = 0;
        _rtmp321 = input.readListBegin();
        _etype20 = _rtmp321.etype;
        _size17 = _rtmp321.size;
        for (var _i22 = 0; _i22 < _size17; ++_i22)
        {
          var elem23 = null;
          elem23 = new ttypes.IgnitionCandidate();
          elem23.read(input);
          this.igCandidates.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastIgCandidate = new ttypes.IgnitionCandidate();
        this.lastIgCandidate.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.igParams = new ttypes.IgnitionParams();
        this.igParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionState.prototype.write = function(output) {
  output.writeStructBegin('IgnitionState');
  if (this.visitedNodeNames !== null && this.visitedNodeNames !== undefined) {
    output.writeFieldBegin('visitedNodeNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.visitedNodeNames.length);
    for (var iter24 in this.visitedNodeNames)
    {
      if (this.visitedNodeNames.hasOwnProperty(iter24))
      {
        iter24 = this.visitedNodeNames[iter24];
        output.writeString(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.igCandidates !== null && this.igCandidates !== undefined) {
    output.writeFieldBegin('igCandidates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.igCandidates.length);
    for (var iter25 in this.igCandidates)
    {
      if (this.igCandidates.hasOwnProperty(iter25))
      {
        iter25 = this.igCandidates[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lastIgCandidate !== null && this.lastIgCandidate !== undefined) {
    output.writeFieldBegin('lastIgCandidate', Thrift.Type.STRUCT, 3);
    this.lastIgCandidate.write(output);
    output.writeFieldEnd();
  }
  if (this.igParams !== null && this.igParams !== undefined) {
    output.writeFieldBegin('igParams', Thrift.Type.STRUCT, 4);
    this.igParams.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetLinkStatus = module.exports.SetLinkStatus = function(args) {
  this.linkStatusType = null;
  this.responderMac = null;
  this.responderNodeType = null;
  this.golayIdx = null;
  if (args) {
    if (args.linkStatusType !== undefined) {
      this.linkStatusType = args.linkStatusType;
    }
    if (args.responderMac !== undefined) {
      this.responderMac = args.responderMac;
    }
    if (args.responderNodeType !== undefined) {
      this.responderNodeType = args.responderNodeType;
    }
    if (args.golayIdx !== undefined) {
      this.golayIdx = args.golayIdx;
    }
  }
};
SetLinkStatus.prototype = {};
SetLinkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.linkStatusType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.responderMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.responderNodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.golayIdx = new Topology_ttypes.GolayIdx();
        this.golayIdx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetLinkStatus.prototype.write = function(output) {
  output.writeStructBegin('SetLinkStatus');
  if (this.linkStatusType !== null && this.linkStatusType !== undefined) {
    output.writeFieldBegin('linkStatusType', Thrift.Type.I32, 1);
    output.writeI32(this.linkStatusType);
    output.writeFieldEnd();
  }
  if (this.responderMac !== null && this.responderMac !== undefined) {
    output.writeFieldBegin('responderMac', Thrift.Type.STRING, 2);
    output.writeString(this.responderMac);
    output.writeFieldEnd();
  }
  if (this.responderNodeType !== null && this.responderNodeType !== undefined) {
    output.writeFieldBegin('responderNodeType', Thrift.Type.I32, 3);
    output.writeI32(this.responderNodeType);
    output.writeFieldEnd();
  }
  if (this.golayIdx !== null && this.golayIdx !== undefined) {
    output.writeFieldBegin('golayIdx', Thrift.Type.STRUCT, 4);
    this.golayIdx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinkStatus = module.exports.LinkStatus = function(args) {
  this.responderMac = null;
  this.linkStatusType = null;
  if (args) {
    if (args.responderMac !== undefined) {
      this.responderMac = args.responderMac;
    }
    if (args.linkStatusType !== undefined) {
      this.linkStatusType = args.linkStatusType;
    }
  }
};
LinkStatus.prototype = {};
LinkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.responderMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.linkStatusType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkStatus.prototype.write = function(output) {
  output.writeStructBegin('LinkStatus');
  if (this.responderMac !== null && this.responderMac !== undefined) {
    output.writeFieldBegin('responderMac', Thrift.Type.STRING, 1);
    output.writeString(this.responderMac);
    output.writeFieldEnd();
  }
  if (this.linkStatusType !== null && this.linkStatusType !== undefined) {
    output.writeFieldBegin('linkStatusType', Thrift.Type.I32, 2);
    output.writeI32(this.linkStatusType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetTopology = module.exports.GetTopology = function(args) {
};
GetTopology.prototype = {};
GetTopology.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTopology.prototype.write = function(output) {
  output.writeStructBegin('GetTopology');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeStatus = module.exports.SetNodeStatus = function(args) {
  this.nodeMac = null;
  this.markAllLinksDown = null;
  this.nodeStatus = null;
  if (args) {
    if (args.nodeMac !== undefined) {
      this.nodeMac = args.nodeMac;
    }
    if (args.markAllLinksDown !== undefined) {
      this.markAllLinksDown = args.markAllLinksDown;
    }
    if (args.nodeStatus !== undefined) {
      this.nodeStatus = args.nodeStatus;
    }
  }
};
SetNodeStatus.prototype = {};
SetNodeStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.markAllLinksDown = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.nodeStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeStatus.prototype.write = function(output) {
  output.writeStructBegin('SetNodeStatus');
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 1);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  if (this.markAllLinksDown !== null && this.markAllLinksDown !== undefined) {
    output.writeFieldBegin('markAllLinksDown', Thrift.Type.BOOL, 2);
    output.writeBool(this.markAllLinksDown);
    output.writeFieldEnd();
  }
  if (this.nodeStatus !== null && this.nodeStatus !== undefined) {
    output.writeFieldBegin('nodeStatus', Thrift.Type.I32, 3);
    output.writeI32(this.nodeStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeParamsReq = module.exports.SetNodeParamsReq = function(args) {
  this.nodeMac = null;
  this.nodeAirtime = null;
  this.nodeBWAlloc = null;
  if (args) {
    if (args.nodeMac !== undefined) {
      this.nodeMac = args.nodeMac;
    }
    if (args.nodeAirtime !== undefined) {
      this.nodeAirtime = args.nodeAirtime;
    }
    if (args.nodeBWAlloc !== undefined) {
      this.nodeBWAlloc = args.nodeBWAlloc;
    }
  }
};
SetNodeParamsReq.prototype = {};
SetNodeParamsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeAirtime = new BWAllocation_ttypes.NodeAirtime();
        this.nodeAirtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeBWAlloc = new BWAllocation_ttypes.NodeBwAlloc();
        this.nodeBWAlloc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeParamsReq.prototype.write = function(output) {
  output.writeStructBegin('SetNodeParamsReq');
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 1);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  if (this.nodeAirtime !== null && this.nodeAirtime !== undefined) {
    output.writeFieldBegin('nodeAirtime', Thrift.Type.STRUCT, 2);
    this.nodeAirtime.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeBWAlloc !== null && this.nodeBWAlloc !== undefined) {
    output.writeFieldBegin('nodeBWAlloc', Thrift.Type.STRUCT, 3);
    this.nodeBWAlloc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNetworkParamsReq = module.exports.SetNetworkParamsReq = function(args) {
  this.networkAirtime = null;
  this.networkBWAlloc = null;
  if (args) {
    if (args.networkAirtime !== undefined) {
      this.networkAirtime = args.networkAirtime;
    }
    if (args.networkBWAlloc !== undefined) {
      this.networkBWAlloc = args.networkBWAlloc;
    }
  }
};
SetNetworkParamsReq.prototype = {};
SetNetworkParamsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.networkAirtime = new BWAllocation_ttypes.NetworkAirtime();
        this.networkAirtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.networkBWAlloc = new BWAllocation_ttypes.NetworkBwAlloc();
        this.networkBWAlloc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNetworkParamsReq.prototype.write = function(output) {
  output.writeStructBegin('SetNetworkParamsReq');
  if (this.networkAirtime !== null && this.networkAirtime !== undefined) {
    output.writeFieldBegin('networkAirtime', Thrift.Type.STRUCT, 1);
    this.networkAirtime.write(output);
    output.writeFieldEnd();
  }
  if (this.networkBWAlloc !== null && this.networkBWAlloc !== undefined) {
    output.writeFieldBegin('networkBWAlloc', Thrift.Type.STRUCT, 2);
    this.networkBWAlloc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeMac = module.exports.SetNodeMac = function(args) {
  this.nodeName = null;
  this.scannedBlob = null;
  if (args) {
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
    if (args.scannedBlob !== undefined) {
      this.scannedBlob = args.scannedBlob;
    }
  }
};
SetNodeMac.prototype = {};
SetNodeMac.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scannedBlob = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeMac.prototype.write = function(output) {
  output.writeStructBegin('SetNodeMac');
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 1);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  if (this.scannedBlob !== null && this.scannedBlob !== undefined) {
    output.writeFieldBegin('scannedBlob', Thrift.Type.STRING, 2);
    output.writeString(this.scannedBlob);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BumpLinkUpAttempts = module.exports.BumpLinkUpAttempts = function(args) {
  this.linkName = null;
  if (args) {
    if (args.linkName !== undefined) {
      this.linkName = args.linkName;
    }
  }
};
BumpLinkUpAttempts.prototype = {};
BumpLinkUpAttempts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.linkName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BumpLinkUpAttempts.prototype.write = function(output) {
  output.writeStructBegin('BumpLinkUpAttempts');
  if (this.linkName !== null && this.linkName !== undefined) {
    output.writeFieldBegin('linkName', Thrift.Type.STRING, 1);
    output.writeString(this.linkName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddNode = module.exports.AddNode = function(args) {
  this.node = null;
  if (args) {
    if (args.node !== undefined) {
      this.node = args.node;
    }
  }
};
AddNode.prototype = {};
AddNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new Topology_ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddNode.prototype.write = function(output) {
  output.writeStructBegin('AddNode');
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 1);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelNode = module.exports.DelNode = function(args) {
  this.nodeName = null;
  this.forceDelete = null;
  if (args) {
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
    if (args.forceDelete !== undefined) {
      this.forceDelete = args.forceDelete;
    }
  }
};
DelNode.prototype = {};
DelNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.forceDelete = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelNode.prototype.write = function(output) {
  output.writeStructBegin('DelNode');
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 1);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  if (this.forceDelete !== null && this.forceDelete !== undefined) {
    output.writeFieldBegin('forceDelete', Thrift.Type.BOOL, 2);
    output.writeBool(this.forceDelete);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddLink = module.exports.AddLink = function(args) {
  this.link = null;
  if (args) {
    if (args.link !== undefined) {
      this.link = args.link;
    }
  }
};
AddLink.prototype = {};
AddLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.link = new Topology_ttypes.Link();
        this.link.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddLink.prototype.write = function(output) {
  output.writeStructBegin('AddLink');
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRUCT, 1);
    this.link.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelLink = module.exports.DelLink = function(args) {
  this.a_node_name = null;
  this.z_node_name = null;
  this.forceDelete = null;
  if (args) {
    if (args.a_node_name !== undefined) {
      this.a_node_name = args.a_node_name;
    }
    if (args.z_node_name !== undefined) {
      this.z_node_name = args.z_node_name;
    }
    if (args.forceDelete !== undefined) {
      this.forceDelete = args.forceDelete;
    }
  }
};
DelLink.prototype = {};
DelLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.a_node_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.z_node_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.forceDelete = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelLink.prototype.write = function(output) {
  output.writeStructBegin('DelLink');
  if (this.a_node_name !== null && this.a_node_name !== undefined) {
    output.writeFieldBegin('a_node_name', Thrift.Type.STRING, 1);
    output.writeString(this.a_node_name);
    output.writeFieldEnd();
  }
  if (this.z_node_name !== null && this.z_node_name !== undefined) {
    output.writeFieldBegin('z_node_name', Thrift.Type.STRING, 2);
    output.writeString(this.z_node_name);
    output.writeFieldEnd();
  }
  if (this.forceDelete !== null && this.forceDelete !== undefined) {
    output.writeFieldBegin('forceDelete', Thrift.Type.BOOL, 3);
    output.writeBool(this.forceDelete);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddSite = module.exports.AddSite = function(args) {
  this.site = null;
  if (args) {
    if (args.site !== undefined) {
      this.site = args.site;
    }
  }
};
AddSite.prototype = {};
AddSite.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.site = new Topology_ttypes.Site();
        this.site.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddSite.prototype.write = function(output) {
  output.writeStructBegin('AddSite');
  if (this.site !== null && this.site !== undefined) {
    output.writeFieldBegin('site', Thrift.Type.STRUCT, 1);
    this.site.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelSite = module.exports.DelSite = function(args) {
  this.siteName = null;
  if (args) {
    if (args.siteName !== undefined) {
      this.siteName = args.siteName;
    }
  }
};
DelSite.prototype = {};
DelSite.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.siteName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelSite.prototype.write = function(output) {
  output.writeStructBegin('DelSite');
  if (this.siteName !== null && this.siteName !== undefined) {
    output.writeFieldBegin('siteName', Thrift.Type.STRING, 1);
    output.writeString(this.siteName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResetTopologyState = module.exports.ResetTopologyState = function(args) {
  this.resetLinkupAttempts = null;
  if (args) {
    if (args.resetLinkupAttempts !== undefined) {
      this.resetLinkupAttempts = args.resetLinkupAttempts;
    }
  }
};
ResetTopologyState.prototype = {};
ResetTopologyState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.resetLinkupAttempts = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResetTopologyState.prototype.write = function(output) {
  output.writeStructBegin('ResetTopologyState');
  if (this.resetLinkupAttempts !== null && this.resetLinkupAttempts !== undefined) {
    output.writeFieldBegin('resetLinkupAttempts', Thrift.Type.BOOL, 1);
    output.writeBool(this.resetLinkupAttempts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MicroRoute = module.exports.MicroRoute = function(args) {
  this.tx = null;
  this.rx = null;
  if (args) {
    if (args.tx !== undefined) {
      this.tx = args.tx;
    }
    if (args.rx !== undefined) {
      this.rx = args.rx;
    }
  }
};
MicroRoute.prototype = {};
MicroRoute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.tx = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.rx = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MicroRoute.prototype.write = function(output) {
  output.writeStructBegin('MicroRoute');
  if (this.tx !== null && this.tx !== undefined) {
    output.writeFieldBegin('tx', Thrift.Type.I16, 1);
    output.writeI16(this.tx);
    output.writeFieldEnd();
  }
  if (this.rx !== null && this.rx !== undefined) {
    output.writeFieldBegin('rx', Thrift.Type.I16, 2);
    output.writeI16(this.rx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RouteInfo = module.exports.RouteInfo = function(args) {
  this.route = null;
  this.rssi = null;
  this.snrEst = null;
  this.postSnr = null;
  if (args) {
    if (args.route !== undefined) {
      this.route = args.route;
    }
    if (args.rssi !== undefined) {
      this.rssi = args.rssi;
    }
    if (args.snrEst !== undefined) {
      this.snrEst = args.snrEst;
    }
    if (args.postSnr !== undefined) {
      this.postSnr = args.postSnr;
    }
  }
};
RouteInfo.prototype = {};
RouteInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.route = new ttypes.MicroRoute();
        this.route.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rssi = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.snrEst = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.postSnr = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RouteInfo.prototype.write = function(output) {
  output.writeStructBegin('RouteInfo');
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRUCT, 1);
    this.route.write(output);
    output.writeFieldEnd();
  }
  if (this.rssi !== null && this.rssi !== undefined) {
    output.writeFieldBegin('rssi', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.rssi);
    output.writeFieldEnd();
  }
  if (this.snrEst !== null && this.snrEst !== undefined) {
    output.writeFieldBegin('snrEst', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.snrEst);
    output.writeFieldEnd();
  }
  if (this.postSnr !== null && this.postSnr !== undefined) {
    output.writeFieldBegin('postSnr', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.postSnr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanReq = module.exports.ScanReq = function(args) {
  this.token = null;
  this.scanMode = null;
  this.startBwgdIdx = null;
  this.bfScanInvertPolarity = null;
  this.txNodeMac = null;
  this.rxNodeMacs = null;
  this.routes = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.scanMode !== undefined) {
      this.scanMode = args.scanMode;
    }
    if (args.startBwgdIdx !== undefined) {
      this.startBwgdIdx = args.startBwgdIdx;
    }
    if (args.bfScanInvertPolarity !== undefined) {
      this.bfScanInvertPolarity = args.bfScanInvertPolarity;
    }
    if (args.txNodeMac !== undefined) {
      this.txNodeMac = args.txNodeMac;
    }
    if (args.rxNodeMacs !== undefined) {
      this.rxNodeMacs = args.rxNodeMacs;
    }
    if (args.routes !== undefined) {
      this.routes = args.routes;
    }
  }
};
ScanReq.prototype = {};
ScanReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.token = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.scanMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startBwgdIdx = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.bfScanInvertPolarity = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.txNodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.rxNodeMacs = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.rxNodeMacs.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size33 = 0;
        var _rtmp337;
        this.routes = [];
        var _etype36 = 0;
        _rtmp337 = input.readListBegin();
        _etype36 = _rtmp337.etype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var elem39 = null;
          elem39 = new ttypes.MicroRoute();
          elem39.read(input);
          this.routes.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanReq.prototype.write = function(output) {
  output.writeStructBegin('ScanReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.I32, 1);
    output.writeI32(this.token);
    output.writeFieldEnd();
  }
  if (this.scanMode !== null && this.scanMode !== undefined) {
    output.writeFieldBegin('scanMode', Thrift.Type.I32, 2);
    output.writeI32(this.scanMode);
    output.writeFieldEnd();
  }
  if (this.startBwgdIdx !== null && this.startBwgdIdx !== undefined) {
    output.writeFieldBegin('startBwgdIdx', Thrift.Type.I64, 3);
    output.writeI64(this.startBwgdIdx);
    output.writeFieldEnd();
  }
  if (this.bfScanInvertPolarity !== null && this.bfScanInvertPolarity !== undefined) {
    output.writeFieldBegin('bfScanInvertPolarity', Thrift.Type.BOOL, 4);
    output.writeBool(this.bfScanInvertPolarity);
    output.writeFieldEnd();
  }
  if (this.txNodeMac !== null && this.txNodeMac !== undefined) {
    output.writeFieldBegin('txNodeMac', Thrift.Type.STRING, 5);
    output.writeString(this.txNodeMac);
    output.writeFieldEnd();
  }
  if (this.rxNodeMacs !== null && this.rxNodeMacs !== undefined) {
    output.writeFieldBegin('rxNodeMacs', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.rxNodeMacs.length);
    for (var iter40 in this.rxNodeMacs)
    {
      if (this.rxNodeMacs.hasOwnProperty(iter40))
      {
        iter40 = this.rxNodeMacs[iter40];
        output.writeString(iter40);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.routes !== null && this.routes !== undefined) {
    output.writeFieldBegin('routes', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.routes.length);
    for (var iter41 in this.routes)
    {
      if (this.routes.hasOwnProperty(iter41))
      {
        iter41 = this.routes[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResp = module.exports.ScanResp = function(args) {
  this.token = null;
  this.curSuperframeNum = null;
  this.routeInfoList = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.curSuperframeNum !== undefined) {
      this.curSuperframeNum = args.curSuperframeNum;
    }
    if (args.routeInfoList !== undefined) {
      this.routeInfoList = args.routeInfoList;
    }
  }
};
ScanResp.prototype = {};
ScanResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.token = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.curSuperframeNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.routeInfoList = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new ttypes.RouteInfo();
          elem48.read(input);
          this.routeInfoList.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResp.prototype.write = function(output) {
  output.writeStructBegin('ScanResp');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.I32, 1);
    output.writeI32(this.token);
    output.writeFieldEnd();
  }
  if (this.curSuperframeNum !== null && this.curSuperframeNum !== undefined) {
    output.writeFieldBegin('curSuperframeNum', Thrift.Type.I64, 2);
    output.writeI64(this.curSuperframeNum);
    output.writeFieldEnd();
  }
  if (this.routeInfoList !== null && this.routeInfoList !== undefined) {
    output.writeFieldBegin('routeInfoList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.routeInfoList.length);
    for (var iter49 in this.routeInfoList)
    {
      if (this.routeInfoList.hasOwnProperty(iter49))
      {
        iter49 = this.routeInfoList[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartScan = module.exports.StartScan = function(args) {
  this.txNode = null;
  this.rxNode = null;
  this.scanMode = null;
  this.startTime = null;
  if (args) {
    if (args.txNode !== undefined) {
      this.txNode = args.txNode;
    }
    if (args.rxNode !== undefined) {
      this.rxNode = args.rxNode;
    }
    if (args.scanMode !== undefined) {
      this.scanMode = args.scanMode;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
  }
};
StartScan.prototype = {};
StartScan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.txNode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rxNode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.scanMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartScan.prototype.write = function(output) {
  output.writeStructBegin('StartScan');
  if (this.txNode !== null && this.txNode !== undefined) {
    output.writeFieldBegin('txNode', Thrift.Type.STRING, 1);
    output.writeString(this.txNode);
    output.writeFieldEnd();
  }
  if (this.rxNode !== null && this.rxNode !== undefined) {
    output.writeFieldBegin('rxNode', Thrift.Type.STRING, 2);
    output.writeString(this.rxNode);
    output.writeFieldEnd();
  }
  if (this.scanMode !== null && this.scanMode !== undefined) {
    output.writeFieldBegin('scanMode', Thrift.Type.I32, 3);
    output.writeI32(this.scanMode);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 4);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetScanStatus = module.exports.GetScanStatus = function(args) {
};
GetScanStatus.prototype = {};
GetScanStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetScanStatus.prototype.write = function(output) {
  output.writeStructBegin('GetScanStatus');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResetScanStatus = module.exports.ResetScanStatus = function(args) {
};
ResetScanStatus.prototype = {};
ResetScanStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResetScanStatus.prototype.write = function(output) {
  output.writeStructBegin('ResetScanStatus');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanStatus = module.exports.ScanStatus = function(args) {
  this.scans = null;
  if (args) {
    if (args.scans !== undefined) {
      this.scans = args.scans;
    }
  }
};
ScanStatus.prototype = {};
ScanStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size50 = 0;
        var _rtmp354;
        this.scans = {};
        var _ktype51 = 0;
        var _vtype52 = 0;
        _rtmp354 = input.readMapBegin();
        _ktype51 = _rtmp354.ktype;
        _vtype52 = _rtmp354.vtype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var key56 = null;
          var val57 = null;
          key56 = input.readI32();
          var _size58 = 0;
          var _rtmp362;
          val57 = {};
          var _ktype59 = 0;
          var _vtype60 = 0;
          _rtmp362 = input.readMapBegin();
          _ktype59 = _rtmp362.ktype;
          _vtype60 = _rtmp362.vtype;
          _size58 = _rtmp362.size;
          for (var _i63 = 0; _i63 < _size58; ++_i63)
          {
            var key64 = null;
            var val65 = null;
            key64 = input.readString();
            val65 = new ttypes.ScanResp();
            val65.read(input);
            val57[key64] = val65;
          }
          input.readMapEnd();
          this.scans[key56] = val57;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanStatus.prototype.write = function(output) {
  output.writeStructBegin('ScanStatus');
  if (this.scans !== null && this.scans !== undefined) {
    output.writeFieldBegin('scans', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.MAP, Thrift.objectLength(this.scans));
    for (var kiter66 in this.scans)
    {
      if (this.scans.hasOwnProperty(kiter66))
      {
        var viter67 = this.scans[kiter66];
        output.writeI32(kiter66);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter67));
        for (var kiter68 in viter67)
        {
          if (viter67.hasOwnProperty(kiter68))
          {
            var viter69 = viter67[kiter68];
            output.writeString(kiter68);
            viter69.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = module.exports.Message = function(args) {
  this.mType = null;
  this.value = null;
  if (args) {
    if (args.mType !== undefined) {
      this.mType = args.mType;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.mType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.mType !== null && this.mType !== undefined) {
    output.writeFieldBegin('mType', Thrift.Type.I32, 1);
    output.writeI32(this.mType);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hello = module.exports.Hello = function(args) {
};
Hello.prototype = {};
Hello.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hello.prototype.write = function(output) {
  output.writeStructBegin('Hello');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

E2EAck = module.exports.E2EAck = function(args) {
  this.success = null;
  this.message = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
E2EAck.prototype = {};
E2EAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EAck.prototype.write = function(output) {
  output.writeStructBegin('E2EAck');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NetworkInfo = module.exports.NetworkInfo = function(args) {
  this.e2eCtrlUrl = null;
  this.aggrCtrlUrl = null;
  if (args) {
    if (args.e2eCtrlUrl !== undefined) {
      this.e2eCtrlUrl = args.e2eCtrlUrl;
    }
    if (args.aggrCtrlUrl !== undefined) {
      this.aggrCtrlUrl = args.aggrCtrlUrl;
    }
  }
};
NetworkInfo.prototype = {};
NetworkInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.e2eCtrlUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.aggrCtrlUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NetworkInfo.prototype.write = function(output) {
  output.writeStructBegin('NetworkInfo');
  if (this.e2eCtrlUrl !== null && this.e2eCtrlUrl !== undefined) {
    output.writeFieldBegin('e2eCtrlUrl', Thrift.Type.STRING, 1);
    output.writeString(this.e2eCtrlUrl);
    output.writeFieldEnd();
  }
  if (this.aggrCtrlUrl !== null && this.aggrCtrlUrl !== undefined) {
    output.writeFieldBegin('aggrCtrlUrl', Thrift.Type.STRING, 2);
    output.writeString(this.aggrCtrlUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Empty = module.exports.Empty = function(args) {
};
Empty.prototype = {};
Empty.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Empty.prototype.write = function(output) {
  output.writeStructBegin('Empty');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
