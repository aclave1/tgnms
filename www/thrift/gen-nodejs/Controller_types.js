//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};

var BWAllocation_ttypes = require('./BWAllocation_types')
var Topology_ttypes = require('./Topology_types')

ttypes.MessageType = {
'GET_STATUS_DUMP' : 101,
'REBOOT_REQUEST' : 102,
'STATUS_DUMP' : 121,
'SET_NODE_PARAMS' : 141,
'REBOOT_NODE' : 142,
'STATUS_REPORT' : 161,
'GET_IGNITION_STATE' : 201,
'SET_IGNITION_PARAMS' : 202,
'SET_LINK_STATUS_REQ' : 203,
'IGNITION_STATE' : 221,
'SET_LINK_STATUS' : 241,
'GET_LINK_STATUS' : 242,
'LINK_STATUS' : 261,
'GET_TOPOLOGY' : 301,
'SET_NODE_STATUS' : 302,
'SET_NODE_MAC' : 303,
'SET_NODE_MAC_LIST' : 315,
'SET_NODE_PARAMS_REQ' : 304,
'BUMP_LINKUP_ATTEMPTS' : 305,
'ADD_NODE' : 306,
'ADD_LINK' : 307,
'DEL_NODE' : 308,
'DEL_LINK' : 309,
'ADD_SITE' : 310,
'DEL_SITE' : 311,
'EDIT_SITE' : 317,
'EDIT_NODE' : 318,
'SET_NETWORK_PARAMS_REQ' : 312,
'RESET_TOPOLOGY_STATE' : 313,
'SET_TOPOLOGY_NAME' : 314,
'BULK_ADD' : 316,
'TOPOLOGY' : 321,
'UPGRADE_REQ' : 401,
'SET_UPGRADE_STATUS' : 421,
'UPGRADE_GROUP_REQ' : 441,
'UPGRADE_STATE_REQ' : 442,
'UPGRADE_ABORT_REQ' : 443,
'UPGRADE_COMMIT_PLAN_REQ' : 444,
'UPGRADE_ADD_IMAGE_REQ' : 445,
'UPGRADE_DEL_IMAGE_REQ' : 446,
'UPGRADE_LIST_IMAGES_REQ' : 447,
'UPGRADE_STATE_DUMP' : 451,
'UPGRADE_COMMIT_PLAN' : 452,
'UPGRADE_LIST_IMAGES_RESP' : 453,
'SCAN_REQ' : 601,
'SCAN_RESP' : 621,
'START_SCAN' : 641,
'GET_SCAN_STATUS' : 642,
'RESET_SCAN_STATUS' : 643,
'SCAN_STATUS' : 661,
'DR_ACK' : 491,
'GPS_GET_POS_RESP' : 492,
'DR_DEV_ALLOC_RES' : 493,
'GPS_GET_POS_REQ' : 495,
'DR_DEV_ALLOC_REQ' : 496,
'NODE_INIT' : 501,
'DR_SET_LINK_STATUS' : 502,
'FW_SET_NODE_PARAMS' : 503,
'FW_STATS_CONFIGURE_REQ' : 504,
'PHY_LA_CONFIG_REQ' : 505,
'GPS_ENABLE_REQ' : 506,
'FW_SET_CODEBOOK' : 507,
'FW_DEBUG_REQ' : 508,
'PHY_AGC_CONFIG_REQ' : 509,
'PHY_GOLAY_SEQUENCE_CONFIG_REQ' : 510,
'FW_CONFIG_REQ' : 511,
'PHY_TPC_CONFIG_REQ' : 512,
'FW_BF_RESP_SCAN' : 513,
'NODE_INIT_NOTIFY' : 551,
'DR_LINK_STATUS' : 552,
'FW_STATS' : 553,
'FW_ACK' : 591,
'FW_HEALTHY' : 592,
'FW_GET_CODEBOOK' : 593,
'NONE' : 1001,
'HELLO' : 1002,
'E2E_ACK' : 1003,
'TEST' : 1004,
'DR_RESP' : 1005,
'DR_STAT_PUSH' : 1006
};
ttypes.LinkActionType = {
'LINK_UP' : 1,
'LINK_DOWN' : 2,
'LINK_ADD' : 3,
'LINK_DELETE' : 4
};
ttypes.LinkStatusType = {
'LINK_UP' : 1,
'LINK_DOWN' : 2
};
ttypes.UpgradeStatusType = {
'NONE' : 10,
'DOWNLOADING_IMAGE' : 20,
'DOWNLOAD_FAILED' : 30,
'FLASHING_IMAGE' : 40,
'FLASH_FAILED' : 50,
'FLASHED' : 60,
'COMMIT_FAILED' : 70
};
ttypes.UpgradeReqType = {
'PREPARE_UPGRADE' : 10,
'COMMIT_UPGRADE' : 20,
'RESET_STATUS' : 30
};
ttypes.UpgradeGroupType = {
'NODES' : 10,
'NETWORK' : 20
};
ttypes.ScanMode = {
'COARSE' : 1,
'FINE' : 2,
'SELECTIVE' : 3
};
ttypes.RTCal = {
'NO_CAL' : 0,
'TOP_RX_CAL' : 1,
'TOP_TX_CAL' : 2,
'BOT_RX_CAL' : 3,
'BOT_TX_CAL' : 4,
'VBS_RX_CAL' : 5,
'VBS_TX_CAL' : 6
};
ImageMeta = module.exports.ImageMeta = function(args) {
  this.md5 = null;
  this.version = null;
  if (args) {
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
ImageMeta.prototype = {};
ImageMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImageMeta.prototype.write = function(output) {
  output.writeStructBegin('ImageMeta');
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 1);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeStatus = module.exports.UpgradeStatus = function(args) {
  this.usType = null;
  this.nextImage = null;
  this.reason = null;
  this.upgradeReqId = null;
  this.whenToCommit = null;
  if (args) {
    if (args.usType !== undefined) {
      this.usType = args.usType;
    }
    if (args.nextImage !== undefined) {
      this.nextImage = args.nextImage;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.upgradeReqId !== undefined) {
      this.upgradeReqId = args.upgradeReqId;
    }
    if (args.whenToCommit !== undefined) {
      this.whenToCommit = args.whenToCommit;
    }
  }
};
UpgradeStatus.prototype = {};
UpgradeStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.usType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nextImage = new ttypes.ImageMeta();
        this.nextImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.upgradeReqId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.whenToCommit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeStatus.prototype.write = function(output) {
  output.writeStructBegin('UpgradeStatus');
  if (this.usType !== null && this.usType !== undefined) {
    output.writeFieldBegin('usType', Thrift.Type.I32, 1);
    output.writeI32(this.usType);
    output.writeFieldEnd();
  }
  if (this.nextImage !== null && this.nextImage !== undefined) {
    output.writeFieldBegin('nextImage', Thrift.Type.STRUCT, 2);
    this.nextImage.write(output);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.upgradeReqId !== null && this.upgradeReqId !== undefined) {
    output.writeFieldBegin('upgradeReqId', Thrift.Type.STRING, 4);
    output.writeString(this.upgradeReqId);
    output.writeFieldEnd();
  }
  if (this.whenToCommit !== null && this.whenToCommit !== undefined) {
    output.writeFieldBegin('whenToCommit', Thrift.Type.I64, 5);
    output.writeI64(this.whenToCommit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeTorrentParams = module.exports.UpgradeTorrentParams = function(args) {
  this.downloadTimeout = null;
  this.downloadLimit = -1;
  this.uploadLimit = -1;
  this.maxConnections = -1;
  if (args) {
    if (args.downloadTimeout !== undefined) {
      this.downloadTimeout = args.downloadTimeout;
    }
    if (args.downloadLimit !== undefined) {
      this.downloadLimit = args.downloadLimit;
    }
    if (args.uploadLimit !== undefined) {
      this.uploadLimit = args.uploadLimit;
    }
    if (args.maxConnections !== undefined) {
      this.maxConnections = args.maxConnections;
    }
  }
};
UpgradeTorrentParams.prototype = {};
UpgradeTorrentParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.downloadTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.downloadLimit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.uploadLimit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.maxConnections = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeTorrentParams.prototype.write = function(output) {
  output.writeStructBegin('UpgradeTorrentParams');
  if (this.downloadTimeout !== null && this.downloadTimeout !== undefined) {
    output.writeFieldBegin('downloadTimeout', Thrift.Type.I64, 1);
    output.writeI64(this.downloadTimeout);
    output.writeFieldEnd();
  }
  if (this.downloadLimit !== null && this.downloadLimit !== undefined) {
    output.writeFieldBegin('downloadLimit', Thrift.Type.I64, 2);
    output.writeI64(this.downloadLimit);
    output.writeFieldEnd();
  }
  if (this.uploadLimit !== null && this.uploadLimit !== undefined) {
    output.writeFieldBegin('uploadLimit', Thrift.Type.I64, 3);
    output.writeI64(this.uploadLimit);
    output.writeFieldEnd();
  }
  if (this.maxConnections !== null && this.maxConnections !== undefined) {
    output.writeFieldBegin('maxConnections', Thrift.Type.I64, 4);
    output.writeI64(this.maxConnections);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeReq = module.exports.UpgradeReq = function(args) {
  this.urType = null;
  this.upgradeReqId = null;
  this.md5 = null;
  this.imageUrl = null;
  this.scheduleToCommit = null;
  this.downloadAttempts = null;
  this.torrentParams = null;
  if (args) {
    if (args.urType !== undefined) {
      this.urType = args.urType;
    }
    if (args.upgradeReqId !== undefined) {
      this.upgradeReqId = args.upgradeReqId;
    }
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.scheduleToCommit !== undefined) {
      this.scheduleToCommit = args.scheduleToCommit;
    }
    if (args.downloadAttempts !== undefined) {
      this.downloadAttempts = args.downloadAttempts;
    }
    if (args.torrentParams !== undefined) {
      this.torrentParams = args.torrentParams;
    }
  }
};
UpgradeReq.prototype = {};
UpgradeReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.urType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.upgradeReqId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.scheduleToCommit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.downloadAttempts = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.torrentParams = new ttypes.UpgradeTorrentParams();
        this.torrentParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeReq');
  if (this.urType !== null && this.urType !== undefined) {
    output.writeFieldBegin('urType', Thrift.Type.I32, 1);
    output.writeI32(this.urType);
    output.writeFieldEnd();
  }
  if (this.upgradeReqId !== null && this.upgradeReqId !== undefined) {
    output.writeFieldBegin('upgradeReqId', Thrift.Type.STRING, 2);
    output.writeString(this.upgradeReqId);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.scheduleToCommit !== null && this.scheduleToCommit !== undefined) {
    output.writeFieldBegin('scheduleToCommit', Thrift.Type.I64, 5);
    output.writeI64(this.scheduleToCommit);
    output.writeFieldEnd();
  }
  if (this.downloadAttempts !== null && this.downloadAttempts !== undefined) {
    output.writeFieldBegin('downloadAttempts', Thrift.Type.I64, 6);
    output.writeI64(this.downloadAttempts);
    output.writeFieldEnd();
  }
  if (this.torrentParams !== null && this.torrentParams !== undefined) {
    output.writeFieldBegin('torrentParams', Thrift.Type.STRUCT, 7);
    this.torrentParams.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeGroupReq = module.exports.UpgradeGroupReq = function(args) {
  this.ugType = null;
  this.nodes = null;
  this.excludeNodes = null;
  this.urReq = null;
  this.timeout = null;
  this.skipFailure = null;
  this.version = null;
  this.skipLinks = null;
  this.limit = null;
  if (args) {
    if (args.ugType !== undefined) {
      this.ugType = args.ugType;
    }
    if (args.nodes !== undefined) {
      this.nodes = args.nodes;
    }
    if (args.excludeNodes !== undefined) {
      this.excludeNodes = args.excludeNodes;
    }
    if (args.urReq !== undefined) {
      this.urReq = args.urReq;
    }
    if (args.timeout !== undefined) {
      this.timeout = args.timeout;
    }
    if (args.skipFailure !== undefined) {
      this.skipFailure = args.skipFailure;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.skipLinks !== undefined) {
      this.skipLinks = args.skipLinks;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
  }
};
UpgradeGroupReq.prototype = {};
UpgradeGroupReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ugType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.nodes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.nodes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.excludeNodes = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.excludeNodes.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.urReq = new ttypes.UpgradeReq();
        this.urReq.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.skipFailure = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.skipLinks = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readString();
          this.skipLinks.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeGroupReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeGroupReq');
  if (this.ugType !== null && this.ugType !== undefined) {
    output.writeFieldBegin('ugType', Thrift.Type.I32, 1);
    output.writeI32(this.ugType);
    output.writeFieldEnd();
  }
  if (this.nodes !== null && this.nodes !== undefined) {
    output.writeFieldBegin('nodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.nodes.length);
    for (var iter21 in this.nodes)
    {
      if (this.nodes.hasOwnProperty(iter21))
      {
        iter21 = this.nodes[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.excludeNodes !== null && this.excludeNodes !== undefined) {
    output.writeFieldBegin('excludeNodes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.excludeNodes.length);
    for (var iter22 in this.excludeNodes)
    {
      if (this.excludeNodes.hasOwnProperty(iter22))
      {
        iter22 = this.excludeNodes[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.urReq !== null && this.urReq !== undefined) {
    output.writeFieldBegin('urReq', Thrift.Type.STRUCT, 4);
    this.urReq.write(output);
    output.writeFieldEnd();
  }
  if (this.timeout !== null && this.timeout !== undefined) {
    output.writeFieldBegin('timeout', Thrift.Type.I64, 5);
    output.writeI64(this.timeout);
    output.writeFieldEnd();
  }
  if (this.skipFailure !== null && this.skipFailure !== undefined) {
    output.writeFieldBegin('skipFailure', Thrift.Type.BOOL, 6);
    output.writeBool(this.skipFailure);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 7);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.skipLinks !== null && this.skipLinks !== undefined) {
    output.writeFieldBegin('skipLinks', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.skipLinks.length);
    for (var iter23 in this.skipLinks)
    {
      if (this.skipLinks.hasOwnProperty(iter23))
      {
        iter23 = this.skipLinks[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 9);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeStateReq = module.exports.UpgradeStateReq = function(args) {
};
UpgradeStateReq.prototype = {};
UpgradeStateReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeStateReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeStateReq');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeStateDump = module.exports.UpgradeStateDump = function(args) {
  this.curBatch = null;
  this.pendingBatches = null;
  this.curReq = null;
  this.pendingReqs = null;
  if (args) {
    if (args.curBatch !== undefined) {
      this.curBatch = args.curBatch;
    }
    if (args.pendingBatches !== undefined) {
      this.pendingBatches = args.pendingBatches;
    }
    if (args.curReq !== undefined) {
      this.curReq = args.curReq;
    }
    if (args.pendingReqs !== undefined) {
      this.pendingReqs = args.pendingReqs;
    }
  }
};
UpgradeStateDump.prototype = {};
UpgradeStateDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.curBatch = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.curBatch.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.pendingBatches = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          var _size38 = 0;
          var _rtmp342;
          elem37 = [];
          var _etype41 = 0;
          _rtmp342 = input.readListBegin();
          _etype41 = _rtmp342.etype;
          _size38 = _rtmp342.size;
          for (var _i43 = 0; _i43 < _size38; ++_i43)
          {
            var elem44 = null;
            elem44 = input.readString();
            elem37.push(elem44);
          }
          input.readListEnd();
          this.pendingBatches.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.curReq = new ttypes.UpgradeGroupReq();
        this.curReq.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size45 = 0;
        var _rtmp349;
        this.pendingReqs = [];
        var _etype48 = 0;
        _rtmp349 = input.readListBegin();
        _etype48 = _rtmp349.etype;
        _size45 = _rtmp349.size;
        for (var _i50 = 0; _i50 < _size45; ++_i50)
        {
          var elem51 = null;
          elem51 = new ttypes.UpgradeGroupReq();
          elem51.read(input);
          this.pendingReqs.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeStateDump.prototype.write = function(output) {
  output.writeStructBegin('UpgradeStateDump');
  if (this.curBatch !== null && this.curBatch !== undefined) {
    output.writeFieldBegin('curBatch', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.curBatch.length);
    for (var iter52 in this.curBatch)
    {
      if (this.curBatch.hasOwnProperty(iter52))
      {
        iter52 = this.curBatch[iter52];
        output.writeString(iter52);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pendingBatches !== null && this.pendingBatches !== undefined) {
    output.writeFieldBegin('pendingBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.pendingBatches.length);
    for (var iter53 in this.pendingBatches)
    {
      if (this.pendingBatches.hasOwnProperty(iter53))
      {
        iter53 = this.pendingBatches[iter53];
        output.writeListBegin(Thrift.Type.STRING, iter53.length);
        for (var iter54 in iter53)
        {
          if (iter53.hasOwnProperty(iter54))
          {
            iter54 = iter53[iter54];
            output.writeString(iter54);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.curReq !== null && this.curReq !== undefined) {
    output.writeFieldBegin('curReq', Thrift.Type.STRUCT, 3);
    this.curReq.write(output);
    output.writeFieldEnd();
  }
  if (this.pendingReqs !== null && this.pendingReqs !== undefined) {
    output.writeFieldBegin('pendingReqs', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.pendingReqs.length);
    for (var iter55 in this.pendingReqs)
    {
      if (this.pendingReqs.hasOwnProperty(iter55))
      {
        iter55 = this.pendingReqs[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeAbortReq = module.exports.UpgradeAbortReq = function(args) {
  this.abortAll = null;
  this.reqIds = null;
  if (args) {
    if (args.abortAll !== undefined) {
      this.abortAll = args.abortAll;
    }
    if (args.reqIds !== undefined) {
      this.reqIds = args.reqIds;
    }
  }
};
UpgradeAbortReq.prototype = {};
UpgradeAbortReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.abortAll = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.reqIds = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString();
          this.reqIds.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeAbortReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeAbortReq');
  if (this.abortAll !== null && this.abortAll !== undefined) {
    output.writeFieldBegin('abortAll', Thrift.Type.BOOL, 1);
    output.writeBool(this.abortAll);
    output.writeFieldEnd();
  }
  if (this.reqIds !== null && this.reqIds !== undefined) {
    output.writeFieldBegin('reqIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.reqIds.length);
    for (var iter63 in this.reqIds)
    {
      if (this.reqIds.hasOwnProperty(iter63))
      {
        iter63 = this.reqIds[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeCommitPlanReq = module.exports.UpgradeCommitPlanReq = function(args) {
  this.limit = null;
  this.excludeNodes = null;
  if (args) {
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
    if (args.excludeNodes !== undefined) {
      this.excludeNodes = args.excludeNodes;
    }
  }
};
UpgradeCommitPlanReq.prototype = {};
UpgradeCommitPlanReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.limit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.excludeNodes = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.excludeNodes.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeCommitPlanReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeCommitPlanReq');
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I64, 1);
    output.writeI64(this.limit);
    output.writeFieldEnd();
  }
  if (this.excludeNodes !== null && this.excludeNodes !== undefined) {
    output.writeFieldBegin('excludeNodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.excludeNodes.length);
    for (var iter71 in this.excludeNodes)
    {
      if (this.excludeNodes.hasOwnProperty(iter71))
      {
        iter71 = this.excludeNodes[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeCommitPlan = module.exports.UpgradeCommitPlan = function(args) {
  this.commitBatches = null;
  this.canaryLinks = null;
  if (args) {
    if (args.commitBatches !== undefined) {
      this.commitBatches = args.commitBatches;
    }
    if (args.canaryLinks !== undefined) {
      this.canaryLinks = args.canaryLinks;
    }
  }
};
UpgradeCommitPlan.prototype = {};
UpgradeCommitPlan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.commitBatches = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          var _size79 = 0;
          var _rtmp383;
          elem78 = [];
          var _etype82 = 0;
          _rtmp383 = input.readListBegin();
          _etype82 = _rtmp383.etype;
          _size79 = _rtmp383.size;
          for (var _i84 = 0; _i84 < _size79; ++_i84)
          {
            var elem85 = null;
            elem85 = input.readString();
            elem78.push(elem85);
          }
          input.readListEnd();
          this.commitBatches.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.canaryLinks = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = input.readString();
          this.canaryLinks.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeCommitPlan.prototype.write = function(output) {
  output.writeStructBegin('UpgradeCommitPlan');
  if (this.commitBatches !== null && this.commitBatches !== undefined) {
    output.writeFieldBegin('commitBatches', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.commitBatches.length);
    for (var iter93 in this.commitBatches)
    {
      if (this.commitBatches.hasOwnProperty(iter93))
      {
        iter93 = this.commitBatches[iter93];
        output.writeListBegin(Thrift.Type.STRING, iter93.length);
        for (var iter94 in iter93)
        {
          if (iter93.hasOwnProperty(iter94))
          {
            iter94 = iter93[iter94];
            output.writeString(iter94);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.canaryLinks !== null && this.canaryLinks !== undefined) {
    output.writeFieldBegin('canaryLinks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.canaryLinks.length);
    for (var iter95 in this.canaryLinks)
    {
      if (this.canaryLinks.hasOwnProperty(iter95))
      {
        iter95 = this.canaryLinks[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeImage = module.exports.UpgradeImage = function(args) {
  this.name = null;
  this.magnetUri = null;
  this.md5 = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.magnetUri !== undefined) {
      this.magnetUri = args.magnetUri;
    }
    if (args.md5 !== undefined) {
      this.md5 = args.md5;
    }
  }
};
UpgradeImage.prototype = {};
UpgradeImage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.magnetUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeImage.prototype.write = function(output) {
  output.writeStructBegin('UpgradeImage');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.magnetUri !== null && this.magnetUri !== undefined) {
    output.writeFieldBegin('magnetUri', Thrift.Type.STRING, 2);
    output.writeString(this.magnetUri);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeAddImageReq = module.exports.UpgradeAddImageReq = function(args) {
  this.imageUrl = null;
  if (args) {
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
  }
};
UpgradeAddImageReq.prototype = {};
UpgradeAddImageReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeAddImageReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeAddImageReq');
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 1);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeDelImageReq = module.exports.UpgradeDelImageReq = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
UpgradeDelImageReq.prototype = {};
UpgradeDelImageReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeDelImageReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeDelImageReq');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeListImagesReq = module.exports.UpgradeListImagesReq = function(args) {
};
UpgradeListImagesReq.prototype = {};
UpgradeListImagesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeListImagesReq.prototype.write = function(output) {
  output.writeStructBegin('UpgradeListImagesReq');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UpgradeListImagesResp = module.exports.UpgradeListImagesResp = function(args) {
  this.images = null;
  if (args) {
    if (args.images !== undefined) {
      this.images = args.images;
    }
  }
};
UpgradeListImagesResp.prototype = {};
UpgradeListImagesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.images = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.UpgradeImage();
          elem102.read(input);
          this.images.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpgradeListImagesResp.prototype.write = function(output) {
  output.writeStructBegin('UpgradeListImagesResp');
  if (this.images !== null && this.images !== undefined) {
    output.writeFieldBegin('images', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.images.length);
    for (var iter103 in this.images)
    {
      if (this.images.hasOwnProperty(iter103))
      {
        iter103 = this.images[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetStatusDump = module.exports.GetStatusDump = function(args) {
};
GetStatusDump.prototype = {};
GetStatusDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetStatusDump.prototype.write = function(output) {
  output.writeStructBegin('GetStatusDump');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RebootReq = module.exports.RebootReq = function(args) {
  this.nodes = null;
  this.forced = null;
  this.secondsToReboot = null;
  if (args) {
    if (args.nodes !== undefined) {
      this.nodes = args.nodes;
    }
    if (args.forced !== undefined) {
      this.forced = args.forced;
    }
    if (args.secondsToReboot !== undefined) {
      this.secondsToReboot = args.secondsToReboot;
    }
  }
};
RebootReq.prototype = {};
RebootReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.nodes = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString();
          this.nodes.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.forced = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.secondsToReboot = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RebootReq.prototype.write = function(output) {
  output.writeStructBegin('RebootReq');
  if (this.nodes !== null && this.nodes !== undefined) {
    output.writeFieldBegin('nodes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.nodes.length);
    for (var iter111 in this.nodes)
    {
      if (this.nodes.hasOwnProperty(iter111))
      {
        iter111 = this.nodes[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.forced !== null && this.forced !== undefined) {
    output.writeFieldBegin('forced', Thrift.Type.BOOL, 2);
    output.writeBool(this.forced);
    output.writeFieldEnd();
  }
  if (this.secondsToReboot !== null && this.secondsToReboot !== undefined) {
    output.writeFieldBegin('secondsToReboot', Thrift.Type.I32, 3);
    output.writeI32(this.secondsToReboot);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RebootNode = module.exports.RebootNode = function(args) {
  this.forced = null;
  this.secondsToReboot = 5;
  if (args) {
    if (args.forced !== undefined) {
      this.forced = args.forced;
    }
    if (args.secondsToReboot !== undefined) {
      this.secondsToReboot = args.secondsToReboot;
    }
  }
};
RebootNode.prototype = {};
RebootNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.forced = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.secondsToReboot = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RebootNode.prototype.write = function(output) {
  output.writeStructBegin('RebootNode');
  if (this.forced !== null && this.forced !== undefined) {
    output.writeFieldBegin('forced', Thrift.Type.BOOL, 1);
    output.writeBool(this.forced);
    output.writeFieldEnd();
  }
  if (this.secondsToReboot !== null && this.secondsToReboot !== undefined) {
    output.writeFieldBegin('secondsToReboot', Thrift.Type.I32, 2);
    output.writeI32(this.secondsToReboot);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatusDump = module.exports.StatusDump = function(args) {
  this.timeStamp = null;
  this.statusReports = null;
  if (args) {
    if (args.timeStamp !== undefined) {
      this.timeStamp = args.timeStamp;
    }
    if (args.statusReports !== undefined) {
      this.statusReports = args.statusReports;
    }
  }
};
StatusDump.prototype = {};
StatusDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size112 = 0;
        var _rtmp3116;
        this.statusReports = {};
        var _ktype113 = 0;
        var _vtype114 = 0;
        _rtmp3116 = input.readMapBegin();
        _ktype113 = _rtmp3116.ktype;
        _vtype114 = _rtmp3116.vtype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var key118 = null;
          var val119 = null;
          key118 = input.readString();
          val119 = new ttypes.StatusReport();
          val119.read(input);
          this.statusReports[key118] = val119;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatusDump.prototype.write = function(output) {
  output.writeStructBegin('StatusDump');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.statusReports !== null && this.statusReports !== undefined) {
    output.writeFieldBegin('statusReports', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.statusReports));
    for (var kiter120 in this.statusReports)
    {
      if (this.statusReports.hasOwnProperty(kiter120))
      {
        var viter121 = this.statusReports[kiter120];
        output.writeString(kiter120);
        viter121.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeParams = module.exports.NodeParams = function(args) {
  this.bwAllocMap = null;
  this.polarity = null;
  this.golayIdx = null;
  this.location = null;
  this.airtimeAllocMap = null;
  this.enableGps = null;
  this.channel = null;
  if (args) {
    if (args.bwAllocMap !== undefined) {
      this.bwAllocMap = args.bwAllocMap;
    }
    if (args.polarity !== undefined) {
      this.polarity = args.polarity;
    }
    if (args.golayIdx !== undefined) {
      this.golayIdx = args.golayIdx;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.airtimeAllocMap !== undefined) {
      this.airtimeAllocMap = args.airtimeAllocMap;
    }
    if (args.enableGps !== undefined) {
      this.enableGps = args.enableGps;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
  }
};
NodeParams.prototype = {};
NodeParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bwAllocMap = new BWAllocation_ttypes.NodeBwAlloc();
        this.bwAllocMap.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.polarity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.golayIdx = new Topology_ttypes.GolayIdx();
        this.golayIdx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new Topology_ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.airtimeAllocMap = new BWAllocation_ttypes.NodeAirtime();
        this.airtimeAllocMap.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enableGps = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BYTE) {
        this.channel = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeParams.prototype.write = function(output) {
  output.writeStructBegin('NodeParams');
  if (this.bwAllocMap !== null && this.bwAllocMap !== undefined) {
    output.writeFieldBegin('bwAllocMap', Thrift.Type.STRUCT, 1);
    this.bwAllocMap.write(output);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.I32, 2);
    output.writeI32(this.polarity);
    output.writeFieldEnd();
  }
  if (this.golayIdx !== null && this.golayIdx !== undefined) {
    output.writeFieldBegin('golayIdx', Thrift.Type.STRUCT, 3);
    this.golayIdx.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 4);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.airtimeAllocMap !== null && this.airtimeAllocMap !== undefined) {
    output.writeFieldBegin('airtimeAllocMap', Thrift.Type.STRUCT, 5);
    this.airtimeAllocMap.write(output);
    output.writeFieldEnd();
  }
  if (this.enableGps !== null && this.enableGps !== undefined) {
    output.writeFieldBegin('enableGps', Thrift.Type.BOOL, 6);
    output.writeBool(this.enableGps);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.BYTE, 7);
    output.writeByte(this.channel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatusReport = module.exports.StatusReport = function(args) {
  this.timeStamp = null;
  this.ipv6Address = null;
  this.version = null;
  this.uboot_version = null;
  this.status = null;
  this.upgradeStatus = null;
  if (args) {
    if (args.timeStamp !== undefined) {
      this.timeStamp = args.timeStamp;
    }
    if (args.ipv6Address !== undefined) {
      this.ipv6Address = args.ipv6Address;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.uboot_version !== undefined) {
      this.uboot_version = args.uboot_version;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.upgradeStatus !== undefined) {
      this.upgradeStatus = args.upgradeStatus;
    }
  }
};
StatusReport.prototype = {};
StatusReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipv6Address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.uboot_version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.upgradeStatus = new ttypes.UpgradeStatus();
        this.upgradeStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatusReport.prototype.write = function(output) {
  output.writeStructBegin('StatusReport');
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 1);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  if (this.ipv6Address !== null && this.ipv6Address !== undefined) {
    output.writeFieldBegin('ipv6Address', Thrift.Type.STRING, 2);
    output.writeString(this.ipv6Address);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 3);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.uboot_version !== null && this.uboot_version !== undefined) {
    output.writeFieldBegin('uboot_version', Thrift.Type.STRING, 6);
    output.writeString(this.uboot_version);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.upgradeStatus !== null && this.upgradeStatus !== undefined) {
    output.writeFieldBegin('upgradeStatus', Thrift.Type.STRUCT, 5);
    this.upgradeStatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetIgnitionState = module.exports.GetIgnitionState = function(args) {
};
GetIgnitionState.prototype = {};
GetIgnitionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetIgnitionState.prototype.write = function(output) {
  output.writeStructBegin('GetIgnitionState');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionParams = module.exports.IgnitionParams = function(args) {
  this.enable = null;
  this.linkUpInterval = null;
  this.linkUpDampenInterval = null;
  this.link_auto_ignite = null;
  if (args) {
    if (args.enable !== undefined) {
      this.enable = args.enable;
    }
    if (args.linkUpInterval !== undefined) {
      this.linkUpInterval = args.linkUpInterval;
    }
    if (args.linkUpDampenInterval !== undefined) {
      this.linkUpDampenInterval = args.linkUpDampenInterval;
    }
    if (args.link_auto_ignite !== undefined) {
      this.link_auto_ignite = args.link_auto_ignite;
    }
  }
};
IgnitionParams.prototype = {};
IgnitionParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.linkUpInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.linkUpDampenInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size122 = 0;
        var _rtmp3126;
        this.link_auto_ignite = {};
        var _ktype123 = 0;
        var _vtype124 = 0;
        _rtmp3126 = input.readMapBegin();
        _ktype123 = _rtmp3126.ktype;
        _vtype124 = _rtmp3126.vtype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var key128 = null;
          var val129 = null;
          key128 = input.readString();
          val129 = input.readBool();
          this.link_auto_ignite[key128] = val129;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionParams.prototype.write = function(output) {
  output.writeStructBegin('IgnitionParams');
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 1);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  if (this.linkUpInterval !== null && this.linkUpInterval !== undefined) {
    output.writeFieldBegin('linkUpInterval', Thrift.Type.I64, 2);
    output.writeI64(this.linkUpInterval);
    output.writeFieldEnd();
  }
  if (this.linkUpDampenInterval !== null && this.linkUpDampenInterval !== undefined) {
    output.writeFieldBegin('linkUpDampenInterval', Thrift.Type.I64, 3);
    output.writeI64(this.linkUpDampenInterval);
    output.writeFieldEnd();
  }
  if (this.link_auto_ignite !== null && this.link_auto_ignite !== undefined) {
    output.writeFieldBegin('link_auto_ignite', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BOOL, Thrift.objectLength(this.link_auto_ignite));
    for (var kiter130 in this.link_auto_ignite)
    {
      if (this.link_auto_ignite.hasOwnProperty(kiter130))
      {
        var viter131 = this.link_auto_ignite[kiter130];
        output.writeString(kiter130);
        output.writeBool(viter131);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetLinkStatusReq = module.exports.SetLinkStatusReq = function(args) {
  this.action = null;
  this.initiatorNodeName = null;
  this.responderNodeName = null;
  if (args) {
    if (args.action !== undefined) {
      this.action = args.action;
    }
    if (args.initiatorNodeName !== undefined) {
      this.initiatorNodeName = args.initiatorNodeName;
    }
    if (args.responderNodeName !== undefined) {
      this.responderNodeName = args.responderNodeName;
    }
  }
};
SetLinkStatusReq.prototype = {};
SetLinkStatusReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.action = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.responderNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetLinkStatusReq.prototype.write = function(output) {
  output.writeStructBegin('SetLinkStatusReq');
  if (this.action !== null && this.action !== undefined) {
    output.writeFieldBegin('action', Thrift.Type.I32, 1);
    output.writeI32(this.action);
    output.writeFieldEnd();
  }
  if (this.initiatorNodeName !== null && this.initiatorNodeName !== undefined) {
    output.writeFieldBegin('initiatorNodeName', Thrift.Type.STRING, 2);
    output.writeString(this.initiatorNodeName);
    output.writeFieldEnd();
  }
  if (this.responderNodeName !== null && this.responderNodeName !== undefined) {
    output.writeFieldBegin('responderNodeName', Thrift.Type.STRING, 3);
    output.writeString(this.responderNodeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionCandidate = module.exports.IgnitionCandidate = function(args) {
  this.initiatorNodeName = null;
  this.linkName = null;
  if (args) {
    if (args.initiatorNodeName !== undefined) {
      this.initiatorNodeName = args.initiatorNodeName;
    }
    if (args.linkName !== undefined) {
      this.linkName = args.linkName;
    }
  }
};
IgnitionCandidate.prototype = {};
IgnitionCandidate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.initiatorNodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.linkName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionCandidate.prototype.write = function(output) {
  output.writeStructBegin('IgnitionCandidate');
  if (this.initiatorNodeName !== null && this.initiatorNodeName !== undefined) {
    output.writeFieldBegin('initiatorNodeName', Thrift.Type.STRING, 1);
    output.writeString(this.initiatorNodeName);
    output.writeFieldEnd();
  }
  if (this.linkName !== null && this.linkName !== undefined) {
    output.writeFieldBegin('linkName', Thrift.Type.STRING, 2);
    output.writeString(this.linkName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IgnitionState = module.exports.IgnitionState = function(args) {
  this.visitedNodeNames = null;
  this.igCandidates = null;
  this.lastIgCandidates = null;
  this.igParams = null;
  if (args) {
    if (args.visitedNodeNames !== undefined) {
      this.visitedNodeNames = args.visitedNodeNames;
    }
    if (args.igCandidates !== undefined) {
      this.igCandidates = args.igCandidates;
    }
    if (args.lastIgCandidates !== undefined) {
      this.lastIgCandidates = args.lastIgCandidates;
    }
    if (args.igParams !== undefined) {
      this.igParams = args.igParams;
    }
  }
};
IgnitionState.prototype = {};
IgnitionState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.visitedNodeNames = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = input.readString();
          this.visitedNodeNames.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size139 = 0;
        var _rtmp3143;
        this.igCandidates = [];
        var _etype142 = 0;
        _rtmp3143 = input.readListBegin();
        _etype142 = _rtmp3143.etype;
        _size139 = _rtmp3143.size;
        for (var _i144 = 0; _i144 < _size139; ++_i144)
        {
          var elem145 = null;
          elem145 = new ttypes.IgnitionCandidate();
          elem145.read(input);
          this.igCandidates.push(elem145);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size146 = 0;
        var _rtmp3150;
        this.lastIgCandidates = [];
        var _etype149 = 0;
        _rtmp3150 = input.readListBegin();
        _etype149 = _rtmp3150.etype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var elem152 = null;
          elem152 = new ttypes.IgnitionCandidate();
          elem152.read(input);
          this.lastIgCandidates.push(elem152);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.igParams = new ttypes.IgnitionParams();
        this.igParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IgnitionState.prototype.write = function(output) {
  output.writeStructBegin('IgnitionState');
  if (this.visitedNodeNames !== null && this.visitedNodeNames !== undefined) {
    output.writeFieldBegin('visitedNodeNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.visitedNodeNames.length);
    for (var iter153 in this.visitedNodeNames)
    {
      if (this.visitedNodeNames.hasOwnProperty(iter153))
      {
        iter153 = this.visitedNodeNames[iter153];
        output.writeString(iter153);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.igCandidates !== null && this.igCandidates !== undefined) {
    output.writeFieldBegin('igCandidates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.igCandidates.length);
    for (var iter154 in this.igCandidates)
    {
      if (this.igCandidates.hasOwnProperty(iter154))
      {
        iter154 = this.igCandidates[iter154];
        iter154.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lastIgCandidates !== null && this.lastIgCandidates !== undefined) {
    output.writeFieldBegin('lastIgCandidates', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.lastIgCandidates.length);
    for (var iter155 in this.lastIgCandidates)
    {
      if (this.lastIgCandidates.hasOwnProperty(iter155))
      {
        iter155 = this.lastIgCandidates[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.igParams !== null && this.igParams !== undefined) {
    output.writeFieldBegin('igParams', Thrift.Type.STRUCT, 4);
    this.igParams.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetLinkStatus = module.exports.SetLinkStatus = function(args) {
  this.linkStatusType = null;
  this.responderMac = null;
  this.responderNodeType = null;
  this.golayIdx = null;
  this.controlSuperframe = null;
  this.responderNodePolarity = null;
  if (args) {
    if (args.linkStatusType !== undefined) {
      this.linkStatusType = args.linkStatusType;
    }
    if (args.responderMac !== undefined) {
      this.responderMac = args.responderMac;
    }
    if (args.responderNodeType !== undefined) {
      this.responderNodeType = args.responderNodeType;
    }
    if (args.golayIdx !== undefined) {
      this.golayIdx = args.golayIdx;
    }
    if (args.controlSuperframe !== undefined) {
      this.controlSuperframe = args.controlSuperframe;
    }
    if (args.responderNodePolarity !== undefined) {
      this.responderNodePolarity = args.responderNodePolarity;
    }
  }
};
SetLinkStatus.prototype = {};
SetLinkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.linkStatusType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.responderMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.responderNodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.golayIdx = new Topology_ttypes.GolayIdx();
        this.golayIdx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.controlSuperframe = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.responderNodePolarity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetLinkStatus.prototype.write = function(output) {
  output.writeStructBegin('SetLinkStatus');
  if (this.linkStatusType !== null && this.linkStatusType !== undefined) {
    output.writeFieldBegin('linkStatusType', Thrift.Type.I32, 1);
    output.writeI32(this.linkStatusType);
    output.writeFieldEnd();
  }
  if (this.responderMac !== null && this.responderMac !== undefined) {
    output.writeFieldBegin('responderMac', Thrift.Type.STRING, 2);
    output.writeString(this.responderMac);
    output.writeFieldEnd();
  }
  if (this.responderNodeType !== null && this.responderNodeType !== undefined) {
    output.writeFieldBegin('responderNodeType', Thrift.Type.I32, 3);
    output.writeI32(this.responderNodeType);
    output.writeFieldEnd();
  }
  if (this.golayIdx !== null && this.golayIdx !== undefined) {
    output.writeFieldBegin('golayIdx', Thrift.Type.STRUCT, 4);
    this.golayIdx.write(output);
    output.writeFieldEnd();
  }
  if (this.controlSuperframe !== null && this.controlSuperframe !== undefined) {
    output.writeFieldBegin('controlSuperframe', Thrift.Type.I64, 5);
    output.writeI64(this.controlSuperframe);
    output.writeFieldEnd();
  }
  if (this.responderNodePolarity !== null && this.responderNodePolarity !== undefined) {
    output.writeFieldBegin('responderNodePolarity', Thrift.Type.I32, 6);
    output.writeI32(this.responderNodePolarity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetLinkStatus = module.exports.GetLinkStatus = function(args) {
  this.responderMac = null;
  if (args) {
    if (args.responderMac !== undefined) {
      this.responderMac = args.responderMac;
    }
  }
};
GetLinkStatus.prototype = {};
GetLinkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.responderMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetLinkStatus.prototype.write = function(output) {
  output.writeStructBegin('GetLinkStatus');
  if (this.responderMac !== null && this.responderMac !== undefined) {
    output.writeFieldBegin('responderMac', Thrift.Type.STRING, 1);
    output.writeString(this.responderMac);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinkStatus = module.exports.LinkStatus = function(args) {
  this.responderMac = null;
  this.linkStatusType = null;
  if (args) {
    if (args.responderMac !== undefined) {
      this.responderMac = args.responderMac;
    }
    if (args.linkStatusType !== undefined) {
      this.linkStatusType = args.linkStatusType;
    }
  }
};
LinkStatus.prototype = {};
LinkStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.responderMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.linkStatusType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkStatus.prototype.write = function(output) {
  output.writeStructBegin('LinkStatus');
  if (this.responderMac !== null && this.responderMac !== undefined) {
    output.writeFieldBegin('responderMac', Thrift.Type.STRING, 1);
    output.writeString(this.responderMac);
    output.writeFieldEnd();
  }
  if (this.linkStatusType !== null && this.linkStatusType !== undefined) {
    output.writeFieldBegin('linkStatusType', Thrift.Type.I32, 2);
    output.writeI32(this.linkStatusType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetTopology = module.exports.GetTopology = function(args) {
};
GetTopology.prototype = {};
GetTopology.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTopology.prototype.write = function(output) {
  output.writeStructBegin('GetTopology');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeStatus = module.exports.SetNodeStatus = function(args) {
  this.nodeMac = null;
  this.markAllLinksDown = null;
  this.nodeStatus = null;
  if (args) {
    if (args.nodeMac !== undefined) {
      this.nodeMac = args.nodeMac;
    }
    if (args.markAllLinksDown !== undefined) {
      this.markAllLinksDown = args.markAllLinksDown;
    }
    if (args.nodeStatus !== undefined) {
      this.nodeStatus = args.nodeStatus;
    }
  }
};
SetNodeStatus.prototype = {};
SetNodeStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.markAllLinksDown = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.nodeStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeStatus.prototype.write = function(output) {
  output.writeStructBegin('SetNodeStatus');
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 1);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  if (this.markAllLinksDown !== null && this.markAllLinksDown !== undefined) {
    output.writeFieldBegin('markAllLinksDown', Thrift.Type.BOOL, 2);
    output.writeBool(this.markAllLinksDown);
    output.writeFieldEnd();
  }
  if (this.nodeStatus !== null && this.nodeStatus !== undefined) {
    output.writeFieldBegin('nodeStatus', Thrift.Type.I32, 3);
    output.writeI32(this.nodeStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeParamsReq = module.exports.SetNodeParamsReq = function(args) {
  this.nodeMac = null;
  this.nodeAirtime = null;
  this.nodeBWAlloc = null;
  if (args) {
    if (args.nodeMac !== undefined) {
      this.nodeMac = args.nodeMac;
    }
    if (args.nodeAirtime !== undefined) {
      this.nodeAirtime = args.nodeAirtime;
    }
    if (args.nodeBWAlloc !== undefined) {
      this.nodeBWAlloc = args.nodeBWAlloc;
    }
  }
};
SetNodeParamsReq.prototype = {};
SetNodeParamsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeAirtime = new BWAllocation_ttypes.NodeAirtime();
        this.nodeAirtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeBWAlloc = new BWAllocation_ttypes.NodeBwAlloc();
        this.nodeBWAlloc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeParamsReq.prototype.write = function(output) {
  output.writeStructBegin('SetNodeParamsReq');
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 1);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  if (this.nodeAirtime !== null && this.nodeAirtime !== undefined) {
    output.writeFieldBegin('nodeAirtime', Thrift.Type.STRUCT, 2);
    this.nodeAirtime.write(output);
    output.writeFieldEnd();
  }
  if (this.nodeBWAlloc !== null && this.nodeBWAlloc !== undefined) {
    output.writeFieldBegin('nodeBWAlloc', Thrift.Type.STRUCT, 3);
    this.nodeBWAlloc.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNetworkParamsReq = module.exports.SetNetworkParamsReq = function(args) {
  this.networkAirtime = null;
  this.networkBWAlloc = null;
  this.channel = null;
  if (args) {
    if (args.networkAirtime !== undefined) {
      this.networkAirtime = args.networkAirtime;
    }
    if (args.networkBWAlloc !== undefined) {
      this.networkBWAlloc = args.networkBWAlloc;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
  }
};
SetNetworkParamsReq.prototype = {};
SetNetworkParamsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.networkAirtime = new BWAllocation_ttypes.NetworkAirtime();
        this.networkAirtime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.networkBWAlloc = new BWAllocation_ttypes.NetworkBwAlloc();
        this.networkBWAlloc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.channel = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNetworkParamsReq.prototype.write = function(output) {
  output.writeStructBegin('SetNetworkParamsReq');
  if (this.networkAirtime !== null && this.networkAirtime !== undefined) {
    output.writeFieldBegin('networkAirtime', Thrift.Type.STRUCT, 1);
    this.networkAirtime.write(output);
    output.writeFieldEnd();
  }
  if (this.networkBWAlloc !== null && this.networkBWAlloc !== undefined) {
    output.writeFieldBegin('networkBWAlloc', Thrift.Type.STRUCT, 2);
    this.networkBWAlloc.write(output);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.BYTE, 3);
    output.writeByte(this.channel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeMac = module.exports.SetNodeMac = function(args) {
  this.nodeName = null;
  this.nodeMac = null;
  this.force = null;
  if (args) {
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
    if (args.nodeMac !== undefined) {
      this.nodeMac = args.nodeMac;
    }
    if (args.force !== undefined) {
      this.force = args.force;
    }
  }
};
SetNodeMac.prototype = {};
SetNodeMac.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.force = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeMac.prototype.write = function(output) {
  output.writeStructBegin('SetNodeMac');
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 1);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  if (this.nodeMac !== null && this.nodeMac !== undefined) {
    output.writeFieldBegin('nodeMac', Thrift.Type.STRING, 2);
    output.writeString(this.nodeMac);
    output.writeFieldEnd();
  }
  if (this.force !== null && this.force !== undefined) {
    output.writeFieldBegin('force', Thrift.Type.BOOL, 3);
    output.writeBool(this.force);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetNodeMacList = module.exports.SetNodeMacList = function(args) {
  this.setNodeMacList = null;
  if (args) {
    if (args.setNodeMacList !== undefined) {
      this.setNodeMacList = args.setNodeMacList;
    }
  }
};
SetNodeMacList.prototype = {};
SetNodeMacList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.setNodeMacList = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = new ttypes.SetNodeMac();
          elem162.read(input);
          this.setNodeMacList.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetNodeMacList.prototype.write = function(output) {
  output.writeStructBegin('SetNodeMacList');
  if (this.setNodeMacList !== null && this.setNodeMacList !== undefined) {
    output.writeFieldBegin('setNodeMacList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.setNodeMacList.length);
    for (var iter163 in this.setNodeMacList)
    {
      if (this.setNodeMacList.hasOwnProperty(iter163))
      {
        iter163 = this.setNodeMacList[iter163];
        iter163.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SetTopologyName = module.exports.SetTopologyName = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
SetTopologyName.prototype = {};
SetTopologyName.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetTopologyName.prototype.write = function(output) {
  output.writeStructBegin('SetTopologyName');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BumpLinkUpAttempts = module.exports.BumpLinkUpAttempts = function(args) {
  this.linkName = null;
  if (args) {
    if (args.linkName !== undefined) {
      this.linkName = args.linkName;
    }
  }
};
BumpLinkUpAttempts.prototype = {};
BumpLinkUpAttempts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.linkName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BumpLinkUpAttempts.prototype.write = function(output) {
  output.writeStructBegin('BumpLinkUpAttempts');
  if (this.linkName !== null && this.linkName !== undefined) {
    output.writeFieldBegin('linkName', Thrift.Type.STRING, 1);
    output.writeString(this.linkName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddNode = module.exports.AddNode = function(args) {
  this.node = null;
  if (args) {
    if (args.node !== undefined) {
      this.node = args.node;
    }
  }
};
AddNode.prototype = {};
AddNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.node = new Topology_ttypes.Node();
        this.node.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddNode.prototype.write = function(output) {
  output.writeStructBegin('AddNode');
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRUCT, 1);
    this.node.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelNode = module.exports.DelNode = function(args) {
  this.nodeName = null;
  this.forceDelete = null;
  if (args) {
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
    if (args.forceDelete !== undefined) {
      this.forceDelete = args.forceDelete;
    }
  }
};
DelNode.prototype = {};
DelNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.forceDelete = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelNode.prototype.write = function(output) {
  output.writeStructBegin('DelNode');
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 1);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  if (this.forceDelete !== null && this.forceDelete !== undefined) {
    output.writeFieldBegin('forceDelete', Thrift.Type.BOOL, 2);
    output.writeBool(this.forceDelete);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EditNode = module.exports.EditNode = function(args) {
  this.nodeName = null;
  this.newNode = null;
  if (args) {
    if (args.nodeName !== undefined) {
      this.nodeName = args.nodeName;
    }
    if (args.newNode !== undefined) {
      this.newNode = args.newNode;
    }
  }
};
EditNode.prototype = {};
EditNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nodeName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newNode = new Topology_ttypes.Node();
        this.newNode.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditNode.prototype.write = function(output) {
  output.writeStructBegin('EditNode');
  if (this.nodeName !== null && this.nodeName !== undefined) {
    output.writeFieldBegin('nodeName', Thrift.Type.STRING, 1);
    output.writeString(this.nodeName);
    output.writeFieldEnd();
  }
  if (this.newNode !== null && this.newNode !== undefined) {
    output.writeFieldBegin('newNode', Thrift.Type.STRUCT, 2);
    this.newNode.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddLink = module.exports.AddLink = function(args) {
  this.link = null;
  if (args) {
    if (args.link !== undefined) {
      this.link = args.link;
    }
  }
};
AddLink.prototype = {};
AddLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.link = new Topology_ttypes.Link();
        this.link.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddLink.prototype.write = function(output) {
  output.writeStructBegin('AddLink');
  if (this.link !== null && this.link !== undefined) {
    output.writeFieldBegin('link', Thrift.Type.STRUCT, 1);
    this.link.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelLink = module.exports.DelLink = function(args) {
  this.a_node_name = null;
  this.z_node_name = null;
  this.forceDelete = null;
  if (args) {
    if (args.a_node_name !== undefined) {
      this.a_node_name = args.a_node_name;
    }
    if (args.z_node_name !== undefined) {
      this.z_node_name = args.z_node_name;
    }
    if (args.forceDelete !== undefined) {
      this.forceDelete = args.forceDelete;
    }
  }
};
DelLink.prototype = {};
DelLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.a_node_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.z_node_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.forceDelete = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelLink.prototype.write = function(output) {
  output.writeStructBegin('DelLink');
  if (this.a_node_name !== null && this.a_node_name !== undefined) {
    output.writeFieldBegin('a_node_name', Thrift.Type.STRING, 1);
    output.writeString(this.a_node_name);
    output.writeFieldEnd();
  }
  if (this.z_node_name !== null && this.z_node_name !== undefined) {
    output.writeFieldBegin('z_node_name', Thrift.Type.STRING, 2);
    output.writeString(this.z_node_name);
    output.writeFieldEnd();
  }
  if (this.forceDelete !== null && this.forceDelete !== undefined) {
    output.writeFieldBegin('forceDelete', Thrift.Type.BOOL, 3);
    output.writeBool(this.forceDelete);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AddSite = module.exports.AddSite = function(args) {
  this.site = null;
  if (args) {
    if (args.site !== undefined) {
      this.site = args.site;
    }
  }
};
AddSite.prototype = {};
AddSite.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.site = new Topology_ttypes.Site();
        this.site.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddSite.prototype.write = function(output) {
  output.writeStructBegin('AddSite');
  if (this.site !== null && this.site !== undefined) {
    output.writeFieldBegin('site', Thrift.Type.STRUCT, 1);
    this.site.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DelSite = module.exports.DelSite = function(args) {
  this.siteName = null;
  if (args) {
    if (args.siteName !== undefined) {
      this.siteName = args.siteName;
    }
  }
};
DelSite.prototype = {};
DelSite.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.siteName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DelSite.prototype.write = function(output) {
  output.writeStructBegin('DelSite');
  if (this.siteName !== null && this.siteName !== undefined) {
    output.writeFieldBegin('siteName', Thrift.Type.STRING, 1);
    output.writeString(this.siteName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EditSite = module.exports.EditSite = function(args) {
  this.siteName = null;
  this.newSite = null;
  if (args) {
    if (args.siteName !== undefined) {
      this.siteName = args.siteName;
    }
    if (args.newSite !== undefined) {
      this.newSite = args.newSite;
    }
  }
};
EditSite.prototype = {};
EditSite.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.siteName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newSite = new Topology_ttypes.Site();
        this.newSite.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EditSite.prototype.write = function(output) {
  output.writeStructBegin('EditSite');
  if (this.siteName !== null && this.siteName !== undefined) {
    output.writeFieldBegin('siteName', Thrift.Type.STRING, 1);
    output.writeString(this.siteName);
    output.writeFieldEnd();
  }
  if (this.newSite !== null && this.newSite !== undefined) {
    output.writeFieldBegin('newSite', Thrift.Type.STRUCT, 2);
    this.newSite.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResetTopologyState = module.exports.ResetTopologyState = function(args) {
  this.resetLinkupAttempts = null;
  if (args) {
    if (args.resetLinkupAttempts !== undefined) {
      this.resetLinkupAttempts = args.resetLinkupAttempts;
    }
  }
};
ResetTopologyState.prototype = {};
ResetTopologyState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.resetLinkupAttempts = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResetTopologyState.prototype.write = function(output) {
  output.writeStructBegin('ResetTopologyState');
  if (this.resetLinkupAttempts !== null && this.resetLinkupAttempts !== undefined) {
    output.writeFieldBegin('resetLinkupAttempts', Thrift.Type.BOOL, 1);
    output.writeBool(this.resetLinkupAttempts);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BulkAdd = module.exports.BulkAdd = function(args) {
  this.sites = null;
  this.nodes = null;
  this.links = null;
  if (args) {
    if (args.sites !== undefined) {
      this.sites = args.sites;
    }
    if (args.nodes !== undefined) {
      this.nodes = args.nodes;
    }
    if (args.links !== undefined) {
      this.links = args.links;
    }
  }
};
BulkAdd.prototype = {};
BulkAdd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.sites = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = new Topology_ttypes.Site();
          elem170.read(input);
          this.sites.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size171 = 0;
        var _rtmp3175;
        this.nodes = [];
        var _etype174 = 0;
        _rtmp3175 = input.readListBegin();
        _etype174 = _rtmp3175.etype;
        _size171 = _rtmp3175.size;
        for (var _i176 = 0; _i176 < _size171; ++_i176)
        {
          var elem177 = null;
          elem177 = new Topology_ttypes.Node();
          elem177.read(input);
          this.nodes.push(elem177);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.links = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = new Topology_ttypes.Link();
          elem184.read(input);
          this.links.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BulkAdd.prototype.write = function(output) {
  output.writeStructBegin('BulkAdd');
  if (this.sites !== null && this.sites !== undefined) {
    output.writeFieldBegin('sites', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.sites.length);
    for (var iter185 in this.sites)
    {
      if (this.sites.hasOwnProperty(iter185))
      {
        iter185 = this.sites[iter185];
        iter185.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nodes !== null && this.nodes !== undefined) {
    output.writeFieldBegin('nodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodes.length);
    for (var iter186 in this.nodes)
    {
      if (this.nodes.hasOwnProperty(iter186))
      {
        iter186 = this.nodes[iter186];
        iter186.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.links !== null && this.links !== undefined) {
    output.writeFieldBegin('links', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.links.length);
    for (var iter187 in this.links)
    {
      if (this.links.hasOwnProperty(iter187))
      {
        iter187 = this.links[iter187];
        iter187.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MicroRoute = module.exports.MicroRoute = function(args) {
  this.tx = null;
  this.rx = null;
  if (args) {
    if (args.tx !== undefined) {
      this.tx = args.tx;
    }
    if (args.rx !== undefined) {
      this.rx = args.rx;
    }
  }
};
MicroRoute.prototype = {};
MicroRoute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.tx = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.rx = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MicroRoute.prototype.write = function(output) {
  output.writeStructBegin('MicroRoute');
  if (this.tx !== null && this.tx !== undefined) {
    output.writeFieldBegin('tx', Thrift.Type.I16, 1);
    output.writeI16(this.tx);
    output.writeFieldEnd();
  }
  if (this.rx !== null && this.rx !== undefined) {
    output.writeFieldBegin('rx', Thrift.Type.I16, 2);
    output.writeI16(this.rx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RouteInfo = module.exports.RouteInfo = function(args) {
  this.route = null;
  this.rssi = null;
  this.snrEst = null;
  this.postSnr = null;
  this.rxStart = null;
  this.packetIdx = null;
  if (args) {
    if (args.route !== undefined) {
      this.route = args.route;
    }
    if (args.rssi !== undefined) {
      this.rssi = args.rssi;
    }
    if (args.snrEst !== undefined) {
      this.snrEst = args.snrEst;
    }
    if (args.postSnr !== undefined) {
      this.postSnr = args.postSnr;
    }
    if (args.rxStart !== undefined) {
      this.rxStart = args.rxStart;
    }
    if (args.packetIdx !== undefined) {
      this.packetIdx = args.packetIdx;
    }
  }
};
RouteInfo.prototype = {};
RouteInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.route = new ttypes.MicroRoute();
        this.route.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rssi = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.snrEst = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.postSnr = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.rxStart = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.packetIdx = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RouteInfo.prototype.write = function(output) {
  output.writeStructBegin('RouteInfo');
  if (this.route !== null && this.route !== undefined) {
    output.writeFieldBegin('route', Thrift.Type.STRUCT, 1);
    this.route.write(output);
    output.writeFieldEnd();
  }
  if (this.rssi !== null && this.rssi !== undefined) {
    output.writeFieldBegin('rssi', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.rssi);
    output.writeFieldEnd();
  }
  if (this.snrEst !== null && this.snrEst !== undefined) {
    output.writeFieldBegin('snrEst', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.snrEst);
    output.writeFieldEnd();
  }
  if (this.postSnr !== null && this.postSnr !== undefined) {
    output.writeFieldBegin('postSnr', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.postSnr);
    output.writeFieldEnd();
  }
  if (this.rxStart !== null && this.rxStart !== undefined) {
    output.writeFieldBegin('rxStart', Thrift.Type.I32, 5);
    output.writeI32(this.rxStart);
    output.writeFieldEnd();
  }
  if (this.packetIdx !== null && this.packetIdx !== undefined) {
    output.writeFieldBegin('packetIdx', Thrift.Type.BYTE, 6);
    output.writeByte(this.packetIdx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BeamIndices = module.exports.BeamIndices = function(args) {
  this.low = null;
  this.high = null;
  if (args) {
    if (args.low !== undefined) {
      this.low = args.low;
    }
    if (args.high !== undefined) {
      this.high = args.high;
    }
  }
};
BeamIndices.prototype = {};
BeamIndices.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.low = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.high = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BeamIndices.prototype.write = function(output) {
  output.writeStructBegin('BeamIndices');
  if (this.low !== null && this.low !== undefined) {
    output.writeFieldBegin('low', Thrift.Type.I32, 1);
    output.writeI32(this.low);
    output.writeFieldEnd();
  }
  if (this.high !== null && this.high !== undefined) {
    output.writeFieldBegin('high', Thrift.Type.I32, 2);
    output.writeI32(this.high);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanReq = module.exports.ScanReq = function(args) {
  this.token = null;
  this.scanMode = null;
  this.startBwgdIdx = null;
  this.bfScanInvertPolarity = null;
  this.txNodeMac = null;
  this.rxNodeMac = null;
  this.routes = null;
  this.beams = null;
  this.enablePbfUrx = null;
  this.rtCal = null;
  this.bwgdLen = null;
  this.txPwrIndex = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.scanMode !== undefined) {
      this.scanMode = args.scanMode;
    }
    if (args.startBwgdIdx !== undefined) {
      this.startBwgdIdx = args.startBwgdIdx;
    }
    if (args.bfScanInvertPolarity !== undefined) {
      this.bfScanInvertPolarity = args.bfScanInvertPolarity;
    }
    if (args.txNodeMac !== undefined) {
      this.txNodeMac = args.txNodeMac;
    }
    if (args.rxNodeMac !== undefined) {
      this.rxNodeMac = args.rxNodeMac;
    }
    if (args.routes !== undefined) {
      this.routes = args.routes;
    }
    if (args.beams !== undefined) {
      this.beams = args.beams;
    }
    if (args.enablePbfUrx !== undefined) {
      this.enablePbfUrx = args.enablePbfUrx;
    }
    if (args.rtCal !== undefined) {
      this.rtCal = args.rtCal;
    }
    if (args.bwgdLen !== undefined) {
      this.bwgdLen = args.bwgdLen;
    }
    if (args.txPwrIndex !== undefined) {
      this.txPwrIndex = args.txPwrIndex;
    }
  }
};
ScanReq.prototype = {};
ScanReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.token = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.scanMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startBwgdIdx = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.bfScanInvertPolarity = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.txNodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rxNodeMac = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.routes = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = new ttypes.MicroRoute();
          elem194.read(input);
          this.routes.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.beams = new ttypes.BeamIndices();
        this.beams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.enablePbfUrx = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.rtCal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BYTE) {
        this.bwgdLen = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I16) {
        this.txPwrIndex = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanReq.prototype.write = function(output) {
  output.writeStructBegin('ScanReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.I32, 1);
    output.writeI32(this.token);
    output.writeFieldEnd();
  }
  if (this.scanMode !== null && this.scanMode !== undefined) {
    output.writeFieldBegin('scanMode', Thrift.Type.I32, 2);
    output.writeI32(this.scanMode);
    output.writeFieldEnd();
  }
  if (this.startBwgdIdx !== null && this.startBwgdIdx !== undefined) {
    output.writeFieldBegin('startBwgdIdx', Thrift.Type.I64, 3);
    output.writeI64(this.startBwgdIdx);
    output.writeFieldEnd();
  }
  if (this.bfScanInvertPolarity !== null && this.bfScanInvertPolarity !== undefined) {
    output.writeFieldBegin('bfScanInvertPolarity', Thrift.Type.BOOL, 4);
    output.writeBool(this.bfScanInvertPolarity);
    output.writeFieldEnd();
  }
  if (this.txNodeMac !== null && this.txNodeMac !== undefined) {
    output.writeFieldBegin('txNodeMac', Thrift.Type.STRING, 5);
    output.writeString(this.txNodeMac);
    output.writeFieldEnd();
  }
  if (this.rxNodeMac !== null && this.rxNodeMac !== undefined) {
    output.writeFieldBegin('rxNodeMac', Thrift.Type.STRING, 6);
    output.writeString(this.rxNodeMac);
    output.writeFieldEnd();
  }
  if (this.routes !== null && this.routes !== undefined) {
    output.writeFieldBegin('routes', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.routes.length);
    for (var iter195 in this.routes)
    {
      if (this.routes.hasOwnProperty(iter195))
      {
        iter195 = this.routes[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.beams !== null && this.beams !== undefined) {
    output.writeFieldBegin('beams', Thrift.Type.STRUCT, 8);
    this.beams.write(output);
    output.writeFieldEnd();
  }
  if (this.enablePbfUrx !== null && this.enablePbfUrx !== undefined) {
    output.writeFieldBegin('enablePbfUrx', Thrift.Type.BOOL, 9);
    output.writeBool(this.enablePbfUrx);
    output.writeFieldEnd();
  }
  if (this.rtCal !== null && this.rtCal !== undefined) {
    output.writeFieldBegin('rtCal', Thrift.Type.I32, 10);
    output.writeI32(this.rtCal);
    output.writeFieldEnd();
  }
  if (this.bwgdLen !== null && this.bwgdLen !== undefined) {
    output.writeFieldBegin('bwgdLen', Thrift.Type.BYTE, 11);
    output.writeByte(this.bwgdLen);
    output.writeFieldEnd();
  }
  if (this.txPwrIndex !== null && this.txPwrIndex !== undefined) {
    output.writeFieldBegin('txPwrIndex', Thrift.Type.I16, 12);
    output.writeI16(this.txPwrIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanResp = module.exports.ScanResp = function(args) {
  this.token = null;
  this.curSuperframeNum = null;
  this.routeInfoList = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.curSuperframeNum !== undefined) {
      this.curSuperframeNum = args.curSuperframeNum;
    }
    if (args.routeInfoList !== undefined) {
      this.routeInfoList = args.routeInfoList;
    }
  }
};
ScanResp.prototype = {};
ScanResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.token = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.curSuperframeNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.routeInfoList = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.RouteInfo();
          elem202.read(input);
          this.routeInfoList.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanResp.prototype.write = function(output) {
  output.writeStructBegin('ScanResp');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.I32, 1);
    output.writeI32(this.token);
    output.writeFieldEnd();
  }
  if (this.curSuperframeNum !== null && this.curSuperframeNum !== undefined) {
    output.writeFieldBegin('curSuperframeNum', Thrift.Type.I64, 2);
    output.writeI64(this.curSuperframeNum);
    output.writeFieldEnd();
  }
  if (this.routeInfoList !== null && this.routeInfoList !== undefined) {
    output.writeFieldBegin('routeInfoList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.routeInfoList.length);
    for (var iter203 in this.routeInfoList)
    {
      if (this.routeInfoList.hasOwnProperty(iter203))
      {
        iter203 = this.routeInfoList[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StartScan = module.exports.StartScan = function(args) {
  this.isPBF = null;
  this.scanMode = null;
  this.startTime = null;
  this.txNode = null;
  this.rxNodes = null;
  this.beams = null;
  this.enablePbfUrx = null;
  this.rtCal = null;
  this.bwgdLen = null;
  this.txPwrIndex = null;
  if (args) {
    if (args.isPBF !== undefined) {
      this.isPBF = args.isPBF;
    }
    if (args.scanMode !== undefined) {
      this.scanMode = args.scanMode;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.txNode !== undefined) {
      this.txNode = args.txNode;
    }
    if (args.rxNodes !== undefined) {
      this.rxNodes = args.rxNodes;
    }
    if (args.beams !== undefined) {
      this.beams = args.beams;
    }
    if (args.enablePbfUrx !== undefined) {
      this.enablePbfUrx = args.enablePbfUrx;
    }
    if (args.rtCal !== undefined) {
      this.rtCal = args.rtCal;
    }
    if (args.bwgdLen !== undefined) {
      this.bwgdLen = args.bwgdLen;
    }
    if (args.txPwrIndex !== undefined) {
      this.txPwrIndex = args.txPwrIndex;
    }
  }
};
StartScan.prototype = {};
StartScan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isPBF = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.scanMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.txNode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.rxNodes = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = input.readString();
          this.rxNodes.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size211 = 0;
        var _rtmp3215;
        this.beams = [];
        var _etype214 = 0;
        _rtmp3215 = input.readListBegin();
        _etype214 = _rtmp3215.etype;
        _size211 = _rtmp3215.size;
        for (var _i216 = 0; _i216 < _size211; ++_i216)
        {
          var elem217 = null;
          elem217 = new ttypes.BeamIndices();
          elem217.read(input);
          this.beams.push(elem217);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.enablePbfUrx = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.rtCal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BYTE) {
        this.bwgdLen = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I16) {
        this.txPwrIndex = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartScan.prototype.write = function(output) {
  output.writeStructBegin('StartScan');
  if (this.isPBF !== null && this.isPBF !== undefined) {
    output.writeFieldBegin('isPBF', Thrift.Type.BOOL, 1);
    output.writeBool(this.isPBF);
    output.writeFieldEnd();
  }
  if (this.scanMode !== null && this.scanMode !== undefined) {
    output.writeFieldBegin('scanMode', Thrift.Type.I32, 2);
    output.writeI32(this.scanMode);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 3);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.txNode !== null && this.txNode !== undefined) {
    output.writeFieldBegin('txNode', Thrift.Type.STRING, 4);
    output.writeString(this.txNode);
    output.writeFieldEnd();
  }
  if (this.rxNodes !== null && this.rxNodes !== undefined) {
    output.writeFieldBegin('rxNodes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.rxNodes.length);
    for (var iter218 in this.rxNodes)
    {
      if (this.rxNodes.hasOwnProperty(iter218))
      {
        iter218 = this.rxNodes[iter218];
        output.writeString(iter218);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.beams !== null && this.beams !== undefined) {
    output.writeFieldBegin('beams', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.beams.length);
    for (var iter219 in this.beams)
    {
      if (this.beams.hasOwnProperty(iter219))
      {
        iter219 = this.beams[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enablePbfUrx !== null && this.enablePbfUrx !== undefined) {
    output.writeFieldBegin('enablePbfUrx', Thrift.Type.BOOL, 7);
    output.writeBool(this.enablePbfUrx);
    output.writeFieldEnd();
  }
  if (this.rtCal !== null && this.rtCal !== undefined) {
    output.writeFieldBegin('rtCal', Thrift.Type.I32, 8);
    output.writeI32(this.rtCal);
    output.writeFieldEnd();
  }
  if (this.bwgdLen !== null && this.bwgdLen !== undefined) {
    output.writeFieldBegin('bwgdLen', Thrift.Type.BYTE, 9);
    output.writeByte(this.bwgdLen);
    output.writeFieldEnd();
  }
  if (this.txPwrIndex !== null && this.txPwrIndex !== undefined) {
    output.writeFieldBegin('txPwrIndex', Thrift.Type.I16, 10);
    output.writeI16(this.txPwrIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GetScanStatus = module.exports.GetScanStatus = function(args) {
  this.isConcise = null;
  this.tokenFrom = null;
  this.tokenTo = null;
  if (args) {
    if (args.isConcise !== undefined) {
      this.isConcise = args.isConcise;
    }
    if (args.tokenFrom !== undefined) {
      this.tokenFrom = args.tokenFrom;
    }
    if (args.tokenTo !== undefined) {
      this.tokenTo = args.tokenTo;
    }
  }
};
GetScanStatus.prototype = {};
GetScanStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isConcise = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.tokenFrom = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tokenTo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetScanStatus.prototype.write = function(output) {
  output.writeStructBegin('GetScanStatus');
  if (this.isConcise !== null && this.isConcise !== undefined) {
    output.writeFieldBegin('isConcise', Thrift.Type.BOOL, 1);
    output.writeBool(this.isConcise);
    output.writeFieldEnd();
  }
  if (this.tokenFrom !== null && this.tokenFrom !== undefined) {
    output.writeFieldBegin('tokenFrom', Thrift.Type.I32, 2);
    output.writeI32(this.tokenFrom);
    output.writeFieldEnd();
  }
  if (this.tokenTo !== null && this.tokenTo !== undefined) {
    output.writeFieldBegin('tokenTo', Thrift.Type.I32, 3);
    output.writeI32(this.tokenTo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResetScanStatus = module.exports.ResetScanStatus = function(args) {
  this.tokenFrom = null;
  this.tokenTo = null;
  if (args) {
    if (args.tokenFrom !== undefined) {
      this.tokenFrom = args.tokenFrom;
    }
    if (args.tokenTo !== undefined) {
      this.tokenTo = args.tokenTo;
    }
  }
};
ResetScanStatus.prototype = {};
ResetScanStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tokenFrom = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.tokenTo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResetScanStatus.prototype.write = function(output) {
  output.writeStructBegin('ResetScanStatus');
  if (this.tokenFrom !== null && this.tokenFrom !== undefined) {
    output.writeFieldBegin('tokenFrom', Thrift.Type.I32, 1);
    output.writeI32(this.tokenFrom);
    output.writeFieldEnd();
  }
  if (this.tokenTo !== null && this.tokenTo !== undefined) {
    output.writeFieldBegin('tokenTo', Thrift.Type.I32, 2);
    output.writeI32(this.tokenTo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanData = module.exports.ScanData = function(args) {
  this.responses = null;
  this.txNode = null;
  this.startBwgdIdx = null;
  if (args) {
    if (args.responses !== undefined) {
      this.responses = args.responses;
    }
    if (args.txNode !== undefined) {
      this.txNode = args.txNode;
    }
    if (args.startBwgdIdx !== undefined) {
      this.startBwgdIdx = args.startBwgdIdx;
    }
  }
};
ScanData.prototype = {};
ScanData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size220 = 0;
        var _rtmp3224;
        this.responses = {};
        var _ktype221 = 0;
        var _vtype222 = 0;
        _rtmp3224 = input.readMapBegin();
        _ktype221 = _rtmp3224.ktype;
        _vtype222 = _rtmp3224.vtype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var key226 = null;
          var val227 = null;
          key226 = input.readString();
          val227 = new ttypes.ScanResp();
          val227.read(input);
          this.responses[key226] = val227;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.txNode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startBwgdIdx = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanData.prototype.write = function(output) {
  output.writeStructBegin('ScanData');
  if (this.responses !== null && this.responses !== undefined) {
    output.writeFieldBegin('responses', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.responses));
    for (var kiter228 in this.responses)
    {
      if (this.responses.hasOwnProperty(kiter228))
      {
        var viter229 = this.responses[kiter228];
        output.writeString(kiter228);
        viter229.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.txNode !== null && this.txNode !== undefined) {
    output.writeFieldBegin('txNode', Thrift.Type.STRING, 2);
    output.writeString(this.txNode);
    output.writeFieldEnd();
  }
  if (this.startBwgdIdx !== null && this.startBwgdIdx !== undefined) {
    output.writeFieldBegin('startBwgdIdx', Thrift.Type.I64, 3);
    output.writeI64(this.startBwgdIdx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanStatus = module.exports.ScanStatus = function(args) {
  this.scans = null;
  if (args) {
    if (args.scans !== undefined) {
      this.scans = args.scans;
    }
  }
};
ScanStatus.prototype = {};
ScanStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size230 = 0;
        var _rtmp3234;
        this.scans = {};
        var _ktype231 = 0;
        var _vtype232 = 0;
        _rtmp3234 = input.readMapBegin();
        _ktype231 = _rtmp3234.ktype;
        _vtype232 = _rtmp3234.vtype;
        _size230 = _rtmp3234.size;
        for (var _i235 = 0; _i235 < _size230; ++_i235)
        {
          var key236 = null;
          var val237 = null;
          key236 = input.readI32();
          val237 = new ttypes.ScanData();
          val237.read(input);
          this.scans[key236] = val237;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanStatus.prototype.write = function(output) {
  output.writeStructBegin('ScanStatus');
  if (this.scans !== null && this.scans !== undefined) {
    output.writeFieldBegin('scans', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.scans));
    for (var kiter238 in this.scans)
    {
      if (this.scans.hasOwnProperty(kiter238))
      {
        var viter239 = this.scans[kiter238];
        output.writeI32(kiter238);
        viter239.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Message = module.exports.Message = function(args) {
  this.mType = null;
  this.value = null;
  if (args) {
    if (args.mType !== undefined) {
      this.mType = args.mType;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.mType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.mType !== null && this.mType !== undefined) {
    output.writeFieldBegin('mType', Thrift.Type.I32, 1);
    output.writeI32(this.mType);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hello = module.exports.Hello = function(args) {
};
Hello.prototype = {};
Hello.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hello.prototype.write = function(output) {
  output.writeStructBegin('Hello');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

E2EAck = module.exports.E2EAck = function(args) {
  this.success = null;
  this.message = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
E2EAck.prototype = {};
E2EAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EAck.prototype.write = function(output) {
  output.writeStructBegin('E2EAck');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BgpNeighbor = module.exports.BgpNeighbor = function(args) {
  this.asn = null;
  this.ipv6 = null;
  if (args) {
    if (args.asn !== undefined) {
      this.asn = args.asn;
    }
    if (args.ipv6 !== undefined) {
      this.ipv6 = args.ipv6;
    }
  }
};
BgpNeighbor.prototype = {};
BgpNeighbor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.asn = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ipv6 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BgpNeighbor.prototype.write = function(output) {
  output.writeStructBegin('BgpNeighbor');
  if (this.asn !== null && this.asn !== undefined) {
    output.writeFieldBegin('asn', Thrift.Type.I64, 1);
    output.writeI64(this.asn);
    output.writeFieldEnd();
  }
  if (this.ipv6 !== null && this.ipv6 !== undefined) {
    output.writeFieldBegin('ipv6', Thrift.Type.STRING, 2);
    output.writeString(this.ipv6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BgpNeighbors = module.exports.BgpNeighbors = function(args) {
  this.neighbors = null;
  if (args) {
    if (args.neighbors !== undefined) {
      this.neighbors = args.neighbors;
    }
  }
};
BgpNeighbors.prototype = {};
BgpNeighbors.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.neighbors = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = new ttypes.BgpNeighbor();
          elem246.read(input);
          this.neighbors.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BgpNeighbors.prototype.write = function(output) {
  output.writeStructBegin('BgpNeighbors');
  if (this.neighbors !== null && this.neighbors !== undefined) {
    output.writeFieldBegin('neighbors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.neighbors.length);
    for (var iter247 in this.neighbors)
    {
      if (this.neighbors.hasOwnProperty(iter247))
      {
        iter247 = this.neighbors[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BgpConfig = module.exports.BgpConfig = function(args) {
  this.localAsn = null;
  this.neighbors = null;
  if (args) {
    if (args.localAsn !== undefined) {
      this.localAsn = args.localAsn;
    }
    if (args.neighbors !== undefined) {
      this.neighbors = args.neighbors;
    }
  }
};
BgpConfig.prototype = {};
BgpConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.localAsn = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.neighbors = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new ttypes.BgpNeighbor();
          elem254.read(input);
          this.neighbors.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BgpConfig.prototype.write = function(output) {
  output.writeStructBegin('BgpConfig');
  if (this.localAsn !== null && this.localAsn !== undefined) {
    output.writeFieldBegin('localAsn', Thrift.Type.I64, 1);
    output.writeI64(this.localAsn);
    output.writeFieldEnd();
  }
  if (this.neighbors !== null && this.neighbors !== undefined) {
    output.writeFieldBegin('neighbors', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.neighbors.length);
    for (var iter255 in this.neighbors)
    {
      if (this.neighbors.hasOwnProperty(iter255))
      {
        iter255 = this.neighbors[iter255];
        iter255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NetworkInfo = module.exports.NetworkInfo = function(args) {
  this.e2eCtrlUrl = null;
  this.aggrCtrlUrl = null;
  this.network = null;
  this.bgpNeighbors = null;
  this.bgpConfig = null;
  if (args) {
    if (args.e2eCtrlUrl !== undefined) {
      this.e2eCtrlUrl = args.e2eCtrlUrl;
    }
    if (args.aggrCtrlUrl !== undefined) {
      this.aggrCtrlUrl = args.aggrCtrlUrl;
    }
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.bgpNeighbors !== undefined) {
      this.bgpNeighbors = args.bgpNeighbors;
    }
    if (args.bgpConfig !== undefined) {
      this.bgpConfig = args.bgpConfig;
    }
  }
};
NetworkInfo.prototype = {};
NetworkInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.e2eCtrlUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size256 = 0;
        var _rtmp3260;
        this.aggrCtrlUrl = [];
        var _etype259 = 0;
        _rtmp3260 = input.readListBegin();
        _etype259 = _rtmp3260.etype;
        _size256 = _rtmp3260.size;
        for (var _i261 = 0; _i261 < _size256; ++_i261)
        {
          var elem262 = null;
          elem262 = input.readString();
          this.aggrCtrlUrl.push(elem262);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.network = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.bgpNeighbors = new ttypes.BgpNeighbors();
        this.bgpNeighbors.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.bgpConfig = new ttypes.BgpConfig();
        this.bgpConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NetworkInfo.prototype.write = function(output) {
  output.writeStructBegin('NetworkInfo');
  if (this.e2eCtrlUrl !== null && this.e2eCtrlUrl !== undefined) {
    output.writeFieldBegin('e2eCtrlUrl', Thrift.Type.STRING, 1);
    output.writeString(this.e2eCtrlUrl);
    output.writeFieldEnd();
  }
  if (this.aggrCtrlUrl !== null && this.aggrCtrlUrl !== undefined) {
    output.writeFieldBegin('aggrCtrlUrl', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.aggrCtrlUrl.length);
    for (var iter263 in this.aggrCtrlUrl)
    {
      if (this.aggrCtrlUrl.hasOwnProperty(iter263))
      {
        iter263 = this.aggrCtrlUrl[iter263];
        output.writeString(iter263);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.STRING, 3);
    output.writeString(this.network);
    output.writeFieldEnd();
  }
  if (this.bgpNeighbors !== null && this.bgpNeighbors !== undefined) {
    output.writeFieldBegin('bgpNeighbors', Thrift.Type.STRUCT, 4);
    this.bgpNeighbors.write(output);
    output.writeFieldEnd();
  }
  if (this.bgpConfig !== null && this.bgpConfig !== undefined) {
    output.writeFieldBegin('bgpConfig', Thrift.Type.STRUCT, 5);
    this.bgpConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Empty = module.exports.Empty = function(args) {
};
Empty.prototype = {};
Empty.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Empty.prototype.write = function(output) {
  output.writeStructBegin('Empty');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
