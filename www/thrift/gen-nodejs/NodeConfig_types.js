//
// Autogenerated by Thrift Compiler
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var FwOptParams_ttypes = require('./FwOptParams_types');

var ttypes = module.exports = {};
SystemParams = module.exports.SystemParams = function(args) {
  this.managedConfig = null;
  if (args) {
    if (args.managedConfig !== undefined) {
      this.managedConfig = args.managedConfig;
    }
  }
};
SystemParams.prototype = {};
SystemParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.managedConfig = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemParams.prototype.write = function(output) {
  output.writeStructBegin('SystemParams');
  if (this.managedConfig !== null && this.managedConfig !== undefined) {
    output.writeFieldBegin('managedConfig', Thrift.Type.BOOL, 1);
    output.writeBool(this.managedConfig);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeEnvParams = module.exports.NodeEnvParams = function(args) {
  this.OPENR_ENABLED = null;
  this.OPENR_ALLOC_PREFIX = null;
  this.OPENR_USE_RTT_METRIC = null;
  this.OPENR_USE_FIB_NSS = null;
  this.FW_NSS = null;
  this.OPENR_USE_FIB_LINUX = null;
  this.OOB_NETNS = null;
  this.OOB_INTERFACE = null;
  this.CPE_INTERFACE = null;
  this.E2E_ENABLED = null;
  this.FW_IF2IF = null;
  this.TOPOLOGY_FILE = null;
  this.SYSTEM_LOGS_ENABLED = null;
  if (args) {
    if (args.OPENR_ENABLED !== undefined) {
      this.OPENR_ENABLED = args.OPENR_ENABLED;
    }
    if (args.OPENR_ALLOC_PREFIX !== undefined) {
      this.OPENR_ALLOC_PREFIX = args.OPENR_ALLOC_PREFIX;
    }
    if (args.OPENR_USE_RTT_METRIC !== undefined) {
      this.OPENR_USE_RTT_METRIC = args.OPENR_USE_RTT_METRIC;
    }
    if (args.OPENR_USE_FIB_NSS !== undefined) {
      this.OPENR_USE_FIB_NSS = args.OPENR_USE_FIB_NSS;
    }
    if (args.FW_NSS !== undefined) {
      this.FW_NSS = args.FW_NSS;
    }
    if (args.OPENR_USE_FIB_LINUX !== undefined) {
      this.OPENR_USE_FIB_LINUX = args.OPENR_USE_FIB_LINUX;
    }
    if (args.OOB_NETNS !== undefined) {
      this.OOB_NETNS = args.OOB_NETNS;
    }
    if (args.OOB_INTERFACE !== undefined) {
      this.OOB_INTERFACE = args.OOB_INTERFACE;
    }
    if (args.CPE_INTERFACE !== undefined) {
      this.CPE_INTERFACE = args.CPE_INTERFACE;
    }
    if (args.E2E_ENABLED !== undefined) {
      this.E2E_ENABLED = args.E2E_ENABLED;
    }
    if (args.FW_IF2IF !== undefined) {
      this.FW_IF2IF = args.FW_IF2IF;
    }
    if (args.TOPOLOGY_FILE !== undefined) {
      this.TOPOLOGY_FILE = args.TOPOLOGY_FILE;
    }
    if (args.SYSTEM_LOGS_ENABLED !== undefined) {
      this.SYSTEM_LOGS_ENABLED = args.SYSTEM_LOGS_ENABLED;
    }
  }
};
NodeEnvParams.prototype = {};
NodeEnvParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.OPENR_ENABLED = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.OPENR_ALLOC_PREFIX = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.OPENR_USE_RTT_METRIC = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.OPENR_USE_FIB_NSS = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.FW_NSS = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.OPENR_USE_FIB_LINUX = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.OOB_NETNS = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.OOB_INTERFACE = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.CPE_INTERFACE = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.E2E_ENABLED = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.FW_IF2IF = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.TOPOLOGY_FILE = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.SYSTEM_LOGS_ENABLED = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeEnvParams.prototype.write = function(output) {
  output.writeStructBegin('NodeEnvParams');
  if (this.OPENR_ENABLED !== null && this.OPENR_ENABLED !== undefined) {
    output.writeFieldBegin('OPENR_ENABLED', Thrift.Type.STRING, 1);
    output.writeString(this.OPENR_ENABLED);
    output.writeFieldEnd();
  }
  if (this.OPENR_ALLOC_PREFIX !== null && this.OPENR_ALLOC_PREFIX !== undefined) {
    output.writeFieldBegin('OPENR_ALLOC_PREFIX', Thrift.Type.STRING, 2);
    output.writeString(this.OPENR_ALLOC_PREFIX);
    output.writeFieldEnd();
  }
  if (this.OPENR_USE_RTT_METRIC !== null && this.OPENR_USE_RTT_METRIC !== undefined) {
    output.writeFieldBegin('OPENR_USE_RTT_METRIC', Thrift.Type.STRING, 3);
    output.writeString(this.OPENR_USE_RTT_METRIC);
    output.writeFieldEnd();
  }
  if (this.OPENR_USE_FIB_NSS !== null && this.OPENR_USE_FIB_NSS !== undefined) {
    output.writeFieldBegin('OPENR_USE_FIB_NSS', Thrift.Type.STRING, 4);
    output.writeString(this.OPENR_USE_FIB_NSS);
    output.writeFieldEnd();
  }
  if (this.FW_NSS !== null && this.FW_NSS !== undefined) {
    output.writeFieldBegin('FW_NSS', Thrift.Type.STRING, 5);
    output.writeString(this.FW_NSS);
    output.writeFieldEnd();
  }
  if (this.OPENR_USE_FIB_LINUX !== null && this.OPENR_USE_FIB_LINUX !== undefined) {
    output.writeFieldBegin('OPENR_USE_FIB_LINUX', Thrift.Type.STRING, 6);
    output.writeString(this.OPENR_USE_FIB_LINUX);
    output.writeFieldEnd();
  }
  if (this.OOB_NETNS !== null && this.OOB_NETNS !== undefined) {
    output.writeFieldBegin('OOB_NETNS', Thrift.Type.STRING, 7);
    output.writeString(this.OOB_NETNS);
    output.writeFieldEnd();
  }
  if (this.OOB_INTERFACE !== null && this.OOB_INTERFACE !== undefined) {
    output.writeFieldBegin('OOB_INTERFACE', Thrift.Type.STRING, 8);
    output.writeString(this.OOB_INTERFACE);
    output.writeFieldEnd();
  }
  if (this.CPE_INTERFACE !== null && this.CPE_INTERFACE !== undefined) {
    output.writeFieldBegin('CPE_INTERFACE', Thrift.Type.STRING, 9);
    output.writeString(this.CPE_INTERFACE);
    output.writeFieldEnd();
  }
  if (this.E2E_ENABLED !== null && this.E2E_ENABLED !== undefined) {
    output.writeFieldBegin('E2E_ENABLED', Thrift.Type.STRING, 10);
    output.writeString(this.E2E_ENABLED);
    output.writeFieldEnd();
  }
  if (this.FW_IF2IF !== null && this.FW_IF2IF !== undefined) {
    output.writeFieldBegin('FW_IF2IF', Thrift.Type.STRING, 11);
    output.writeString(this.FW_IF2IF);
    output.writeFieldEnd();
  }
  if (this.TOPOLOGY_FILE !== null && this.TOPOLOGY_FILE !== undefined) {
    output.writeFieldBegin('TOPOLOGY_FILE', Thrift.Type.STRING, 12);
    output.writeString(this.TOPOLOGY_FILE);
    output.writeFieldEnd();
  }
  if (this.SYSTEM_LOGS_ENABLED !== null && this.SYSTEM_LOGS_ENABLED !== undefined) {
    output.writeFieldBegin('SYSTEM_LOGS_ENABLED', Thrift.Type.STRING, 13);
    output.writeString(this.SYSTEM_LOGS_ENABLED);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogTailSource = module.exports.LogTailSource = function(args) {
  this.enabled = null;
  this.filename = null;
  if (args) {
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
    if (args.filename !== undefined) {
      this.filename = args.filename;
    }
  }
};
LogTailSource.prototype = {};
LogTailSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogTailSource.prototype.write = function(output) {
  output.writeStructBegin('LogTailSource');
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 1);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 2);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LogTailParams = module.exports.LogTailParams = function(args) {
  this.sources = null;
  if (args) {
    if (args.sources !== undefined) {
      this.sources = args.sources;
    }
  }
};
LogTailParams.prototype = {};
LogTailParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.sources = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new ttypes.LogTailSource();
          val7.read(input);
          this.sources[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogTailParams.prototype.write = function(output) {
  output.writeStructBegin('LogTailParams');
  if (this.sources !== null && this.sources !== undefined) {
    output.writeFieldBegin('sources', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.sources));
    for (var kiter8 in this.sources)
    {
      if (this.sources.hasOwnProperty(kiter8))
      {
        var viter9 = this.sources[kiter8];
        output.writeString(kiter8);
        viter9.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatsAgentSource = module.exports.StatsAgentSource = function(args) {
  this.enabled = null;
  this.zmq_url = null;
  if (args) {
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
    if (args.zmq_url !== undefined) {
      this.zmq_url = args.zmq_url;
    }
  }
};
StatsAgentSource.prototype = {};
StatsAgentSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.zmq_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatsAgentSource.prototype.write = function(output) {
  output.writeStructBegin('StatsAgentSource');
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 1);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.zmq_url !== null && this.zmq_url !== undefined) {
    output.writeFieldBegin('zmq_url', Thrift.Type.STRING, 2);
    output.writeString(this.zmq_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatsAgentParams = module.exports.StatsAgentParams = function(args) {
  this.sources = null;
  if (args) {
    if (args.sources !== undefined) {
      this.sources = args.sources;
    }
  }
};
StatsAgentParams.prototype = {};
StatsAgentParams.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.sources = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = new ttypes.StatsAgentSource();
          val17.read(input);
          this.sources[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatsAgentParams.prototype.write = function(output) {
  output.writeStructBegin('StatsAgentParams');
  if (this.sources !== null && this.sources !== undefined) {
    output.writeFieldBegin('sources', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.sources));
    for (var kiter18 in this.sources)
    {
      if (this.sources.hasOwnProperty(kiter18))
      {
        var viter19 = this.sources[kiter18];
        output.writeString(kiter18);
        viter19.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NodeConfig = module.exports.NodeConfig = function(args) {
  this.envParams = null;
  this.fwParams = null;
  this.logTailParams = null;
  this.statsAgentParams = null;
  this.sysParams = null;
  if (args) {
    if (args.envParams !== undefined) {
      this.envParams = args.envParams;
    }
    if (args.fwParams !== undefined) {
      this.fwParams = args.fwParams;
    }
    if (args.logTailParams !== undefined) {
      this.logTailParams = args.logTailParams;
    }
    if (args.statsAgentParams !== undefined) {
      this.statsAgentParams = args.statsAgentParams;
    }
    if (args.sysParams !== undefined) {
      this.sysParams = args.sysParams;
    }
  }
};
NodeConfig.prototype = {};
NodeConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.envParams = new ttypes.NodeEnvParams();
        this.envParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fwParams = new FwOptParams_ttypes.NodeFwParams();
        this.fwParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logTailParams = new ttypes.LogTailParams();
        this.logTailParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.statsAgentParams = new ttypes.StatsAgentParams();
        this.statsAgentParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.sysParams = new ttypes.SystemParams();
        this.sysParams.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NodeConfig.prototype.write = function(output) {
  output.writeStructBegin('NodeConfig');
  if (this.envParams !== null && this.envParams !== undefined) {
    output.writeFieldBegin('envParams', Thrift.Type.STRUCT, 1);
    this.envParams.write(output);
    output.writeFieldEnd();
  }
  if (this.fwParams !== null && this.fwParams !== undefined) {
    output.writeFieldBegin('fwParams', Thrift.Type.STRUCT, 2);
    this.fwParams.write(output);
    output.writeFieldEnd();
  }
  if (this.logTailParams !== null && this.logTailParams !== undefined) {
    output.writeFieldBegin('logTailParams', Thrift.Type.STRUCT, 3);
    this.logTailParams.write(output);
    output.writeFieldEnd();
  }
  if (this.statsAgentParams !== null && this.statsAgentParams !== undefined) {
    output.writeFieldBegin('statsAgentParams', Thrift.Type.STRUCT, 4);
    this.statsAgentParams.write(output);
    output.writeFieldEnd();
  }
  if (this.sysParams !== null && this.sysParams !== undefined) {
    output.writeFieldBegin('sysParams', Thrift.Type.STRUCT, 5);
    this.sysParams.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
